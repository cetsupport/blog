<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>To Be Decided </title>
    <link>http://tbd.kaitoy.xyz/post/</link>
    <language>en-us</language>
    <author>Kaito Yamada</author>
    <rights>(C) 2016</rights>
    <updated>2016-04-16 11:09:53 -0600 MDT</updated>

    
      
        <item>
          <title>Pcap4J in Kotlin</title>
          <link>http://tbd.kaitoy.xyz/2016/04/16/pcap4j-in-kotlin/</link>
          <pubDate>Sat, 16 Apr 2016 11:09:53 MDT</pubDate>
          <author>Kaito Yamada</author>
          <guid>http://tbd.kaitoy.xyz/2016/04/16/pcap4j-in-kotlin/</guid>
          <description>

&lt;p&gt;&lt;a href=&#34;http://tbd.kaitoy.xyz/2016/04/10/pcap4j-in-groovy/&#34;&gt;Groovy&lt;/a&gt;に続いて、&lt;a href=&#34;https://kotlinlang.org/&#34;&gt;&lt;strong&gt;Kotlin&lt;/strong&gt;&lt;/a&gt;で&lt;a href=&#34;https://github.com/kaitoy/pcap4j&#34;&gt;&lt;strong&gt;Pcap4J&lt;/strong&gt;&lt;/a&gt;を使ってパケットキャプチャしてみた。&lt;/p&gt;

&lt;p&gt;KotlinからでもPcap4Jちゃんと動くよということを実証するのが主な目的。
また、今後JavaなアプリはKotlinで書こうかと思っているので、その予習も兼ねている。&lt;/p&gt;

&lt;h2 id=&#34;kotlinとは&#34;&gt;Kotlinとは&lt;/h2&gt;

&lt;p&gt;KotlinはJVM言語、つまりJavaのバイトコードにコンパイルされてJavaの実行環境で動くプログラミング言語のひとつ。
&lt;a href=&#34;https://www.jetbrains.com/idea/&#34;&gt;IntelliJ IDEA&lt;/a&gt;で有名な&lt;a href=&#34;https://www.jetbrains.com/&#34;&gt;JetBrains社&lt;/a&gt;によって&lt;a href=&#34;https://github.com/JetBrains/kotlin&#34;&gt;OSS&lt;/a&gt;として開発されている。&lt;/p&gt;

&lt;p&gt;2011年に生まれた新しめな言語で、2016/2/17に&lt;a href=&#34;http://blog.jetbrains.com/jp/2016/02/17/578&#34;&gt;v1がリリースされ&lt;/a&gt;、主にAndroidアプリの開発用として注目されている。&lt;/p&gt;

&lt;p&gt;「実用的」であることを売りにしていて、つまり少ない学習コストで導入でき、既存のJavaコードやMavenなどのツールとの相互運用性を持つとされている。
IntelliJ IDEA、&lt;a href=&#34;http://developer.android.com/sdk/index.html&#34;&gt;Android Studio&lt;/a&gt;、&lt;a href=&#34;https://eclipse.org/&#34;&gt;Eclipse&lt;/a&gt;といった主要なIDEのサポートもあり、開発環境は整っている。
v1以降の後方互換性の維持も表明されていて、長期サポートが必要な製品開発にも堪える。&lt;/p&gt;

&lt;p&gt;さらに、厳格な静的型付けやNullable/Non-Null型などにより安全性を確保しつつ、型推論やラムダ式などで生産性を高めている。&lt;/p&gt;

&lt;p&gt;Javaのバイトコードだけでなく、JavaScriptを生成するバックエンドを持っているのも大きな特徴。
ユースケースがよく分からないが。&lt;/p&gt;

&lt;p&gt;GitHubにホストされているKotlinプロジェクトは、2016/4/15現在、全体の &lt;strong&gt;0.1%&lt;/strong&gt; (&lt;sup&gt;3493&lt;/sup&gt;&amp;frasl;&lt;sub&gt;3215549&lt;/sub&gt;) しかない。
v1のリリースは結構注目を集めたので、この割合は今後増えていくと期待される。&lt;/p&gt;

&lt;h2 id=&#34;kotlinのインストール&#34;&gt;Kotlinのインストール&lt;/h2&gt;

&lt;p&gt;&lt;a href=&#34;https://kotlinlang.org/docs/tutorials/&#34;&gt;チュートリアル&lt;/a&gt;に従えば、IDEやテキストエディタ+コマンドラインの環境を整えてHello Worldを書いて実行するところまで簡単にできる。
筆者はEclipse(Mars)とコマンドラインの環境をWindows 7上で作った。
Kotlinのバージョンは1.0.1-2。&lt;/p&gt;

&lt;p&gt;コマンドラインについては、&lt;a href=&#34;https://github.com/JetBrains/kotlin/releases/latest&#34;&gt;GitHub Releases&lt;/a&gt;からアーカイブをダウンロードして、適当なところに展開して&lt;code&gt;bin&lt;/code&gt;フォルダにパスを通すだけ。
前提となるJavaについては、環境変数&lt;code&gt;JAVA_HOME&lt;/code&gt;を設定するか、&lt;code&gt;java&lt;/code&gt;コマンドにパスを通せばいい模様。&lt;/p&gt;

&lt;p&gt;因みにKotlinの書き方は、&lt;a href=&#34;https://kotlinlang.org/docs/tutorials/koans.html&#34;&gt;Kotlin Koans&lt;/a&gt;という例題集を&lt;a href=&#34;http://try.kotlinlang.org/koans&#34;&gt;オンラインのIDE&lt;/a&gt;で解きながらを学ぶことができる。&lt;/p&gt;

&lt;h2 id=&#34;パケットキャプチャ-with-pcap4j-in-java&#34;&gt;パケットキャプチャ with Pcap4J in Java&lt;/h2&gt;

&lt;p&gt;Pcap4Jでパケットキャプチャするコードを普通にJavaで書くと以下の様になる。
(&lt;a href=&#34;http://tbd.kaitoy.xyz/2016/04/10/pcap4j-in-groovy/&#34;&gt;Groovy&lt;/a&gt;の時のと一緒。)&lt;/p&gt;

&lt;p&gt;&lt;script src=&#34;https://gist.github.com/kaitoy/eebcd5bdfab179cab916d3182f3d6d11.js&#34;&gt;&lt;/script&gt;
&lt;/p&gt;

&lt;p&gt;これを実行すると、パケットキャプチャするネットワークインターフェースを選択し、5つのパケットをキャプチャしてタイムスタンプと共にコンソールに表示する。&lt;/p&gt;

&lt;h2 id=&#34;パケットキャプチャ-with-pcap4j-in-kotlin&#34;&gt;パケットキャプチャ with Pcap4J in Kotlin&lt;/h2&gt;

&lt;p&gt;上記処理をKotlinで書くと以下の様になる。&lt;/p&gt;

&lt;p&gt;&lt;script src=&#34;https://gist.github.com/kaitoy/074769880c7bf4c0628c1c25a724c1a7.js&#34;&gt;&lt;/script&gt;
&lt;/p&gt;

&lt;p&gt;メインクラスはGroovy同様書かなくていいが、&lt;code&gt;main&lt;/code&gt;関数は必要。&lt;/p&gt;

&lt;p&gt;型推論があってとても楽。
ラムダ式、補間文字列(String interpolation)、名前付き引数といったモダンめな機能は普通に使える。
(名前付き引数はJavaで書いたメソッドをKotlinから呼ぶときは使えない。)&lt;/p&gt;

&lt;p&gt;オープンクラスを実現する機能である&lt;a href=&#34;https://kotlinlang.org/docs/reference/extensions.html&#34;&gt;Extensions&lt;/a&gt;を&lt;code&gt;PcapHandle&lt;/code&gt;に使ってみた。
なんだか便利そう。&lt;/p&gt;

&lt;p&gt;Nullable/Non-Null型がすごい。言語仕様で&lt;code&gt;NullPointerException&lt;/code&gt;が発生しないように守ってくれる。
例えば&lt;code&gt;filter&lt;/code&gt;は宣言の時点では初期化文で&lt;code&gt;null&lt;/code&gt;が入る可能性があるので&lt;code&gt;Nullable&lt;/code&gt;な&lt;code&gt;String&lt;/code&gt;という型に推論されるが、&lt;code&gt;filter?.let&lt;/code&gt;というNullチェックをするメソッドに渡したブロック内では自動で&lt;code&gt;Non-Null&lt;/code&gt;な&lt;code&gt;String&lt;/code&gt;にキャストされ、&lt;code&gt;filter.length&lt;/code&gt;を安全に評価できるようになっている。
Nullチェックをしないで&lt;code&gt;filter.length&lt;/code&gt;と書くとコンパイルエラーになる。すごい。&lt;/p&gt;

&lt;p&gt;けどJavaのコードから返ってくるオブジェクトは普通、プラットフォーム型というものになり、このNullセーフな仕組みが働かない。
これに対しては&lt;a href=&#34;https://kotlinlang.org/docs/reference/java-interop.html#nullability-annotations&#34;&gt;Null可能性アノテーション&lt;/a&gt;を使えば幸せになれるらしい。&lt;/p&gt;

&lt;p&gt;さらに、上記コードには表れていないが、キャストも安全になっている模様。(cf. &lt;a href=&#34;http://kotlinlang.org/docs/reference/typecasts.html#smart-casts&#34;&gt;スマートキャスト&lt;/a&gt;、&lt;a href=&#34;http://kotlinlang.org/docs/reference/typecasts.html#safe-nullable-cast-operator&#34;&gt;セーフキャスト&lt;/a&gt;)&lt;/p&gt;

&lt;p&gt;Kotlinは基本コンパイラ言語なので、上記コードを実行するには以下ようなコマンドで一旦コンパイルする必要がある。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-cmd&#34;&gt;kotlinc -cp pcap4j-core.jar Pcap4jLoop.kt -include-runtime -d Pcap4jLoop.jar
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;このコマンドだとKotlinのランタイム入りjarファイルができる。
このjarを、Pcap4J 1.6.2、Slf4J 1.7.12、JNA 4.2.1を使って、以下のコマンドで実行できることを確認した。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-cmd&#34;&gt;java -cp pcap4j-core.jar;pcap4j-packetfactory-static.jar;jna.jar;slf4j-api.jar;Pcap4jLoop.jar Pcap4jLoopKt tcp
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;このコマンドで指定しているメインクラス&lt;code&gt;Pcap4jLoopKt&lt;/code&gt;は、上記コードでクラスの記述を省いた為にKotlinがソースファイル名(Pcap4jLoop.kt)を基に自動生成したもの。&lt;/p&gt;

&lt;p&gt;コンパイル/実行方法は&lt;a href=&#34;https://kotlinlang.org/docs/tutorials/command-line.html#creating-and-running-a-first-application&#34;&gt;他にもある&lt;/a&gt;。&lt;/p&gt;

&lt;h2 id=&#34;スクリプトなkotlin&#34;&gt;スクリプトなKotlin&lt;/h2&gt;

&lt;p&gt;Kotlinプログラムはスクリプトとしても書けて、コンパイル無しで実行することができる。
この場合、&lt;code&gt;main&lt;/code&gt;関数は消してその中身をトップレベルに書き、ファイルの拡張子を&lt;code&gt;.kts&lt;/code&gt;にする。&lt;/p&gt;

&lt;p&gt;&lt;script src=&#34;https://gist.github.com/kaitoy/b6ee844ad2353585a30984ef0bedf844.js&#34;&gt;&lt;/script&gt;
&lt;/p&gt;

&lt;p&gt;上記スクリプトは以下のコマンドで実行できた。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-cmd&#34;&gt;kotlinc -cp pcap4j-core.jar;jna.jar;pcap4j-packetfactory-static.jar;slf4j-api.jar -script Pcap4jLoop.kts tcp
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;EclipseのKotlinプラグインはこのスクリプト形式をまだサポートしていないようで残念。&lt;/p&gt;
</description>
        </item>
      
    
      
        <item>
          <title>Pcap4J in Groovy</title>
          <link>http://tbd.kaitoy.xyz/2016/04/10/pcap4j-in-groovy/</link>
          <pubDate>Sun, 10 Apr 2016 00:05:27 MDT</pubDate>
          <author>Kaito Yamada</author>
          <guid>http://tbd.kaitoy.xyz/2016/04/10/pcap4j-in-groovy/</guid>
          <description>

&lt;p&gt;&lt;a href=&#34;http://www.groovy-lang.org/index.html&#34;&gt;&lt;strong&gt;Groovy&lt;/strong&gt;&lt;/a&gt;で&lt;a href=&#34;https://github.com/kaitoy/pcap4j&#34;&gt;&lt;strong&gt;Pcap4J&lt;/strong&gt;&lt;/a&gt;を使ってパケットキャプチャしてみた。&lt;/p&gt;

&lt;p&gt;GroovyからでもPcap4Jちゃんと動くよということを実証するのが主な目的。
また、さすがにそろそろ&lt;a href=&#34;https://maven.apache.org/&#34;&gt;Maven&lt;/a&gt;を卒業してGradle(下記)使おうと思うので、予習も兼ねている。&lt;/p&gt;

&lt;h2 id=&#34;groovyとは&#34;&gt;Groovyとは&lt;/h2&gt;

&lt;p&gt;GroovyはJVM言語、つまりJavaのバイトコードにコンパイルされてJavaの実行環境で動くプログラミング言語のひとつ。
Javaのプログラマにとってとっつきやすい文法を保ちつつ、動的型付けを実現し、また&lt;a href=&#34;https://www.ruby-lang.org/ja/&#34;&gt;Ruby&lt;/a&gt;などのスクリプト言語の記法や機能を取り入れ、生産性を高めている。&lt;/p&gt;

&lt;p&gt;現在は&lt;a href=&#34;http://www.apache.org/&#34;&gt;Apacheソフトウェア財団&lt;/a&gt;によって管理され、&lt;a href=&#34;https://github.com/apache/groovy&#34;&gt;OSS&lt;/a&gt;として開発が進められている。&lt;/p&gt;

&lt;p&gt;Webアプリケーションフレームワークの&lt;a href=&#34;https://grails.org/&#34;&gt;&lt;strong&gt;Grails&lt;/strong&gt;&lt;/a&gt; やビルドツールの&lt;a href=&#34;http://gradle.org/&#34;&gt;&lt;strong&gt;Gradle&lt;/strong&gt;&lt;/a&gt;で採用されている。
Gradleは最近Javaプロジェクトのビルドツールの主流になっていて、Groovyはその定義ファイルを記述する言語として知名度が高いが、Groovyで開発されているプロジェクトとなるとあまり多くないようだ。
GitHubにホストされているGroovyプロジェクトは、2016/4/9現在 &lt;strong&gt;0.8%弱&lt;/strong&gt; (25,087/3,200,229) しかない。&lt;/p&gt;

&lt;p&gt;なぜ人気がないのかはよく分からないが、少なくとも、長くて打ちにくい名前とダサいロゴは不評のようだ。&lt;/p&gt;

&lt;h2 id=&#34;groovyのインストール&#34;&gt;Groovyのインストール&lt;/h2&gt;

&lt;p&gt;Windows 7にGroovy 2.4.6をインストールする。&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://www.groovy-lang.org/install.html&#34;&gt;本家サイトの手順&lt;/a&gt;に従い、Binary Releaseのアーカイブをダウンロードして、適当なところに展開して、展開したフォルダのパスを環境変数&lt;code&gt;GROOVY_HOME&lt;/code&gt;にセットし、&lt;code&gt;%GROOVY_HOME%\bin&lt;/code&gt;を&lt;code&gt;PATH&lt;/code&gt;に追加するだけ。&lt;/p&gt;

&lt;p&gt;Java 6以降が前提なので、&lt;code&gt;JAVA_HOME&lt;/code&gt;にJDK 1.7.0_17のパスをセットしておいた。JREでもいいはず。&lt;/p&gt;

&lt;h2 id=&#34;パケットキャプチャ-with-pcap4j-in-java&#34;&gt;パケットキャプチャ with Pcap4J in Java&lt;/h2&gt;

&lt;p&gt;Pcap4Jでパケットキャプチャするコードを普通にJavaで書くと以下の様になる。&lt;/p&gt;

&lt;p&gt;&lt;script src=&#34;https://gist.github.com/kaitoy/eebcd5bdfab179cab916d3182f3d6d11.js&#34;&gt;&lt;/script&gt;
&lt;/p&gt;

&lt;p&gt;これを実行すると、パケットキャプチャするネットワークインターフェースを選択し、5つのパケットをキャプチャしてタイムスタンプと共にコンソールに表示する。&lt;/p&gt;

&lt;h2 id=&#34;パケットキャプチャ-with-pcap4j-in-groovy&#34;&gt;パケットキャプチャ with Pcap4J in Groovy&lt;/h2&gt;

&lt;p&gt;上記処理をGroovyで書くと以下の様になる。&lt;/p&gt;

&lt;p&gt;&lt;script src=&#34;https://gist.github.com/kaitoy/c75837d3537303b004506d3e335eac17.js&#34;&gt;&lt;/script&gt;
&lt;/p&gt;

&lt;p&gt;メインクラスを書かなくていいところが大きい。
変数の型を書かなくていいのも楽。
ラムダ式でクロージャも作れるし補間文字列(String interpolation)も使える。&lt;/p&gt;

&lt;p&gt;また、ここでは使っていないが、オープンクラスなどのメタプログラミングもサポートされている。&lt;/p&gt;

&lt;p&gt;上記コードは、Pcap4J 1.6.2、Slf4J 1.7.12、JNA 4.2.1を使って、以下のコマンドで実行できることを確認した。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-cmd&#34;&gt;groovy -cp &amp;quot;pcap4j-core.jar;jna.jar;slf4j-api.jar;pcap4j-packetfactory-static.jar&amp;quot; Pcap4jLoop.groovy tcp
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;これはスクリプト的な実行方法だが、&lt;code&gt;groovyc&lt;/code&gt;コマンドで事前にコンパイルしてclassファイルを生成し、&lt;code&gt;java&lt;/code&gt;コマンドで実行することもできる。&lt;/p&gt;

&lt;h3 id=&#34;困ったところ&#34;&gt;困ったところ&lt;/h3&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;本家サイトのドキュメントが分かり辛い。&lt;/p&gt;

&lt;p&gt;頭から読んでいくと急にディープな部分に引き込まれ、なかなかコードを書き始められなかった。&lt;/p&gt;

&lt;p&gt;最近の言語やフレームワークのサイトはチュートリアルに従って動くコードを見ながら概要から詳細に理解を深められる形になっていることが多いので、仕様の詳細が羅列されている感じのGroovyサイトはなんとも読みにくかった。&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;クラスパスの指定が上手くできない。&lt;/p&gt;

&lt;p&gt;groovyコマンドにオプションで複数のクラスパスを指定するのに、普通に&lt;code&gt;-cp pcap4j-core.jar;jna.jar&lt;/code&gt;みたいにしたら最初の&lt;code&gt;pcap4j-core.jar&lt;/code&gt;にしかクラスパスが通らなかった。
区切りを&lt;code&gt;:&lt;/code&gt;にするとどちらにも通らない。&lt;/p&gt;

&lt;p&gt;環境変数&lt;code&gt;CLASSPATH&lt;/code&gt;に&lt;code&gt;pcap4j-core.jar;jna.jar&lt;/code&gt;をセットしておくと&lt;code&gt;-cp&lt;/code&gt;を使わなくても正しく両方に通るし、&lt;code&gt;%userprofile%\.groovy\&lt;/code&gt;にjarを入れておくだけでもいいみたいなんだけど、&lt;code&gt;-cp&lt;/code&gt;が中途半端にしか機能しないのが気持ち悪い。&lt;/p&gt;

&lt;p&gt;のでちょっとソースを見たら、groovyコマンドはバッチで書かれていることに気付いた。
バッチだと、&lt;code&gt;;&lt;/code&gt;で区切られているものは半角スペースで区切られているのと同じで別々の引数になってしまうので、上のような書き方だと&lt;code&gt;jna.jar&lt;/code&gt;は&lt;code&gt;-cp&lt;/code&gt;の値として処理されない。
クラスパス全体をダブルコーテーションで囲って、&lt;code&gt;-cp &amp;quot;pcap4j-core.jar;jna.jar&amp;quot;&lt;/code&gt;みたいにしたらできた。なんか残念な出来。。。&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;
</description>
        </item>
      
    
      
        <item>
          <title> ズンドコキヨシ with Pcap4J - ZUNDOKOプロトコルを実装してみた</title>
          <link>http://tbd.kaitoy.xyz/2016/03/19/zundoko-kiyoshi-with-pcap4j/</link>
          <pubDate>Sat, 19 Mar 2016 11:47:03 MDT</pubDate>
          <author>Kaito Yamada</author>
          <guid>http://tbd.kaitoy.xyz/2016/03/19/zundoko-kiyoshi-with-pcap4j/</guid>
          <description>

&lt;p&gt;先週くらいから巷でズンドコズンドコ騒いでいると思ってはいたが、昨日ようやくその元ネタを見た。
以下のツイートだ。&lt;/p&gt;

&lt;p&gt;&lt;blockquote class=&#34;twitter-tweet&#34; data-lang=&#34;ja&#34;&gt;&lt;p lang=&#34;ja&#34; dir=&#34;ltr&#34;&gt;Javaの講義、試験が「自作関数を作り記述しなさい」って問題だったから&lt;br&gt;「ズン」「ドコ」のいずれかをランダムで出力し続けて「ズン」「ズン」「ズン」「ズン」「ドコ」の配列が出たら「キ・ヨ・シ！」って出力した後終了って関数作ったら満点で単位貰ってた&lt;/p&gt;&amp;mdash; てくも (@kumiromilk) &lt;a href=&#34;https://twitter.com/kumiromilk/status/707437861881180160&#34;&gt;2016年3月9日&lt;/a&gt;&lt;/blockquote&gt;
&lt;script async src=&#34;//platform.twitter.com/widgets.js&#34; charset=&#34;utf-8&#34;&gt;&lt;/script&gt;&lt;/p&gt;

&lt;p&gt;面白い。
巷ではこれを&lt;a href=&#34;http://qiita.com/shunsugai@github/items/971a15461de29563bf90&#34;&gt;いろんな言語で実装したりしているみたい&lt;/a&gt;でさらに面白い。&lt;/p&gt;

&lt;p&gt;私もこのビッグウェーブに乗らないわけにいかないので、専門分野であるネットワーク周りを開拓しようと思い、ZUNDOKOプロトコルというものを考案して実装してみた。書いたソースは&lt;a href=&#34;https://github.com/kaitoy/zundoko-protocol&#34;&gt;GitHub&lt;/a&gt;においた。&lt;/p&gt;

&lt;h2 id=&#34;zundokoプロトコル&#34;&gt;ZUNDOKOプロトコル&lt;/h2&gt;

&lt;p&gt;クライアントはサーバに「ズン」か「ドコ」を送る。&lt;/p&gt;

&lt;p&gt;サーバは「ズン」を4回受信した後に「ドコ」を受信するとクライアントに「キ・ヨ・シ！」を返す。&lt;/p&gt;

&lt;p&gt;クライアント/サーバ間でやり取りするメッセージ(Zundokoパケット)のフォーマットは下図。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-text&#34;&gt; 0                            15                              31
+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
|             zundoko (null-terminated string)                  |
|                                                               |
|                                                               |
|                                                               |
|                                                               |
+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;要はzundokoフィールドがあるだけ。
このzundokoフィールドは20 byte固定長で、NULL (0x00)で終わるUTF-8の文字列を保持する。&lt;/p&gt;

&lt;p&gt;このメッセージを運ぶ下位レイヤはEthernetで、EtherTypeは0x01FF。&lt;/p&gt;

&lt;p&gt;Ethernetにした理由は実装(下記)が楽だから。
EtherTypeは&lt;a href=&#34;http://www.iana.org/assignments/ieee-802-numbers/ieee-802-numbers.xhtml#ieee-802-numbers-1&#34;&gt;IANA&lt;/a&gt;でExperimentalとされている範囲から適当に選んだ。もちろんIANAに登録などはしていない。&lt;/p&gt;

&lt;p&gt;因みに、Ethernetヘッダを加えた、クライアント/サーバ間でやり取りする完全なパケットは以下の様になる。(プリアンブルとかは除く。)&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-text&#34;&gt; 0                            15
+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
|    Dst Hardware Address       |
+                               +
|                               |
+                               +
|                               |
+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
|    Src Hardware Address       |
+                               +
|                               |
+                               +
|                               |
+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
|    EtherType (0x01FF)         |
+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
|        zundoko                |
| (null-terminated string)      |
|                               |
|                               |
|                               |
|                               |
|                               |
|                               |
|                               |
|                               |
+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
|            padding            |
|                               |
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;実装&#34;&gt;実装&lt;/h2&gt;

&lt;p&gt;&lt;a href=&#34;https://github.com/kaitoy/pcap4j&#34;&gt;Pcap4J&lt;/a&gt;を使ってクライアントとサーバを実装した。
書いたのは以下の3つのクラス。(といくつかのインナークラス。)&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/kaitoy/zundoko-protocol/tree/master/src/main/java/com/github/kaitoy/zundoko/protocol/ZundokoPacket.java&#34;&gt;com.github.kaitoy.zundoko.protocol.ZundokoPacket&lt;/a&gt;: Pcap4JがZundokoパケットを解析するのに使うクラス&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/kaitoy/zundoko-protocol/tree/master/src/main/java/com/github/kaitoy/zundoko/protocol/ZundokoServer.java&#34;&gt;com.github.kaitoy.zundoko.protocol.ZundokoServer&lt;/a&gt;: Zundokoサーバ&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/kaitoy/zundoko-protocol/tree/master/src/main/java/com/github/kaitoy/zundoko/protocol/ZundokoClient.java&#34;&gt;com.github.kaitoy.zundoko.protocol.ZundokoClient&lt;/a&gt;: Zundokoクライアント&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;ビルド&#34;&gt;ビルド&lt;/h2&gt;

&lt;p&gt;今だに&lt;a href=&#34;https://maven.apache.org/&#34;&gt;Maven&lt;/a&gt;。&lt;/p&gt;

&lt;p&gt;以下を実行するとビルドできる。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-cmd&#34;&gt;git clone https://github.com/kaitoy/zundoko-protocol.git
cd zundoko-protocol
mvn install
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;サーバ-クライアントの使い方&#34;&gt;サーバ/クライアントの使い方&lt;/h2&gt;

&lt;p&gt;下位レイヤがEthernetなのでネットワークセグメントを超えたZundokoパケットのやり取りはできない。
よってまずは同一ネットワーク内にサーバマシンとクライアントマシンを用意する。
VMware Playerのホストとゲストで可。&lt;/p&gt;

&lt;p&gt;サーバマシンとクライアントマシンには&lt;a href=&#34;http://www.winpcap.org/&#34;&gt;WinPcap&lt;/a&gt;か&lt;a href=&#34;http://www.tcpdump.org/&#34;&gt;libpcap&lt;/a&gt;をインストールしておく。&lt;/p&gt;

&lt;p&gt;依存ライブラリをダウンロードするため、&lt;code&gt;zundoko-protocol\bin\&lt;/code&gt;に&lt;code&gt;cd&lt;/code&gt;して以下のコマンドを実行する。(要Maven。)&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-cmd&#34;&gt;configure.bat
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;サーバを起動するには、&lt;code&gt;zundoko-protocol\bin\&lt;/code&gt;で以下のコマンドを実行する。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-cmd&#34;&gt;run-server.bat
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;起動するとZundokoパケットをやり取りするネットワークインターフェースを聞かれるので、
クライアントとL2レベルでつながっているものを選ぶ。
選んだインターフェースのMacアドレスはクライアントの起動に使うのでメモしておく。&lt;/p&gt;

&lt;p&gt;クライアントを起動するには、&lt;code&gt;zundoko-protocol\bin\&lt;/code&gt;で以下のコマンドを実行する。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-cmd&#34;&gt;run-client.bat &amp;lt;Macアドレス&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;code&gt;&amp;lt;Macアドレス&amp;gt;&lt;/code&gt;にはサーバ起動時にメモしたMacアドレスを入力する。
起動するとZundokoパケットをやり取りするネットワークインターフェースを聞かれるので、
サーバとL2レベルでつながっているものを選ぶ。&lt;/p&gt;

&lt;p&gt;クライアントが起動すると、一秒おきに「ズン」と「ドコ」をランダムに選び、
サーバに送りつつコンソールに表示する。
また、サーバからZundokoパケット受信したらそのzundokoフィールドの値を表示する。&lt;/p&gt;

&lt;h2 id=&#34;実行例&#34;&gt;実行例&lt;/h2&gt;

&lt;p&gt;&lt;div class=&#34;embed video-player&#34; style=&#34;text-align: center&#34;&gt;
  &lt;iframe class=&#34;youtube-player&#34; type=&#34;text/html&#34; width=&#34;320&#34; height=&#34;193&#34; src=&#34;http://www.youtube.com/embed/ad3u4Y86e_I&#34; allowfullscreen frameborder=&#34;0&#34;&gt;
  &lt;/iframe&gt;
&lt;/div&gt;
&lt;/p&gt;
</description>
        </item>
      
    
      
        <item>
          <title>継続的インテグレーションは死んだ</title>
          <link>http://tbd.kaitoy.xyz/2016/02/09/continuous-integration-is-dead/</link>
          <pubDate>Tue, 09 Feb 2016 00:34:41 MST</pubDate>
          <author>Kaito Yamada</author>
          <guid>http://tbd.kaitoy.xyz/2016/02/09/continuous-integration-is-dead/</guid>
          <description>

&lt;p&gt;このエントリでは、Yegor Bugayenkoによる記事、&lt;a href=&#34;http://www.yegor256.com/2014/10/08/continuous-integration-is-dead.html&#34;&gt;Continuous Integration is Dead&lt;/a&gt;を紹介する。
(Yegorから和訳と転載の許可は得た。)
以下はその全文の和訳だが、意訳超訳が混じっているので、もとのニュアンスを知りたければ元記事を読んでもいいし、読まなくてもいい。&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;数日前、「&lt;a href=&#34;http://devops.com/blogs/continuous-integration-doesnt-work/&#34;&gt;なぜ継続的インテグレーションは機能しないのか&lt;/a&gt;」という私の記事が&lt;a href=&#34;http://www.devops.com/&#34;&gt;DevOps.com&lt;/a&gt;に公開された。
それとほぼ同じ日に、Twitterで非常に否定的な批評が送られてきた。&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;継続的インテグレーションが機能しないとはどういうことだ。この人気なすばらしいアイデアが。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;その求めてもない質問への返事をここに書く。&lt;/p&gt;

&lt;p&gt;私はこの分野に関して多少の経験があるが、それに基いた論拠は挙げない。
代わりにロジックだけを頼りにする。&lt;/p&gt;

&lt;p&gt;ところで、私には50以上のオープンソースや営利プロジェクトで5年間Apache Continuum、Hudson、CruiseControl、Jenkinsを利用した経験がある。
さらに、数年前&lt;a href=&#34;http://www.fazend.com/&#34;&gt;fazend.com&lt;/a&gt;(2013年に&lt;a href=&#34;http://www.rultor.com/&#34;&gt;rultor.com&lt;/a&gt;に改名)というホスト型継続的インテグレーションサービスを開発した。
現在&lt;a href=&#34;http://www.travis-ci.org/&#34;&gt;Travis&lt;/a&gt;と&lt;a href=&#34;http://www.appveyor.com/&#34;&gt;AppVeyor&lt;/a&gt;のアクティブユーザでもある。&lt;/p&gt;

&lt;h2 id=&#34;継続的インテグレーションはどう機能すべきか&#34;&gt;継続的インテグレーションはどう機能すべきか&lt;/h2&gt;

&lt;p&gt;考え方はシンプルで明確だ。
&lt;code&gt;master&lt;/code&gt;ブランチ(Subversionなら&lt;code&gt;/trunk&lt;/code&gt;)に新しくコミットをする度に、継続的インテグレーションサーバ(またはサービス)はプロダクト全体のビルドを試みる。
「ビルド」というのはコンパイル、ユニットテスト、統合テスト、品質解析&lt;a href=&#34;http://www.yegor256.com/2014/06/21/casperjs-with-maven.html&#34;&gt;など&lt;/a&gt;を意味する。&lt;/p&gt;

&lt;p&gt;その結果は「成功」か「失敗」だ。
もし成功だったら「ビルドがクリーン」であると言う。
もし失敗だったら、「ビルドが壊れている」と言う。
通常、ビルドが壊れるのは、以前通っていたユニットテストを通らなくするような新しいコードをだれかがコミットしたからだ。&lt;/p&gt;

&lt;p&gt;これは問題の技術的な面だ。
この部分はいつも上手くいく。
まあ、依存が直書きされてるとか、ビルド環境が十分分離されていないとか、ビルドの並列性が完全じゃないとか、そういう問題はあるかもしれないが、この記事はそれらについてではない。
アプリケーションが上手く書かれていてユニットテストが安定しているなら、継続的インテグレーションは簡単だ。
技術的には。&lt;/p&gt;

&lt;p&gt;組織的な面を見てみよう。&lt;/p&gt;

&lt;p&gt;継続的インテグレーションというのは、ビルドを実行するサーバだけを指すのではなく、上手く機能すべき管理的/組織的プロセスだ。
プロセスが上手く機能するとは、Jez Humbleが「&lt;a href=&#34;http://www.amazon.com/gp/product/0321601912/ref=as_li_tl?ie=UTF8&amp;amp;camp=1789&amp;amp;creative=390957&amp;amp;creativeASIN=0321601912&amp;amp;linkCode=as2&amp;amp;tag=yegor256com-20&amp;amp;linkId=GKWBKGZUJGJLFMHE&#34;&gt;継続的デリバリー: ビルド、テスト、デプロイの自動化による確実なソフトウェアリリース&lt;/a&gt;」の55ページで言っていることそのものを意味する。&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;もしビルドが失敗したら、開発チームは何をやっていたとしてもそれを中断して、そのビルドの問題を速やかに直す。これが重要だ。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;これが上手くいかず、上手くできないことだ。&lt;/p&gt;

&lt;h2 id=&#34;誰がこれを必要としているのか&#34;&gt;誰がこれを必要としているのか&lt;/h2&gt;

&lt;p&gt;既に述べた通り、継続的インテグレーションとは、開発チーム全体を止めて壊れたビルドを修正させることだ。
繰り返すが、ビルドが壊れたら直ちに、それを修正し、ビルドを安定した状態に戻すコミットを入れることに全員が集中すべきだ。&lt;/p&gt;

&lt;p&gt;ここでひとつ疑問が生じる。誰が、活動中のチーム内の誰がこれを必要としているのだろうか?&lt;/p&gt;

&lt;p&gt;一刻も早く新しい機能をリリースしたいプロダクトオーナ?
または、締め切りに責任を持つ&lt;a href=&#34;http://www.yegor256.com/2015/09/22/micromanagement.html&#34;&gt;プロジェクトマネージャ&lt;/a&gt;かもしれない。
もしくは、他の誰かが作りこんだバグをプレッシャーを受けながら修正すること嫌うプログラマかもしれない。&lt;/p&gt;

&lt;p&gt;誰がこの継続的インテグレーションを好み、誰が必要としているのか?&lt;/p&gt;

&lt;p&gt;誰でもない。&lt;/p&gt;

&lt;h2 id=&#34;実際に何が起こるのか&#34;&gt;実際に何が起こるのか&lt;/h2&gt;

&lt;p&gt;教えよう。
私は何度も見たことがある。
シナリオはいつも同じだ。
継続的インテグレーションのビルドステータスは単に無視されるようになる。
ビルドがクリーンか壊れているかにかかわらず。
そして以前のやり方が継続される。&lt;/p&gt;

&lt;p&gt;Jez Humbleが推奨するように開発を止めて問題に対応したりしない。&lt;/p&gt;

&lt;p&gt;代わりに、継続的インテグレーションサーバから来る情報を無視する。&lt;/p&gt;

&lt;p&gt;しばらくして、次の日かもしれないし月曜日かもしれないが、空いた時間を探してビルドの修正に取り組む。
これは単に、ダッシュボードの赤いボタンが嫌で緑に変えたいからだ。&lt;/p&gt;

&lt;h2 id=&#34;規律についてはどうか&#34;&gt;規律についてはどうか&lt;/h2&gt;

&lt;p&gt;そう、これには別の見方もある。
チームに規律を徹底させることもできる。
ビルドは常にクリーンで、壊した人は何らかの&lt;a href=&#34;http://www.yegor256.com/2016/01/05/how-to-punish-employees.html&#34;&gt;罰&lt;/a&gt;を受けるという厳格なルールを設けることができる。&lt;/p&gt;

&lt;p&gt;これを試すとなると、恐怖駆動型開発を実施することになる。
プログラマは、ビルドを失敗させたら少なくとも&lt;a href=&#34;http://programmers.stackexchange.com/questions/79041&#34;&gt;謝罪&lt;/a&gt;しなければならなくなるため、リポジトリへのコミットを恐れるようになる。&lt;/p&gt;

&lt;p&gt;この場合の厳格な規律(私は大好きだが)は、単に状況を悪化させる。
開発プロセス全体が遅くなり、プログラマはビルドを壊さないように自身のコードをできるだけ長い間手元に保持する。
いざコミットするとなった時、変更は巨大になっていて、マージは非常に難しいか、時に不可能になる。&lt;/p&gt;

&lt;p&gt;結果、プログラマが書いた多くのコードがコミットされること無く捨てられる。
あの恐怖因子のせいだ。&lt;/p&gt;

&lt;h2 id=&#34;ok-解決策は&#34;&gt;OK。解決策は?&lt;/h2&gt;

&lt;p&gt;それについては以前書いた。
「&lt;a href=&#34;http://www.yegor256.com/2014/07/21/read-only-master-branch.html&#34;&gt;読み取り専用マスタブランチ&lt;/a&gt;」だ。&lt;/p&gt;

&lt;p&gt;これは単純で、&lt;code&gt;master&lt;/code&gt;へのマージを一切禁止し、誰でも実行できるスクリプトを作る。
このスクリプトがマージ、テスト、コミットを実行する。
このスクリプトには例外が全く無い。
どんなブランチであっても、たった一つのユニットテストに失敗しただけでも、ブランチ全体が却下される。&lt;/p&gt;

&lt;p&gt;言い換えると、&lt;code&gt;master&lt;/code&gt;にそのコードが入る前に赤いフラグを揚げる。&lt;/p&gt;

&lt;p&gt;これで全ての問題が解決する。&lt;/p&gt;

&lt;p&gt;第一に、ビルドは常にクリーンだ。
ビルドをクリーンに保たないコードは誰もコミットできないので、単純に言ってビルドを壊すことはできない。&lt;/p&gt;

&lt;p&gt;第二に、何かを壊すという恐怖が無い。
単に技術的に壊せないのだ。
マージスクリプトから却下されることしかできない。
その場合、エラーを修正してスクリプトに再挑戦を命じる。
誰もこのやりとりを見ていないので、謝罪する必要が無い。
恐怖因子は消えた。&lt;/p&gt;

&lt;p&gt;ところで、君のプロジェクトで&lt;a href=&#34;http://www.rultor.com/&#34;&gt;rultor.com&lt;/a&gt;を利用して、この「&lt;a href=&#34;http://www.yegor256.com/2014/07/21/read-only-master-branch.html&#34;&gt;読み取り専用マスタブランチ&lt;/a&gt;」原則を徹底してみてくれ。&lt;/p&gt;

&lt;p&gt;&lt;div class=&#34;embed video-player&#34; style=&#34;text-align: center&#34;&gt;
  &lt;iframe class=&#34;youtube-player&#34; type=&#34;text/html&#34; width=&#34;320&#34; height=&#34;193&#34; src=&#34;http://www.youtube.com/embed/3IXk5yEJMIs&#34; allowfullscreen frameborder=&#34;0&#34;&gt;
  &lt;/iframe&gt;
&lt;/div&gt;
&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;以上がYegorの記事。&lt;/p&gt;

&lt;p&gt;CIは死んだというセンセーショナルなタイトルではあるが、&lt;a href=&#34;https://ja.wikipedia.org/wiki/%E7%A5%9E%E3%81%AF%E6%AD%BB%E3%82%93%E3%81%A0&#34;&gt;ニーチェ&lt;/a&gt;とは違って神なるCIを否定しているわけではない。
CIって意外と上手くいかないけど、こうすれば改善できるよという主旨の記事だ。&lt;/p&gt;

&lt;p&gt;Yegorが指摘している、ビルドステータスが無視されるようになるという一つ目の問題は、実例を多く見たことがあるわけではないが確かになんだかよく起こりそうな話だ。
そういえば私もPcap4JのTravisでのビルドエラーをもう数か月無視している。
まあこれはTravis側の問題が原因で、回避策を入れるのが気が進まないだけなんだけど。&lt;/p&gt;

&lt;p&gt;Yegorのやり方は、&lt;a href=&#34;https://gist.github.com/juno/3112343&#34;&gt;GitHub Flow&lt;/a&gt;が&lt;code&gt;master&lt;/code&gt;は常にデプロイ可能としているのを、より厳密に守るように仕組化する感じであろうか。&lt;/p&gt;

&lt;p&gt;GitHub Flowを世に広めたScott Chaconによれば、&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;テストされていなかったり、ビルドを破壊するようなコードをmasterにpushした場合には、開発チーム間におけるソーシャルな取り決めを破ることになり、ちょっと気まずい思いをすることになる&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;とのことで、これはまさにYegorが恐怖因子と指摘した二つ目の問題である。
慣れない内のリポジトリへのコミットの緊張感や、CIサーバからエラー通知が来た時の焦燥感は、多くの人のストレスになっているんじゃないだろうか。
&lt;code&gt;master&lt;/code&gt;の更新をスクリプトに任せてしまえば、それでなおビルドが壊れたとしてもスクリプトのせいにできるので気が楽だろう。&lt;/p&gt;

&lt;p&gt;実装が簡単そうなアイデアでもあるので、いつかCIを実装する日まで覚えておきたい。&lt;/p&gt;
</description>
        </item>
      
    
      
        <item>
          <title>Pcap4J Meets Windows Containers</title>
          <link>http://tbd.kaitoy.xyz/2016/01/22/pcap4j-meets-windows-containers/</link>
          <pubDate>Fri, 22 Jan 2016 17:46:43 MST</pubDate>
          <author>Kaito Yamada</author>
          <guid>http://tbd.kaitoy.xyz/2016/01/22/pcap4j-meets-windows-containers/</guid>
          <description>

&lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://msdn.microsoft.com/en-us/virtualization/windowscontainers/about/about_overview&#34;&gt;Windows Containers&lt;/a&gt;&lt;/strong&gt; で &lt;strong&gt;&lt;a href=&#34;https://github.com/kaitoy/pcap4j&#34;&gt;Pcap4J&lt;/a&gt;&lt;/strong&gt; のコンテナをビルドしてみた話。&lt;/p&gt;

&lt;h2 id=&#34;windows-containersとは&#34;&gt;Windows Containersとは&lt;/h2&gt;

&lt;p&gt;Windows Containersは、Microsoftが&lt;a href=&#34;https://www.docker.com/company&#34;&gt;Docker, Inc&lt;/a&gt;と提携して開発している&lt;a href=&#34;http://www.sophia-it.com/content/%E3%82%B3%E3%83%B3%E3%83%86%E3%83%8A%E6%8A%80%E8%A1%93&#34;&gt;コンテナ技術&lt;/a&gt;で、Windows版&lt;a href=&#34;https://www.docker.com/&#34;&gt;Docker&lt;/a&gt;とも言われる機能。
今年リリースされる &lt;strong&gt;Windows Server 2016&lt;/strong&gt; に実装される予定で、その3つめのテクニカルプレビューである &lt;strong&gt;Windows Server 2016 Technical Preview 3&lt;/strong&gt; (2015/8/19公開)から評価できるようになった。&lt;/p&gt;

&lt;p&gt;Windows Containersには次の二種類がある。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Windows Server Containers&lt;/p&gt;

&lt;p&gt;プロセスと名前空間の分離を実現する機能で、これによるコンテナはカーネルをホストと共有する。
つまり本家Dockerに近い形の機能。&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Hyper-V Containers&lt;/p&gt;

&lt;p&gt;それぞれのコンテナを軽量化されたHyper-Vの仮想マシンっぽいものの上で動かす機能。
このコンテナの実行にはHyper-Vが必要。
Windows Server Containersよりコンテナ間の分離性が高く、カーネルの共有もしないが、そもそもそれってコンテナなの?&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;どちらも同じようなインターフェースで操作でき、このインターフェースには&lt;a href=&#34;https://msdn.microsoft.com/en-us/virtualization/windowscontainers/reference/ps_docker_comparison&#34;&gt;PowershellのコマンドレットとDockerコマンドの二種類がある&lt;/a&gt;。&lt;/p&gt;

&lt;p&gt;より詳しくは、&lt;a href=&#34;https://msdn.microsoft.com/en-us/virtualization/windowscontainers/about/about_overview&#34;&gt;Microsoftによる解説&lt;/a&gt;や&lt;a href=&#34;http://www.atmarkit.co.jp/ait/articles/1512/11/news022.html&#34;&gt;@ITのこの記事&lt;/a&gt;がわかりやすい。
また、&lt;a href=&#34;http://qiita.com/Arturias/items/3e82de8328067d0e03a3&#34;&gt;Qiitaのこの記事&lt;/a&gt;がDockerとWindows Server Containersのアーキテクチャを詳細に説明していて面白い。&lt;/p&gt;

&lt;h2 id=&#34;windows-containersセットアップ&#34;&gt;Windows Containersセットアップ&lt;/h2&gt;

&lt;p&gt;まず、Windows 7 x64のノートPCにVMware Player 7.1.0を入れてWindows 10 x64用のVM(CPU2つとメモリ2.5GB)を作り、そこに2015/11/19に公開された &lt;strong&gt;Windows Server 2016 Technical Preview 4&lt;/strong&gt; をインストール。
コマンドでいろいろ設定するの慣れていないのでGUI(Desktop Experience)付きで。
(リモートデスクトップ使えばよかったのかもしれないけど。)
ロケールは英語以外は問題が起きそうなので英語で。&lt;/p&gt;

&lt;p&gt;このVMに、&lt;a href=&#34;https://msdn.microsoft.com/en-us/virtualization/windowscontainers/quick_start/inplace_setup&#34;&gt;Microsoftのセットアップガイド&lt;/a&gt;と&lt;a href=&#34;http://www.atmarkit.co.jp/ait/articles/1512/14/news006.html&#34;&gt;@ITの記事&lt;/a&gt;を参照しながらWindows Containersをセットアップ。&lt;/p&gt;

&lt;p&gt;後者の記事によると、Hyper-V ContainersをVM上にセットアップするには、&lt;a href=&#34;https://msdn.microsoft.com/en-us/virtualization/hyperv_on_windows/user_guide/nesting&#34;&gt;Nested Virtualization&lt;/a&gt;というHyper-VのVMの上でHyper-Vを動かす機能を有効にしたホスト上のHyper-V VMを使わないといけないようなので、Windows Server Containersの方を試すことに。&lt;/p&gt;

&lt;p&gt;Windows Server Containersをセットアップする手順は以下。&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;VM上でコマンドプロンプトを開いて &lt;code&gt;powershell start-process powershell -Verb runas&lt;/code&gt; を実行。&lt;/li&gt;
&lt;li&gt;青いパワーシェルウィンドウが開くのでそこで &lt;code&gt;wget -uri https://aka.ms/tp4/Install-ContainerHost -OutFile C:\Install-ContainerHost.ps1&lt;/code&gt; を実行。&lt;code&gt;Install-ContainerHost.ps1&lt;/code&gt; というスクリプトがダウンロードされる。&lt;/li&gt;
&lt;li&gt;青いパワーシェルウィンドウで &lt;code&gt;C:\Install-ContainerHost.ps1&lt;/code&gt; を実行するとWindows Server Containersのインストールが始まる。&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;img src=&#34;http://tbd.kaitoy.xyz/images/pcap4j-meets-windows-containers/install.png&#34; alt=&#34;install.png&#34; /&gt;
&lt;/p&gt;

&lt;p&gt;&lt;br&gt;&lt;/p&gt;

&lt;p&gt;途中再起動が一回あって、ログインしたらインストール処理が再開した。
全部で2時間以上かかった。&lt;/p&gt;

&lt;p&gt;仮想Ethernetスイッチ接続の追加に失敗したというエラーが出たけどなんなんだろう。
&lt;code&gt;ipconfig&lt;/code&gt; の出力によると &lt;code&gt;vEthernet&lt;/code&gt; というDockerの&lt;a href=&#34;http://tbd.kaitoy.xyz/2015/07/25/how-to-capture-packets-on-a-local-network-with-pcap4j-container/#docker-network&#34;&gt;virtual Ethernet bridge&lt;/a&gt;にあたるものはちゃんと作られているみたいなんだけど。&lt;/p&gt;

&lt;h2 id=&#34;windows-server-containers味見&#34;&gt;Windows Server Containers味見&lt;/h2&gt;

&lt;p&gt;コマンドプロンプトで &lt;code&gt;docker images&lt;/code&gt; を実行すると、既に &lt;code&gt;windowsservercore&lt;/code&gt; というコンテナイメージが入っていることがわかる。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-cmd&#34;&gt;C:\Users\Administrator&amp;gt;docker images
REPOSITORY          TAG                 IMAGE ID            CREATED             VIRTUAL SIZE
windowsservercore   10.0.10586.0        6801d964fda5        11 weeks ago        0 B
windowsservercore   latest              6801d964fda5        11 weeks ago        0 B
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;code&gt;docker run -it windowsservercore cmd&lt;/code&gt; を実行すると &lt;code&gt;windowsservercore&lt;/code&gt; からコンテナを起動してその上でコマンドプロンプトを起動できる。
コンテナの起動は非常に遅い。30秒以上かかる。これは今の時点での&lt;a href=&#34;https://msdn.microsoft.com/virtualization/windowscontainers/about/work_in_progress#windows-containers-start-slowly&#34;&gt;制限&lt;/a&gt;らしい。&lt;/p&gt;

&lt;p&gt;&lt;code&gt;docker login --help&lt;/code&gt; するとわかるが、コンテナイメージのリポジトリは &lt;code&gt;https://registry-win-tp3.docker.io/v1/&lt;/code&gt; という仮っぽいサーバにあって、&lt;code&gt;docker search *&lt;/code&gt; を実行するとそこに登録されたイメージのリストが見れる。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-cmd&#34;&gt;C:\Users\Administrator&amp;gt;docker search *
NAME                 DESCRIPTION                                     STARS     OFFICIAL   AUTOMATED
microsoft/aspnet     ASP.NET 5 framework installed in a Windows...   1         [OK]       [OK]
microsoft/django     Django installed in a Windows Server Core ...   1                    [OK]
microsoft/dotnet35   .NET 3.5 Runtime installed in a Windows Se...   1         [OK]       [OK]
microsoft/golang     Go Programming Language installed in a Win...   1                    [OK]
microsoft/httpd      Apache httpd installed in a Windows Server...   1                    [OK]
microsoft/iis        Internet Information Services (IIS) instal...   1         [OK]       [OK]
microsoft/mongodb    MongoDB installed in a Windows Server Core...   1                    [OK]
microsoft/mysql      MySQL installed in a Windows Server Core b...   1                    [OK]
microsoft/nginx      Nginx installed in a Windows Server Core b...   1                    [OK]
microsoft/node       Node installed in a Windows Server Core ba...   1                    [OK]
microsoft/php        PHP running on Internet Information Servic...   1                    [OK]
microsoft/python     Python installed in a Windows Server Core ...   1                    [OK]
microsoft/rails      Ruby on Rails installed in a Windows Serve...   1                    [OK]
microsoft/redis      Redis installed in a Windows Server Core b...   1                    [OK]
microsoft/ruby       Ruby installed in a Windows Server Core ba...   1                    [OK]
microsoft/sqlite     SQLite installed in a Windows Server Core ...   1                    [OK]
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;これらはちゃんと &lt;code&gt;docker pull&lt;/code&gt; して使える。
けど多分 &lt;code&gt;docker push&lt;/code&gt; はできない。&lt;/p&gt;

&lt;h2 id=&#34;pcap4j-on-windows-container&#34;&gt;Pcap4J on Windows Container&lt;/h2&gt;

&lt;p&gt;結論から言うと、以下の &lt;code&gt;Dockerfile&lt;/code&gt; を書いて &lt;code&gt;docker build&lt;/code&gt; してPcap4Jをコンテナ上でビルドするところまではできたが、それを実行してもNIFが全く検出できず、よってパケットキャプチャも実行できなかった。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-text&#34;&gt;#
# Dockerfile for Pcap4J on Windows
#

FROM windowsservercore:latest
MAINTAINER Kaito Yamada &amp;lt;kaitoy@pcap4j.org&amp;gt;

# Install Chocolatey.
RUN mkdir C:\pcap4j
WORKDIR /pcap4j
ADD https://chocolatey.org/install.ps1 install.ps1
RUN powershell .\install.ps1

# Install dependencies.
RUN choco install -y nmap maven git jdk7

# Build Pcap4J.
RUN git clone git://github.com/kaitoy/pcap4j.git
WORKDIR pcap4j
RUN powershell -NoProfile -ExecutionPolicy Bypass -Command &amp;quot;mvn &#39;-Dmaven.repo.local=C:\pcap4j\repo&#39; -P distribution-assembly install 2&amp;gt;&amp;amp;1 | add-content -Path build.log -pass

# Collect libraries.
RUN mkdir bin &amp;amp;&amp;amp; \
    cd pcap4j-packetfactory-static &amp;amp;&amp;amp; \
    mvn -Dmaven.repo.local=C:\pcap4j\repo -DoutputDirectory=..\bin -Dmdep.stripVersion=true -DincludeScope=compile dependency:copy-dependencies &amp;amp;&amp;amp; \
    mvn -Dmaven.repo.local=C:\pcap4j\repo -DoutputDirectory=..\bin -Dmdep.stripVersion=true -DincludeGroupIds=ch.qos.logback dependency:copy-dependencies &amp;amp;&amp;amp; \
    cd ../pcap4j-distribution &amp;amp;&amp;amp; \
    mvn -Dmaven.repo.local=C:\pcap4j\repo -DoutputDirectory=..\bin -Dmdep.stripVersion=true -DincludeArtifactIds=pcap4j-packetfactory-static,pcap4j-sample dependency:copy-dependencies

# Generate sample script. (C:\pcap4j\pcap4j\bin\capture.bat)
RUN echo @echo off &amp;gt; bin\capture.bat &amp;amp;&amp;amp; \
    echo &amp;quot;%JAVA_HOME%\bin\java&amp;quot; -cp C:\pcap4j\pcap4j\bin\pcap4j-core.jar;C:\pcap4j\pcap4j\bin\pcap4j-packetfactory-static.jar;C:\pcap4j\pcap4j\bin\pcap4j-sample.jar;C:\pcap4j\pcap4j\bin\jna.jar;C:\pcap4j\pcap4j\bin\slf4j-api.jar;C:\pcap4j\pcap4j\bin\logback-classic.jar;C:\pcap4j\pcap4j\bin\logback-core.jar org.pcap4j.sample.GetNextPacketEx &amp;gt;&amp;gt; bin\capture.bat
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;この &lt;code&gt;Dockerfile&lt;/code&gt; でやっていることはだいたい以下。&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;a href=&#34;https://chocolatey.org/&#34;&gt;Chocolatey&lt;/a&gt;をインストール。&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://nmap.org/&#34;&gt;Nmap&lt;/a&gt;と&lt;a href=&#34;https://maven.apache.org/&#34;&gt;Maven&lt;/a&gt;と&lt;a href=&#34;https://git-scm.com/&#34;&gt;Git&lt;/a&gt;とJDK7をChocolateyでインストール。&lt;/li&gt;
&lt;li&gt;Pcap4Jのソースを &lt;code&gt;git clone&lt;/code&gt; でダウンロード。&lt;/li&gt;
&lt;li&gt;MavenでPcap4Jのビルドを実行。&lt;/li&gt;
&lt;li&gt;Pcap4Jのサンプルクラスを実行するスクリプトを生成。&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;2でNmapは&lt;a href=&#34;http://www.winpcap.org/&#34;&gt;WinPcap&lt;/a&gt;の代わりに入れている。
GUI無しの環境でWinPcapをChocolateyで入れようとしても、エラーが発生したりしなかったりして、しかもどちらにせよ正常に入らない。
これはWinPcapのインストーラがサイレントインストールをサポートしていないから。
Nmapはサイレントインストールできて、インストール処理中にWinPcapを入れてくれるのでありがたい。&lt;/p&gt;

&lt;p&gt;ビルドしてみると、各ステップの実行(多分レイヤの作成)がすごく遅い。
&lt;code&gt;RUN choco install -y nmap maven git jdk7&lt;/code&gt; の後、次のコマンド実行まで30分くらい固まった。&lt;/p&gt;

&lt;p&gt;また、&lt;code&gt;Dockerfile&lt;/code&gt; を書いていて以下のバグに悩まされた。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;WORKDIR&lt;/code&gt; や &lt;code&gt;ENV&lt;/code&gt; で環境変数が展開されない。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-cmd&#34;&gt;  ENV hoge %tmp%
  RUN echo %hoge%
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;とすると &lt;code&gt;%tmp%&lt;/code&gt; と表示される。&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;code&gt;WORKDIR&lt;/code&gt; や &lt;code&gt;ENV&lt;/code&gt; や &lt;code&gt;COPY&lt;/code&gt; でパスの区切りは &lt;code&gt;\&lt;/code&gt; 一つだと消えちゃうので &lt;code&gt;\\&lt;/code&gt; か &lt;code&gt;/&lt;/code&gt; を使わないといけない。&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;code&gt;WORKDIR&lt;/code&gt; や &lt;code&gt;COPY&lt;/code&gt; のコンテナ内のパスに絶対パスを指定したい場合、&lt;code&gt;C:\hoge&lt;/code&gt;、&lt;code&gt;C:/hoge&lt;/code&gt;、&lt;code&gt;C:\\hoge&lt;/code&gt;、いずれもダメ。
以下の様なエラーが出る。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-text&#34;&gt;  GetFileAttributesEx \\?\Volume{67df3c84-a0ef-11e5-9a63-000c2976fbc3}\C:: The filename, directory name, or volume label syntax is incorrect.
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;UNIX式に &lt;code&gt;/hoge&lt;/code&gt; とするといける。C以外のドライブを指定したいときはどうするんだろう。&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;コンテナ内で &lt;code&gt;C:\&lt;/code&gt; 直下に &lt;code&gt;.&lt;/code&gt; で始まる名前のフォルダ作ると次のステップで消えてる。
&lt;code&gt;.&lt;/code&gt; で始まる名前のファイルは &lt;code&gt;C:\&lt;/code&gt; 直下じゃなくても次のステップで消えてる。
Mavenのリポジトリがデフォルトで &lt;code&gt;C:\.m2\&lt;/code&gt; 以下にできるのではまる。&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;これらのバグを乗り越えて頑張って &lt;code&gt;Dockerfile&lt;/code&gt; 書いたのに、NIFの検出すらできなかったという哀しい結果。
&lt;code&gt;pcap_lookupdev&lt;/code&gt; が以下のエラーを吐いて &lt;code&gt;NULL&lt;/code&gt; を返してきてたので、なんとなくコンテナのNIFに長すぎる名前がついていて検出失敗しているんじゃないかと。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-text&#34;&gt;PacketGetAdapterNames: The data area passed to a system call is too small. (122)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;因みにコンテナ内から見えるNIFは一つで、以下の構成。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-text&#34;&gt;Ethernet adapter vEthernet (Virtual Switch-d206475ce13256766b9a16383540a740fe31da8d20499349fe98693393a8490f-0):

   Connection-specific DNS Suffix  . : localdomain
   Link-local IPv6 Address . . . . . : fe80::4086:d11e:5e6:28fe%26
   IPv4 Address. . . . . . . . . . . : 172.16.0.2
   Subnet Mask . . . . . . . . . . . : 255.240.0.0
   Default Gateway . . . . . . . . . : 172.16.0.1
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;コンテナ内から &lt;code&gt;www.google.com&lt;/code&gt; とかにping届いたので、このNIFはちゃんと働いていはずなんだけどPcap4Jから見えない。&lt;/p&gt;

&lt;p&gt;&lt;br&gt;
&lt;br&gt;&lt;/p&gt;

&lt;p&gt;後日上記 &lt;code&gt;Dockerfile&lt;/code&gt; でビルドしてみたら、&lt;code&gt;RUN powershell .\install.ps1&lt;/code&gt; で以下のエラーが出るようになった。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-text&#34;&gt;The request was aborted: Could not create SSL/TLS secure channel.
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;install.ps1の中でChocolateyのインストーラをHTTPSで取ってこようとしてエラーになっている模様。
Windows Containersの&lt;a href=&#34;https://msdn.microsoft.com/en-us/virtualization/windowscontainers/about/work_in_progress#https-and-tls-are-not-supported&#34;&gt;ドキュメント&lt;/a&gt;や&lt;a href=&#34;https://social.msdn.microsoft.com/Forums/en-US/c0d93dda-37b7-4a2c-9a78-55e4ba0b88f5/https-support-in-windowsservercore-image?forum=windowscontainers&#34;&gt;フォーラム&lt;/a&gt;にHTTPSが使えないという制限が載っているけどこのせい?
ちょっと前にやったときは同じ &lt;code&gt;Dockerfile&lt;/code&gt; でビルドできたはずなんだけど。&lt;/p&gt;

&lt;p&gt;試しに以下の処理を挟んでChocolateyのインストーラをHTTPで取ってくるようにしたらChocolateyのインストールまではできた。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-cmd&#34;&gt;RUN powershell $(Get-Content install.ps1) -replace \&amp;quot;https\&amp;quot;,\&amp;quot;http\&amp;quot; &amp;gt; install.mod.ps1
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;けど &lt;code&gt;choco install&lt;/code&gt; がHTTPS使うので結局駄目だった。&lt;/p&gt;

&lt;p&gt;もう面倒なのでHTTPSの制限がとれるのをまとう。&lt;/p&gt;
</description>
        </item>
      
    
      
        <item>
          <title>Pcap4J with Four Native Libraries on Windows 10</title>
          <link>http://tbd.kaitoy.xyz/2016/01/12/pcap4j-with-four-native-libraries-on-windows10/</link>
          <pubDate>Tue, 12 Jan 2016 08:43:30 MST</pubDate>
          <author>Kaito Yamada</author>
          <guid>http://tbd.kaitoy.xyz/2016/01/12/pcap4j-with-four-native-libraries-on-windows10/</guid>
          <description>

&lt;p&gt;I did some basic tests for &lt;strong&gt;&lt;a href=&#34;https://github.com/kaitoy/pcap4j&#34;&gt;Pcap4J&lt;/a&gt;&lt;/strong&gt; 1.6.2 on Windows 10 Pro on &lt;a href=&#34;https://www.vmware.com/products/player&#34;&gt;VMware Player&lt;/a&gt; 7.1.0 using the following native packet capture libraries:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;&lt;a href=&#34;http://www.winpcap.org/&#34;&gt;Official WinPcap&lt;/a&gt;&lt;/strong&gt; 4.1.3&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;&lt;a href=&#34;http://sourceforge.net/projects/winpcap413-176/&#34;&gt;Unofficial WinPcap based on libpcap 1.7.4&lt;/a&gt;&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;&lt;a href=&#34;http://www.win10pcap.org/&#34;&gt;Win10Pcap&lt;/a&gt;&lt;/strong&gt; 10.2&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;&lt;a href=&#34;https://github.com/nmap/npcap&#34;&gt;Npcap&lt;/a&gt;&lt;/strong&gt; 0.0.5&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;This article explains each of the above libraries and tells the test results.&lt;/p&gt;

&lt;h2 id=&#34;official-winpcap&#34;&gt;Official WinPcap&lt;/h2&gt;

&lt;p&gt;WinPcap is the most common native packet capture library developed based on &lt;a href=&#34;http://www.tcpdump.org/&#34;&gt;&lt;strong&gt;libpcap&lt;/strong&gt;&lt;/a&gt;.
(WinPcap 4.1.3 is based on libpcap 1.0.0.)
It&amp;rsquo;s famous as a component of the de facto standard packet capture tool &lt;a href=&#34;https://www.wireshark.org/&#34;&gt;&lt;strong&gt;Wireshark&lt;/strong&gt;&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;WinPcap consists of &lt;strong&gt;NPF driver&lt;/strong&gt;, &lt;strong&gt;wpcap.dll&lt;/strong&gt;, and &lt;strong&gt;Packet.dll&lt;/strong&gt;.
The structure is described in the &lt;a href=&#34;http://www.winpcap.org/docs/docs_412/html/group__NPF.html&#34;&gt;WinPcap manual&lt;/a&gt; as below:&lt;/p&gt;

&lt;p&gt;&lt;img alt=&#34;NPF&#34; src=&#34;http://www.winpcap.org/docs/docs_412/html/npf-npf.gif&#34; style=&#34;margin: 0px auto; display: block;&#34;&gt;&lt;/p&gt;

&lt;p&gt;wpcap.dll is Windows version of libpcap.so. It uses Packet Driver API implemented in Packet.dll.
Packet.dll talks with the NPF driver.
wpcap.dll and Packet.dll are installed in &lt;code&gt;C:\Windows\System32\&lt;/code&gt; (64 bit binaries) and &lt;code&gt;C:\Windows\SysWOW64\&lt;/code&gt; (32 bit binaries).&lt;/p&gt;

&lt;p&gt;WinPcap worked without any problems in my tests.&lt;/p&gt;

&lt;h2 id=&#34;winpcap-based-on-libpcap-1-7-4&#34;&gt;WinPcap based on libpcap 1.7.4&lt;/h2&gt;

&lt;p&gt;This is an unofficial version of WinPcap which was built on libpcap 1.7.4.
This doesn&amp;rsquo;t include NPF driver and doesn&amp;rsquo;t update Packet.dll.
These two components need to be installed from the official WinPcap 4.1.3.&lt;/p&gt;

&lt;p&gt;This worked well but &lt;a href=&#34;https://github.com/kaitoy/pcap4j/issues/52&#34;&gt;one moderate problem&lt;/a&gt;.&lt;/p&gt;

&lt;h2 id=&#34;win10pcap&#34;&gt;Win10Pcap&lt;/h2&gt;

&lt;p&gt;Win10Pcap is a WinPcap-based packet capture library developed by &lt;a href=&#34;http://dnobori.cs.tsukuba.ac.jp/en/&#34;&gt;Daiyuu Nobori&lt;/a&gt;.
This includes its own NPF driver and Packet.dll.
The wpcap.dll Win10Pcap installs is exactly the same as one of the official WinPcap 4.1.3.&lt;/p&gt;

&lt;p&gt;The difference between the original WinPcap and Win10Pcap is &lt;a href=&#34;http://www.ndis.com/&#34;&gt;&lt;strong&gt;NDIS&lt;/strong&gt;&lt;/a&gt; (Network Driver Interface Specification) version.
Win10Pcap is based on NDIS 6.x while WinPcap is based on 5.x.&lt;/p&gt;

&lt;p&gt;NDIS version history is as follows:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;NDIS 2.0: MS-DOS, Windows for Workgroups 3.1&lt;/li&gt;
&lt;li&gt;NDIS 3.0: Windows for Workgroups 3.11, NT 3.5&lt;/li&gt;
&lt;li&gt;NDIS 3.1: Windows 95&lt;/li&gt;
&lt;li&gt;NDIS 4.0: Windows 95 OSR2, NT 4.0&lt;/li&gt;
&lt;li&gt;NDIS 4.1: Windows 98, NT 4.0 SP3&lt;/li&gt;
&lt;li&gt;NDIS 5.0: Windows 98 SE, Me, 2000&lt;/li&gt;
&lt;li&gt;NDIS 5.1: Windows XP&lt;/li&gt;
&lt;li&gt;NDIS 5.2: Windows Server 2003&lt;/li&gt;
&lt;li&gt;NDIS 6.0: Windows Vista&lt;/li&gt;
&lt;li&gt;NDIS 6.1: Windows Vista SP1, Server 2008&lt;/li&gt;
&lt;li&gt;NDIS 6.2: Windows 7, Server 2008 R2&lt;/li&gt;
&lt;li&gt;NDIS 6.3: Windows 8, Server 2012&lt;/li&gt;
&lt;li&gt;NDIS 6.4: Windows 8.1, Server 2012 R2&lt;/li&gt;
&lt;li&gt;NDIS 6.5: Windows 10, Server 2016&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Although NDIS 6.x is backward-compatible with 5.x and WinPcap can run on Vista and newer ones, it&amp;rsquo;s expected Win10Pcap is faster than WinPcap because the newer NDIS is more efficient than older versions.&lt;/p&gt;

&lt;p&gt;Win10Pcap worked mostly fine in my tests, but it didn&amp;rsquo;t detect MAC addresses and IPv6 addresses on devices.&lt;/p&gt;

&lt;h2 id=&#34;npcap&#34;&gt;Npcap&lt;/h2&gt;

&lt;p&gt;Npcap is another NDIS 6.x based version of WinPcap developed by &lt;a href=&#34;http://www.veotax.com/&#34;&gt;Yang Luo&lt;/a&gt; for &lt;a href=&#34;https://nmap.org/&#34;&gt;Nmap&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Npcap has a special functionality that allows to capture/send loopback packets.
It creates an adapter &lt;strong&gt;&amp;ldquo;Npcap Loopback Adapter&amp;rdquo;&lt;/strong&gt; for the functionality during its installation.
This adapter can be used in the same way as other normal adapters.&lt;/p&gt;

&lt;p&gt;Npcap provides its own NPF driver and Packet.dll but wpcap.dll is the one pulled from the official WinPcap 4.1.3.&lt;/p&gt;

&lt;p&gt;I installed Npcap with &lt;strong&gt;&amp;ldquo;WinPcap Compatible Mode&amp;rdquo;&lt;/strong&gt; ON for my tests.
It perfectly worked including MAC/IPv6 addresses detection.&lt;/p&gt;
</description>
        </item>
      
    
      
        <item>
          <title>ソフトウェアアーキテクトは何をするのか?</title>
          <link>http://tbd.kaitoy.xyz/2016/01/11/who-is-software-architect/</link>
          <pubDate>Mon, 11 Jan 2016 14:41:29 MST</pubDate>
          <author>Kaito Yamada</author>
          <guid>http://tbd.kaitoy.xyz/2016/01/11/who-is-software-architect/</guid>
          <description>

&lt;p&gt;このエントリでは、Yegor Bugayenkoによる記事、&lt;a href=&#34;http://www.yegor256.com/2014/10/12/who-is-software-architect.html&#34;&gt;What Does a Software Architect Do?&lt;/a&gt;を紹介する。
(Yegorから和訳と転載の許可は得た。)
以下はその全文の和訳だが、意訳超訳が混じっているので、もとのニュアンスを知りたければ元記事を読んでもいいし、読まなくてもいい。&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;君のプロジェクトにはソフトウェアアーキテクトが居るだろうか?
必要だと思う?&lt;/p&gt;

&lt;p&gt;まあ、ほとんどの&lt;a href=&#34;http://www.yegor256.com/2015/11/21/ringelmann-effect-vs-agile.html&#34;&gt;アジャイルチーム&lt;/a&gt;はそのような役割を明確には定義せず、民主的な感じで働く。
全ての重要な技術的な意思決定はチーム全体で議論され、最多数の投票を得た解決策が採用される。
しばらくして、このようなチームが「ソフトウェアアーキテクト」バッジを誰かのTシャツに付ける事に決めたときは、もっとも評判のいいプログラマがそのバッジを手にする。&lt;/p&gt;

&lt;p&gt;このバッジが彼の責務を変えることはまれだけども。
結局、チームは同じように働き続け、全員を巻き込んだ技術的議論を楽しむ。
つまり、ソフトウェアアーキテクトは責務が明確に定義された役割というよりもステータスになる。
それは最年長で最も権限のある人へのチームメンバからの尊敬の印になる。そうだろ?&lt;/p&gt;

&lt;p&gt;全く間違っている!&lt;/p&gt;

&lt;h2 id=&#34;アーキテクトは品質の責任を負う&#34;&gt;アーキテクトは品質の責任を負う&lt;/h2&gt;

&lt;p&gt;普通はアーキテクトは最も知識、スキル、経験、権限がある人がなるということは明らかだ。
もちろん普通はアーキテクトは他の人よりもものを知っていて、必要に応じて外交的指導的手腕を発揮してその知識を伝達する。
アーキテクトは普通はチームの中で最も賢いやつだ。&lt;/p&gt;

&lt;p&gt;しかしこのことは、彼をアーキテクトたらしめているものではない。&lt;/p&gt;

&lt;p&gt;そして、チームに必要なものでもない。&lt;/p&gt;

&lt;p&gt;私のソフトウェアアーキテクトの定義こうだ。
アーキテクトは品質の責任を負う人だ。&lt;/p&gt;

&lt;p&gt;「責任 (blame)」を職責 (accountability) とか 責務 (responsibility) と言い換えてもいいが、私は「責任 (blame)」という言葉を使うのがいいと思う。
なぜなら、開発中の製品の全ての品質問題がアーキテクトの個人的な失敗であることをより強調するからだ。
もちろん、その責任の対価として、品質がよかった場合には満足した顧客からの称賛は全てアーキテクトのものだ。&lt;/p&gt;

&lt;p&gt;これがチームに必要なものだ。
開発するソフトウェアの品質に対して誰かが個人的に責任を負うのだ。&lt;/p&gt;

&lt;h2 id=&#34;プロジェクトマネージャの仕事は-アーキテクトによる全ての技術的決定に対して誰にも不信を抱かせないようにすること&#34;&gt;プロジェクトマネージャの仕事は、アーキテクトによる全ての技術的決定に対して誰にも不信を抱かせないようにすること&lt;/h2&gt;

&lt;p&gt;アーキテクトが他のメンバにどのように責任を委譲するかはアーキテクト自身の仕事だ。
知識やスキル、&lt;a href=&#34;http://www.yegor256.com/2014/08/13/strict-code-quality-control.html&#34;&gt;品質管理ツール&lt;/a&gt;、ユニットテストフレームワーク、権限、コーチング、&lt;a href=&#34;http://www.yegor256.com/2016/01/05/how-to-punish-employees.html&#34;&gt;体罰&lt;/a&gt;、何を使おうとも、それが彼の仕事だ。
&lt;a href=&#34;http://www.yegor256.com/2015/09/22/micromanagement.html&#34;&gt;プロジェクトマネージャ&lt;/a&gt;は品質管理をソフトウェアアーキテクトに委譲した。
それをさらにどう委譲するかはソフトウェアアーキテクト&lt;a href=&#34;http://www.yegor256.com/2015/02/23/haircut.html&#34;&gt;次第だ&lt;/a&gt;。&lt;/p&gt;

&lt;p&gt;ソフトウェアアーキテクトの役割は全てのプロジェクトにおいて重大だ。
たとえたった二人のプログラマが同じデスクで働いている場合でもだ。
二人のうち一人はアーキテクトでなければならない。&lt;/p&gt;

&lt;p&gt;理想的なアーキテクトは上記の長所の全てを持つ。
彼は全員の意見を聞いて考慮に入れる。
彼はよいコーチであり先生だ。忍耐もある。
彼は効果的な伝達者であり交渉人だ。
外交官だ。
技術的な領域のエキスパートだ。&lt;/p&gt;

&lt;p&gt;しかし、たとえこうした長所全てを持たなくても、彼の決定は常に最終決定だ。&lt;/p&gt;

&lt;p&gt;そして、プロジェクトマネージャの仕事は、アーキテクトによる全ての技術的決定に対して誰にも不信を抱かせないようにすることだ。
これが委譲というものだ。
責任には常に権力が伴う。&lt;/p&gt;

&lt;p&gt;プロジェクトマネージャは定期的にアーキテクトの成果を評価すべきだ。
チームで開発中の製品の品質はアーキテクトの個人的な(!)責任だということを思い出してほしい。
どんな問題であっても彼の問題だ。
彼を責めたり罰したりすることを恐れてはいけない。
ただし、罰を有効なものにするためには、アーキテクトの行動に対して全力で応えるべきだということをを忘れてはいけない。
繰り返すが、彼の決定は最終決定だ。&lt;/p&gt;

&lt;p&gt;もしプロジェクトマネージャが製品の品質に満足せず、またアーキテクトがその状況を改善しないなら、アーキテクトを&lt;a href=&#34;http://www.yegor256.com/2015/09/16/how-to-fire-someone-right.html&#34;&gt;交代&lt;/a&gt;させる。
彼をプログラマに降格させ、他のプログラマをアーキテクトに昇格させる。
ただし、チームにアーキテクトは常に一人だけで、彼の決定が最終的なものであることを忘れてはいけない。&lt;/p&gt;

&lt;p&gt;それが完璧な製品を作れる可能性をもつただ一つの方法だ。&lt;/p&gt;

&lt;p&gt;&lt;div class=&#34;embed video-player&#34; style=&#34;text-align: center&#34;&gt;
  &lt;iframe class=&#34;youtube-player&#34; type=&#34;text/html&#34; width=&#34;320&#34; height=&#34;193&#34; src=&#34;http://www.youtube.com/embed/0fuEgmibJc4&#34; allowfullscreen frameborder=&#34;0&#34;&gt;
  &lt;/iframe&gt;
&lt;/div&gt;
&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;以上がYegorの記事。&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://tbd.kaitoy.xyz/2015/08/11/daily-stand-up-meetings-are-a-good-tool-for-a-bad-manager/&#34;&gt;スタンドアップミーティングに関する記事&lt;/a&gt;でも言っていた責任の委譲がこの記事でも触れられている。
プロジェクトマネージャは技術的な責任を誰かに委譲して、そいつをアーキテクトと呼べということだ。
責任には権限が伴うので、アーキテクトは技術面での最終決定権を持つ。&lt;/p&gt;

&lt;p&gt;それだけ。Yegorの他の記事に比べてシンプルな主張。
もう少し、アーキテクトが品質を確保するために何をすべきかといったことが書いてあると期待してたが。&lt;/p&gt;

&lt;p&gt;責任を委譲してそれに権限が付随するのか、権限を委譲してそれに責任が付随するのか、という細かい疑問はあるが、この記事の主な主張に対しては特に何も言うことがない。&lt;/p&gt;
</description>
        </item>
      
    
      
        <item>
          <title>pcap-ng support in Pcap4J</title>
          <link>http://tbd.kaitoy.xyz/2016/01/10/pcap-ng-support-in-pcap4j/</link>
          <pubDate>Sun, 10 Jan 2016 09:52:06 MST</pubDate>
          <author>Kaito Yamada</author>
          <guid>http://tbd.kaitoy.xyz/2016/01/10/pcap-ng-support-in-pcap4j/</guid>
          <description>

&lt;p&gt;Sometimes I receive inquiries about support for &lt;strong&gt;pcap-ng&lt;/strong&gt; files in &lt;a href=&#34;https://github.com/kaitoy/pcap4j&#34;&gt;&lt;strong&gt;Pcap4J&lt;/strong&gt;&lt;/a&gt;.
I wrote the result of my investigation on it in this article.&lt;/p&gt;

&lt;h2 id=&#34;what-s-a-pcap-ng-file&#34;&gt;What&amp;rsquo;s a pcap-ng file&lt;/h2&gt;

&lt;p&gt;A pcap-ng file (i.e. a file with &lt;code&gt;.pcapng&lt;/code&gt; extension ) is a packet dump file in &lt;a href=&#34;https://github.com/pcapng/pcapng&#34;&gt;&lt;strong&gt;The pcap Next Generation Capture File Format&lt;/strong&gt;&lt;/a&gt; (or pcap-ng format for short).
This format was created to overcome the limitations of the traditional &lt;a href=&#34;https://wiki.wireshark.org/Development/LibpcapFileFormat&#34;&gt;&lt;strong&gt;Libpcap File Format&lt;/strong&gt;&lt;/a&gt; (or pcap format for short) which is used in pcap files.&lt;/p&gt;

&lt;p&gt;Although the pcap format has been widely used for a long time, recent &lt;a href=&#34;https://www.wireshark.org/&#34;&gt;&lt;strong&gt;Wireshark&lt;/strong&gt;&lt;/a&gt;, the de facto standard packet capture tool, uses the pcap-ng format by default to save captured packets.
So, it&amp;rsquo;s expected that the pcap-ng format would be more common and pcap format would be a legacy in the future.&lt;/p&gt;

&lt;h2 id=&#34;pcap-ng-support-in-pcap4j&#34;&gt;pcap-ng support in Pcap4J&lt;/h2&gt;

&lt;p&gt;Of course Pcap4J supports traditional pcap format.
But how about the pcap-ng format?&lt;/p&gt;

&lt;p&gt;Whether Pcap4J can handle pcap-ng files is up to its underlying native library.
Remember Pcap4J is a wrapper library for &lt;a href=&#34;http://www.tcpdump.org/&#34;&gt;&lt;strong&gt;libpcap&lt;/strong&gt;&lt;/a&gt; and &lt;a href=&#34;http://www.winpcap.org/&#34;&gt;&lt;strong&gt;WinPcap&lt;/strong&gt;&lt;/a&gt;.
If the libpcap/WinPcap supports the pcap-ng format Pcap4J does, and vice versa.&lt;/p&gt;

&lt;h2 id=&#34;pcap-ng-support-in-libpcap&#34;&gt;pcap-ng support in libpcap&lt;/h2&gt;

&lt;p&gt;The libpcap got limited support for reading pcap-ng files in &lt;a href=&#34;https://github.com/the-tcpdump-group/libpcap/blob/libpcap-1.1/CHANGES&#34;&gt;1.1.0&lt;/a&gt;, and then the following three bugs around the feature were fixed:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;filtering issue (fixed in 1.2.1)&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/the-tcpdump-group/libpcap/issues/139&#34;&gt;pcap_datalink() returns wrong value&lt;/a&gt; (fixed in 1.1.2)&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/the-tcpdump-group/libpcap/issues/349&#34;&gt;Wrong timestamps on big-endian machines&lt;/a&gt; (fixed in 1.7.2)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;No enhancement for pcap-ng support since 1.1.0 as of now (1.7.5).&lt;/p&gt;

&lt;p&gt;I don&amp;rsquo;t know what &amp;ldquo;limited&amp;rdquo; means, but anyway it looked like Pcap4J 1.6.2 could read pcap-ng files without any problems as far as I tested it with libpcap 1.7.4.&lt;/p&gt;

&lt;p&gt;As for writing pcap-ng files, the libpcap doesn&amp;rsquo;t provide any support for it yet.&lt;/p&gt;

&lt;h2 id=&#34;pcap-ng-support-in-winpcap&#34;&gt;pcap-ng support in WinPcap&lt;/h2&gt;

&lt;p&gt;WinPcap is the Windows version of libpcap and each version of it is based on a certain version of libpcap.
The newest version of WinPcap, WinPcap 4.1.3, was developed with libpcap 1.0.0.
It means WinPcap doesn&amp;rsquo;t support pcap-ng format yet at all.&lt;/p&gt;

&lt;p&gt;But, there is an &lt;a href=&#34;http://sourceforge.net/projects/winpcap413-176/&#34;&gt;unofficial build of WinPcap based on libpcap 1.7.4&lt;/a&gt;.
As far as I tested this WinPcap through Pcap4J 1.6.2, it worked well on reading pcap-ng files as well as on basic functionalities such as finding network devices and live capture except &lt;a href=&#34;https://github.com/kaitoy/pcap4j/issues/52&#34;&gt;getting capture statistics&lt;/a&gt;.&lt;/p&gt;

&lt;h2 id=&#34;how-to-read-a-pcap-ng-file&#34;&gt;How to read a pcap-ng file&lt;/h2&gt;

&lt;p&gt;How to read a pcap-ng file is exactly the same as how to read a pcap file.&lt;/p&gt;

&lt;p&gt;Use &lt;a href=&#34;http://kaitoy.github.io/pcap4j/javadoc/latest/en/org/pcap4j/core/Pcaps.html#openOffline%28java.lang.String%29&#34;&gt;&lt;code&gt;Pcaps.openOffline()&lt;/code&gt;&lt;/a&gt; to open a pcap-ng file and call read methods such as &lt;a href=&#34;http://kaitoy.github.io/pcap4j/javadoc/latest/en/org/pcap4j/core/PcapHandle.html#getNextPacketEx%28%29&#34;&gt;&lt;code&gt;getNextPacketEx()&lt;/code&gt;&lt;/a&gt; and &lt;a href=&#34;http://kaitoy.github.io/pcap4j/javadoc/latest/en/org/pcap4j/core/PcapHandle.html#loop%28int,%20org.pcap4j.core.PacketListener%29&#34;&gt;&lt;code&gt;loop()&lt;/code&gt;&lt;/a&gt; on the returned &lt;a href=&#34;http://kaitoy.github.io/pcap4j/javadoc/latest/en/org/pcap4j/core/PcapHandle.html&#34;&gt;&lt;code&gt;PcapHandle&lt;/code&gt;&lt;/a&gt; object to get packets in the file.&lt;/p&gt;

&lt;p&gt;For example:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;public static void main(String args[]) throws PcapNativeException, NotOpenException {
  PcapHandle ph = Pcaps.openOffline(&amp;quot;/path/to/test.pcapng&amp;quot;);
  ph.setFilter(&amp;quot;tcp&amp;quot;, BpfProgram.BpfCompileMode.OPTIMIZE);
  while (true) {
    try {
      Packet p = ph.getNextPacketEx();
      if (p != null) {
        System.out.println(p);
      }
    } catch (EOFException e) {
      System.out.println(&amp;quot;End of file&amp;quot;);
      break;
    } catch (TimeoutException e) {
      System.out.println(&amp;quot;Timed out&amp;quot;);
      break;
    }
  }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;br&gt;&lt;/p&gt;

&lt;p&gt;If you try to read a pcap-ng file using Pcap4J with a native library which doesn&amp;rsquo;t support pcap-ng format, Pcap4J throws &lt;a href=&#34;http://kaitoy.github.io/pcap4j/javadoc/latest/en/org/pcap4j/core/PcapNativeException.html&#34;&gt;&lt;code&gt;PcapNativeException&lt;/code&gt;&lt;/a&gt; as follows:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-text&#34;&gt;Exception in thread &amp;quot;main&amp;quot; org.pcap4j.core.PcapNativeException: bad dump file format
        at org.pcap4j.core.Pcaps.openOffline(Pcaps.java:203)
        at Test.main(Test.java:16)
&lt;/code&gt;&lt;/pre&gt;
</description>
        </item>
      
    
      
        <item>
          <title>オブジェクト指向プログラミングにおいてユーティリティクラスに代わるもの</title>
          <link>http://tbd.kaitoy.xyz/2016/01/03/oop-alternative-to-utility-classes/</link>
          <pubDate>Sun, 03 Jan 2016 23:36:01 MST</pubDate>
          <author>Kaito Yamada</author>
          <guid>http://tbd.kaitoy.xyz/2016/01/03/oop-alternative-to-utility-classes/</guid>
          <description>

&lt;p&gt;このエントリでは、Yegor Bugayenkoによる記事、&lt;a href=&#34;http://www.yegor256.com/2014/05/05/oop-alternative-to-utility-classes.html&#34;&gt;OOP Alternative to Utility Classes&lt;/a&gt;を紹介する。
(Yegorから和訳と転載の許可は得た。)
以下はその全文の和訳だが、意訳超訳が混じっているので、もとのニュアンスを知りたければ元記事を読んでもいいし、読まなくてもいい。&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;ユーティリティクラス(またはヘルパークラス)は、スタティックメソッドだけを持っていて、状態を内包しない「構造体」だ。
&lt;a href=&#34;http://commons.apache.org/&#34;&gt;Apache Commons&lt;/a&gt;の&lt;code&gt;StringUtils&lt;/code&gt;、&lt;code&gt;IOUtils&lt;/code&gt;、&lt;code&gt;FileUtils&lt;/code&gt;や、&lt;a href=&#34;https://code.google.com/p/guava-libraries/&#34;&gt;Guava&lt;/a&gt;の&lt;code&gt;Iterables&lt;/code&gt;、&lt;code&gt;Iterators&lt;/code&gt;、またJDK7の&lt;code&gt;Files&lt;/code&gt;はユーティリティクラスのいい例だ。&lt;/p&gt;

&lt;p&gt;ユーティリティクラスはよく使われる共通機能を提供するので、この設計手法はJava(やC#、Rubyなど)の世界でとても人気だ。&lt;/p&gt;

&lt;p&gt;要するに我々は、&lt;a href=&#34;https://ja.wikipedia.org/wiki/Don&#39;t_repeat_yourself&#34;&gt;DRY原則&lt;/a&gt;に従い、重複を避けたい。
だから、共通コードをユーティリティクラスに入れて必要に応じて再利用する。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;// これはひどい設計なので再利用しないように。
public class NumberUtils {
  public static int max(int a, int b) {
    return a &amp;gt; b ? a : b;
  }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;実際、これはとても便利なテクニックだ!?&lt;/p&gt;

&lt;h2 id=&#34;ユーティリティクラスは悪だ&#34;&gt;ユーティリティクラスは悪だ&lt;/h2&gt;

&lt;p&gt;しかし、オブジェクト指向の世界では、ユーティリティクラスはかなり悪い(酷いという人さえいるかもしれない)手法だ。&lt;/p&gt;

&lt;p&gt;これについては多くの議論がある。
いくつか挙げると、Nick Malikの「&lt;a href=&#34;http://blogs.msdn.com/b/nickmalik/archive/2005/09/06/461404.aspx&#34;&gt;ヘルパークラスは悪か?&lt;/a&gt;」、Simon Hartの「&lt;a href=&#34;http://smart421.wordpress.com/2011/08/31/why-helper-singletons-and-utility-classes-are-mostly-bad-2/&#34;&gt;なぜヘルパー、シングルトン、ユーティリティクラスはだいたい間違っているのか&lt;/a&gt;」、Marshal Wardの「&lt;a href=&#34;http://www.marshallward.org/avoiding-utility-classes.html&#34;&gt;ユーティリティクラスを避ける&lt;/a&gt;」、Dhaval Dalalの「&lt;a href=&#34;http://www.jroller.com/DhavalDalal/entry/kill_that_util_class&#34;&gt;ユーティルクラスを殺せ!&lt;/a&gt;」、Rob Bagbyの「&lt;a href=&#34;http://www.robbagby.com/posts/helper-classes-are-a-code-smell/&#34;&gt;ヘルパークラスは問題の兆候&lt;/a&gt;」。&lt;/p&gt;

&lt;p&gt;また、StackExchangeにはユーティリティクラスについての質問がいくつかある。
例えば、「&lt;a href=&#34;http://stackoverflow.com/questions/3339929/if-a-utilities-class-is-evil-where-do-i-put-my-generic-code&#34;&gt;ユーティリティクラスが悪なら、どこに共通コードを書けばいい?&lt;/a&gt;」とか、「&lt;a href=&#34;http://stackoverflow.com/questions/3340032/utility-classes-are-evil&#34;&gt;ユーティリティクラスは悪&lt;/a&gt;」とか。&lt;/p&gt;

&lt;p&gt;これらの主張は要するに、ユーティリティクラスは適切なオブジェクトではないということだ。
だから、オブジェクト指向の世界に適合しない。
ユーティリティクラスは、当時の人々が機能分割パラダイムに慣れていたために、手続き型言語から受け継がれた。&lt;/p&gt;

&lt;p&gt;君がこの主張に同意し、ユーティリティクラスを使うのをやめたがっていると想定し、そいつをどのように適切なオブジェクトに置き換えるかを例を挙げながら教えよう。&lt;/p&gt;

&lt;h2 id=&#34;手続き型の例&#34;&gt;手続き型の例&lt;/h2&gt;

&lt;p&gt;例えば、テキストファイルを読んで、行で分割し、各行をトリムして、その結果を別のファイルに保存したいとする。
これはApache Commonsの&lt;code&gt;FileUtils&lt;/code&gt;を使えばできる。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;void transform(File in, File out) {
  Collection&amp;lt;String&amp;gt; src = FileUtils.readLines(in, &amp;quot;UTF-8&amp;quot;);
  Collection&amp;lt;String&amp;gt; dest = new ArrayList&amp;lt;&amp;gt;(src.size());
  for (String line : src) {
    dest.add(line.trim());
  }
  FileUtils.writeLines(out, dest, &amp;quot;UTF-8&amp;quot;); } ```
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;上のコードはきれいに見える。
しかし、これは手続き型プログラミングであって、オブジェクト指向じゃない。
コードの各行で、データ(byteとbit)を操作し、コンピューターにどこからデータを取ってどこに書き込むかを明示的に指示している。
処理の手順を定義している。&lt;/p&gt;

&lt;h2 id=&#34;オブジェクト指向な方法&#34;&gt;オブジェクト指向な方法&lt;/h2&gt;

&lt;p&gt;オブジェクト指向パラダイムでは、オブジェクトをインスタンス化して合成すべきだ。
これはオブジェクトにオブジェクト自身のやり方でデータを管理させるためだ。
補足的なスタティックメソッドを呼ぶ代わりに、求めている挙動を提供できるオブジェクトを生成するべきだ。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;public class Max implements Number {
  private final int a;
  private final int b;
  public Max(int x, int y) {
    this.a = x;
    this.b = y;
  }
  @Override
  public int intValue() {
    return this.a &amp;gt; this.b ? this.a : this.b;
  }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;以下の手続き型のメソッド呼び出しは、&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;int max = NumberUtils.max(10, 5);
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;以下の様にオブジェクト指向的になる。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;int max = new Max(10, 5).intValue();
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;どっちでも同じ?
いや、そうでもない。
もう少し読み進めて欲しい。&lt;/p&gt;

&lt;h2 id=&#34;データ構造ではなくオブジェクト&#34;&gt;データ構造ではなくオブジェクト&lt;/h2&gt;

&lt;p&gt;私なら、上と同じファイル編集機能をオブジェクト指向なやり方で以下の様に設計する。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;void transform(File in, File out) {
  Collection&amp;lt;String&amp;gt; src = new Trimmed(
    new FileLines(new UnicodeFile(in))
  );
  Collection&amp;lt;String&amp;gt; dest = new FileLines(
    new UnicodeFile(out)
  );
  dest.addAll(src);
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;code&gt;FileLines&lt;/code&gt;は&lt;code&gt;Collection&amp;lt;String&amp;gt;&lt;/code&gt;を実装していて、ファイルの読み込みと書き込みの処理を内包している。
&lt;code&gt;FileLines&lt;/code&gt;のインスタンスは文字列のコレクションと全く同じ挙動をし、全てのI/O処理を隠蔽している。
このインスタンスを繰り返し処理するとファイルが読み込まれる。
このインスタンスに&lt;code&gt;addAll()&lt;/code&gt;するとファイルに書き込まれる。&lt;/p&gt;

&lt;p&gt;&lt;code&gt;Trimmed&lt;/code&gt;も&lt;code&gt;Collection&amp;lt;String&amp;gt;&lt;/code&gt;を実装していて、文字列のコレクションを内包している(&lt;a href=&#34;https://ja.wikipedia.org/wiki/Decorator_%E3%83%91%E3%82%BF%E3%83%BC%E3%83%B3&#34;&gt;Decoratorパターン&lt;/a&gt;)。
一行が取得されるたびにトリムされる。&lt;/p&gt;

&lt;p&gt;&lt;code&gt;Trimmed&lt;/code&gt;も&lt;code&gt;FileLines&lt;/code&gt;も&lt;code&gt;UnicodeFile&lt;/code&gt;も、上記スニペットに出てくる全てのクラスは小さめだ。
それぞれが自身の単一の機能に責任を持ち、つまり&lt;a href=&#34;http://d.hatena.ne.jp/asakichy/20110808/1312754662&#34;&gt;単一責任原則&lt;/a&gt;に完璧に従っている。&lt;/p&gt;

&lt;p&gt;我々側、つまりライブラリのユーザから見るとこれはそれほど重要ではないかもしれないが、ライブラリの開発者から見ると肝要だ。
80以上のメソッドを持つ3000行のユーティリティクラスである&lt;code&gt;FileUtils&lt;/code&gt;の&lt;code&gt;readLines()&lt;/code&gt;よりも、&lt;code&gt;FileLines&lt;/code&gt;の方が開発やメンテナンスやユニットテストがしやすい。
真面目な話、&lt;a href=&#34;http://svn.apache.org/viewvc/commons/proper/io/trunk/src/main/java/org/apache/commons/io/FileUtils.java?view=co&#34;&gt;そのソース&lt;/a&gt;を読んでみて欲しい。&lt;/p&gt;

&lt;p&gt;オブジェクト指向のアプローチは遅延実行を可能にする。
&lt;code&gt;in&lt;/code&gt;ファイルはそのデータが必要になるまで読まれない。
I/Oエラーで開けなかったら触られすらしない。
全ては&lt;code&gt;addAll()&lt;/code&gt;を呼んだ後に始まる。&lt;/p&gt;

&lt;p&gt;二つ目のスニペットの最終行を除く全行は、小さいオブジェクトをインスタンス化して大きいオブジェクトを合成している。
このオブジェクト合成は、データ変換を起こさないのでCPUコストはむしろ低い。&lt;/p&gt;

&lt;p&gt;さらに、一つ目のスクリプトがO(n)で動くのに対し、二つ目のスクリプトは明らかにO(1)の計算量で動く。
これが一つ目のスクリプトでデータに対して手続き型アプローチをした結果だ。&lt;/p&gt;

&lt;p&gt;オブジェクト指向の世界では、データというものはない。オブジェクトとその挙動しかないのだ！&lt;/p&gt;

&lt;p&gt;&lt;div class=&#34;embed video-player&#34; style=&#34;text-align: center&#34;&gt;
  &lt;iframe class=&#34;youtube-player&#34; type=&#34;text/html&#34; width=&#34;320&#34; height=&#34;193&#34; src=&#34;http://www.youtube.com/embed/psrp3TtaYYI&#34; allowfullscreen frameborder=&#34;0&#34;&gt;
  &lt;/iframe&gt;
&lt;/div&gt;
&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;以上がYegorの記事。&lt;/p&gt;

&lt;p&gt;私はユーティリティクラスは結構好きで、以下の点で有用だと思う。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;ライブラリ開発者視点:

&lt;ul&gt;
&lt;li&gt;少数のクラスで多くの共通処理を実装できる。&lt;/li&gt;
&lt;li&gt;ユーティリティクラスは(普通)状態を持たないので、マルチスレッドなどを意識せずに簡単に書ける。&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;ライブラリ利用者視点:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;オブジェクトを作らなくても使えるので、オーバーヘッドが少なくコードを書くのも楽。&lt;/li&gt;

&lt;li&gt;&lt;p&gt;ユーティリティクラスのメソッド呼び出しは大抵、「&amp;lt;問題領域&amp;gt;.&amp;lt;動詞&amp;gt;&amp;lt;目的語&amp;gt;()」という形になっていて、何をやっているのかわかりやすい。&lt;/p&gt;

&lt;p&gt;上で出てきた&lt;code&gt;FileUtils.readLines()&lt;/code&gt;も、ファイルを対象に(問題領域)、行を(目的語)読みこむ(動詞)メソッドであることが一目瞭然。&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;br&gt;&lt;/p&gt;

&lt;p&gt;ユーティリティクラス反対派の主張が、それがオブジェクト真理教の教義に照らして適切なオブジェクトではなく、オブジェクト指向の世界に適合しないという哲学的なものである時点で、ユーティリティクラスをやめる動機に全くつながらない。&lt;/p&gt;

&lt;p&gt;&lt;code&gt;transform()&lt;/code&gt;の実装は、Apache Commonsを使ったやつの方が自分でクラスを作らなくて済み、開発量が少なくてよい、というのが普通の感覚ではないだろうか。&lt;/p&gt;

&lt;p&gt;さらに、Yegorの&lt;code&gt;transform()&lt;/code&gt;の実装だと、I/O処理を隠蔽しすぎて何をやっているのかコードからさっぱりわからない。
&lt;code&gt;addAll()&lt;/code&gt;するとファイルへの書き込みが発生するなんて誰も想像だにしまい。
オブジェクト真理教の神のみぞ知るといった感じの挙動だ。
こんなコードで可読性、つまり保守性が「手続き型の例」のやつより高くなるとは到底思えない。&lt;/p&gt;
</description>
        </item>
      
    
      
        <item>
          <title>git resetとrevertを図解する</title>
          <link>http://tbd.kaitoy.xyz/2016/01/01/git-revert-reset/</link>
          <pubDate>Fri, 01 Jan 2016 18:38:02 MST</pubDate>
          <author>Kaito Yamada</author>
          <guid>http://tbd.kaitoy.xyz/2016/01/01/git-revert-reset/</guid>
          <description>

&lt;p&gt;&lt;a href=&#34;http://tbd.kaitoy.xyz/2015/12/27/git-repository/&#34;&gt;この記事&lt;/a&gt;を読んだことを前提に、&lt;a href=&#34;https://git-scm.com/&#34;&gt;&lt;strong&gt;Git&lt;/strong&gt;&lt;/a&gt;の &lt;code&gt;git revert&lt;/code&gt; と &lt;code&gt;git reset&lt;/code&gt;というコマンドについて説明する。
この二つはしばしばコミットを取り消すコマンドとして同じ文脈で説明されることが多いのでこのエントリでも一緒に説明するが、実際は全く異なるコマンドだし、そもそもどちらもコミットを取り消すコマンドではない。&lt;/p&gt;

&lt;h2 id=&#34;git-revert&#34;&gt;git revert&lt;/h2&gt;

&lt;p&gt;&lt;code&gt;git revert&lt;/code&gt;は、指定したコミットが持ち込んだ変更を打ち消すコミットを追加する。
リバースパッチを適用すると言ってもよい。
コミットを追加しかしないので、このコマンドによって既存のコミットが消えたり変わったりすることはない。&lt;/p&gt;

&lt;p&gt;図にすると以下の感じ。単純。&lt;/p&gt;

&lt;ul class=&#34;bxslider&#34;&gt;
  &lt;li&gt;&lt;img src=&#34;http://tbd.kaitoy.xyz/images/git-revert-reset/git_revert/スライド1.PNG&#34; /&gt;&lt;/li&gt;
  &lt;li&gt;&lt;img src=&#34;http://tbd.kaitoy.xyz/images/git-revert-reset/git_revert/スライド2.PNG&#34; /&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;git-reset&#34;&gt;git reset&lt;/h2&gt;

&lt;p&gt;&lt;code&gt;git reset&lt;/code&gt;には二つの機能がある。
インデックスを再設定する(i.e. resetする)機能と、&lt;code&gt;HEAD&lt;/code&gt;を付け替える(i.e. resetする)機能だ。&lt;/p&gt;

&lt;h4 id=&#34;インデックスの再設定&#34;&gt;インデックスの再設定&lt;/h4&gt;

&lt;p&gt;インデックスの再設定をするコマンドは&lt;code&gt;git reset &amp;lt;ワーキングディレクトリ内のファイルのパス(複数可)&amp;gt;&lt;/code&gt;。
これを実行すると、指定したファイルについて、&lt;code&gt;HEAD&lt;/code&gt;が指すコミットが指すツリー内のブロブを指すようインデックスを更新する。&lt;/p&gt;

&lt;p&gt;何を言っているのかわからないので図にする。&lt;/p&gt;

&lt;ul class=&#34;bxslider&#34;&gt;
  &lt;li&gt;&lt;img src=&#34;http://tbd.kaitoy.xyz/images/git-revert-reset/git_reset_path/スライド1.PNG&#34; /&gt;&lt;/li&gt;
  &lt;li&gt;&lt;img src=&#34;http://tbd.kaitoy.xyz/images/git-revert-reset/git_reset_path/スライド2.PNG&#34; /&gt;&lt;/li&gt;
  &lt;li&gt;&lt;img src=&#34;http://tbd.kaitoy.xyz/images/git-revert-reset/git_reset_path/スライド3.PNG&#34; /&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;この図では便宜的に、&lt;code&gt;HEAD&lt;/code&gt;、つまり参照をオブジェクト格納領域内に書いているが、実際には&lt;/p&gt;

&lt;p&gt;図を見ると、&lt;code&gt;git add Readme.md&lt;/code&gt;と&lt;code&gt;git reset Readme.md&lt;/code&gt;がだいたい逆のことをしていることがわかる。
要するに、&lt;code&gt;git add &amp;lt;パス&amp;gt;&lt;/code&gt;は指定したファイルをステージし、&lt;code&gt;git reset &amp;lt;パス&amp;gt;&lt;/code&gt;は指定したファイルをアンステージする。&lt;/p&gt;

&lt;h4 id=&#34;headの付け替え&#34;&gt;HEADの付け替え&lt;/h4&gt;

&lt;p&gt;&lt;code&gt;HEAD&lt;/code&gt;の付け替えをするコマンドは&lt;code&gt;git reset &amp;lt;コミット&amp;gt;&lt;/code&gt;。
これを実行すると、&lt;code&gt;HEAD&lt;/code&gt;が指しているコミットを指すよう&lt;code&gt;ORIG_HEAD&lt;/code&gt;を作成または更新し、指定したコミットを指すよう&lt;code&gt;HEAD&lt;/code&gt;を更新する。
オプションによってはさらにインデックスやワーキングディレクトリを指定したコミットが指すツリーと同期するよう更新する。&lt;/p&gt;

&lt;p&gt;このオプションには&lt;code&gt;--soft&lt;/code&gt;、&lt;code&gt;--mixed&lt;/code&gt; (デフォルト)、&lt;code&gt;--hard&lt;/code&gt;の三種類があり、それぞれのオプションを付けた時の更新対象を次の表に示す。&lt;/p&gt;

&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;オプション&lt;/th&gt;
&lt;th&gt;HEAD&lt;/th&gt;
&lt;th&gt;インデックス&lt;/th&gt;
&lt;th&gt;ワーキングディレクトリ&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;

&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;--soft&lt;/td&gt;
&lt;td&gt;○&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;--mixed&lt;/td&gt;
&lt;td&gt;○&lt;/td&gt;
&lt;td&gt;○&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;--hard&lt;/td&gt;
&lt;td&gt;○&lt;/td&gt;
&lt;td&gt;○&lt;/td&gt;
&lt;td&gt;○&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;&lt;br&gt;&lt;/p&gt;

&lt;p&gt;この三者の違いについては面倒だしだいたい分かるはずなので図にしないが、&lt;code&gt;git reset &amp;lt;コミット&amp;gt;&lt;/code&gt;したときの&lt;code&gt;HEAD&lt;/code&gt;動きについて次に図示する。&lt;/p&gt;

&lt;ul class=&#34;bxslider&#34;&gt;
  &lt;li&gt;&lt;img src=&#34;http://tbd.kaitoy.xyz/images/git-revert-reset/git_reset_commit/スライド1.PNG&#34; /&gt;&lt;/li&gt;
  &lt;li&gt;&lt;img src=&#34;http://tbd.kaitoy.xyz/images/git-revert-reset/git_reset_commit/スライド2.PNG&#34; /&gt;&lt;/li&gt;
  &lt;li&gt;&lt;img src=&#34;http://tbd.kaitoy.xyz/images/git-revert-reset/git_reset_commit/スライド3.PNG&#34; /&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;スライド中で&lt;code&gt;git reset HEAD^&lt;/code&gt;した時点で、コミットDは実質的に削除されたに近い状態になる。
&lt;code&gt;ORIG_HEAD&lt;/code&gt;という一時的なシンボリック参照で指されているだけで、どの参照からもたどり着けなくなるからだ。
コミットDはいずれ&lt;code&gt;git gc&lt;/code&gt;によって実際に削除されるはずだし、&lt;code&gt;git push&lt;/code&gt;してもコミットD、それが指すツリー、そのツリーの下にしかないブロブはリモートリポジトリに送られない。&lt;/p&gt;

&lt;p&gt;よって、&lt;code&gt;git reset &amp;lt;コミット&amp;gt;&lt;/code&gt;は普通コミットを削除したいときに使われる。
使われはするが、このコマンド自体がコミットを削除するわけではなくて、あくまで&lt;code&gt;HEAD&lt;/code&gt;を付け替えるコマンドであることを覚えていた方がいざというときに助かる。&lt;/p&gt;

&lt;p&gt;因みに上のスライドでやった操作は、&lt;code&gt;git commit --amend&lt;/code&gt;がやることとほぼ同じ。&lt;/p&gt;
</description>
        </item>
      
    
      
        <item>
          <title>Gitの分散バージョン管理の仕組み</title>
          <link>http://tbd.kaitoy.xyz/2015/12/31/git-dvc/</link>
          <pubDate>Thu, 31 Dec 2015 01:02:59 MST</pubDate>
          <author>Kaito Yamada</author>
          <guid>http://tbd.kaitoy.xyz/2015/12/31/git-dvc/</guid>
          <description>

&lt;p&gt;このエントリでは、&lt;a href=&#34;http://tbd.kaitoy.xyz/2015/12/27/git-repository/&#34;&gt;この記事&lt;/a&gt;を読んだことを前提に、&lt;a href=&#34;https://git-scm.com/&#34;&gt;&lt;strong&gt;Git&lt;/strong&gt;&lt;/a&gt;の分散バージョン管理の仕組みについて説明する。&lt;/p&gt;

&lt;h2 id=&#34;gitの分散バージョン管理&#34;&gt;Gitの分散バージョン管理&lt;/h2&gt;

&lt;p&gt;分散バージョン管理とは、分散したリポジトリでのバージョン管理ということ。
ここでリポジトリが分散しているとは、同じプロジェクトの履歴を管理する完全で独立したリポジトリが複数あるということ。
これにより一つのプロジェクトの開発を地理的に分散して並行して進めることができる。&lt;/p&gt;

&lt;p&gt;Gitは分散バージョン管理のために、リポジトリのクローン(≒コピー)を作る機能と、リポジトリ間でコミットグラフを同期する機能を提供している。&lt;/p&gt;

&lt;p&gt;リポジトリのクローンを作ると言うと、オリジナルとクローンの間に格差があるような気がするが、
実際にはGitは全てのリポジトリが対等であるという思想のもとで実装されている。
このため、リポジトリをクローンする時には(デフォルトで)クローン元の完全なコミットグラフがクローンにコピーされるし、任意のリポジトリ間のデータのやり取りをpeer-to-peerでできる。
クローンからクローンを作ることももちろん可能。&lt;/p&gt;

&lt;p&gt;&lt;code&gt;git push&lt;/code&gt;でデータを送る先をアップストリームと呼ぶことはあるし、次節でローカルリポジトリとリモートリポジトリという関係が出てくるが、これはあくまでその時点でそういう設定になっているというだけ。
アップストリームはいつでもいくつでも&lt;code&gt;git remote&lt;/code&gt;コマンドで追加したり削除したりできる。&lt;/p&gt;

&lt;p&gt;このような実装により、Gitの分散バージョン管理ではリポジトリ間で柔軟なデータのやり取りができる。
例えば以下の様な複雑なリポジトリネットワークを組むこともできる。&lt;/p&gt;

&lt;p&gt;&lt;img alt=&#34;good-object-2.png&#34; src=&#34;http://tbd.kaitoy.xyz/images/git-dvc/repo_net.png&#34; style=&#34;width: 100%; max-width: 400px; margin: 0px auto; display: block;&#34;&gt;&lt;/p&gt;

&lt;h2 id=&#34;ローカルリポジトリとリモートリポジトリ&#34;&gt;ローカルリポジトリとリモートリポジトリ&lt;/h2&gt;

&lt;p&gt;一人の開発者から見て、手元にあるリポジトリを &lt;strong&gt;ローカルリポジトリ&lt;/strong&gt; と呼ぶのに対して、&lt;code&gt;git push&lt;/code&gt;や&lt;code&gt;git pull&lt;/code&gt;や&lt;code&gt;git fetch&lt;/code&gt;でデータをやり取りする相手のリポジトリを &lt;strong&gt;リモートリポジトリ&lt;/strong&gt; と呼ぶ。
リモートリポジトリとのやり取りは、&lt;strong&gt;リモート追跡ブランチ&lt;/strong&gt; と &lt;strong&gt;リモート&lt;/strong&gt; というものを使って実装されている。&lt;/p&gt;

&lt;h4 id=&#34;リモート追跡ブランチ&#34;&gt;リモート追跡ブランチ&lt;/h4&gt;

&lt;p&gt;リモート追跡ブランチは、ローカルリポジトリの&lt;code&gt;.git/refs/remotes/&lt;/code&gt;に格納される参照で、リモートリポジトリ内のローカルブランチのコミットグラフを取得してローカルリポジトリ内に保持するために使われる。
&lt;code&gt;git branch -r&lt;/code&gt;でその一覧が見れる。&lt;/p&gt;

&lt;p&gt;「追跡」ブランチというだけあって、リモートリポジトリ内でコミットグラフが成長した場合、この変更に追随することができる。
このためのコマンドが&lt;code&gt;git fetch&lt;/code&gt;。
因みに&lt;code&gt;git pull&lt;/code&gt;は、&lt;code&gt;git fetch&lt;/code&gt;でリモート追跡ブランチを更新した後、&lt;code&gt;git merge&lt;/code&gt;(オプションによっては&lt;code&gt;git rebase&lt;/code&gt;)でそのリモート追跡ブランチをローカルブランチにマージするのと同じ。&lt;/p&gt;

&lt;h4 id=&#34;リモート&#34;&gt;リモート&lt;/h4&gt;

&lt;p&gt;リモートとは、リモートリポジトリのこと、またはリモートリポジトリに接続するための定義のこと。
この定義は、ローカルリポジトリの&lt;code&gt;.git/config&lt;/code&gt;に&lt;code&gt;remote&lt;/code&gt;セクションとして書かれている。
以下がその例。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;[remote &amp;quot;origin&amp;quot;]
        fetch = +refs/heads/*:refs/remotes/origin/*
        url = git@github.com:kaitoy/blog.git
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;セクション名のところに&lt;code&gt;&amp;quot;origin&amp;quot;&lt;/code&gt;とあるがこれは、この定義で接続するリモートリポジトリをGitコマンドなどで&lt;code&gt;origin&lt;/code&gt;と指定できるということ。
ここで定義されているのは&lt;code&gt;url&lt;/code&gt;と&lt;code&gt;fetch&lt;/code&gt;で、それぞれ以下を意味する。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;url&lt;/p&gt;

&lt;p&gt;リモートリポジトリのURL。
つまり、リモートリポジトリがどのサーバのどのディレクトリにあって、それとのデータのやり取りをどのプロトコルでやるかという定義。
このURLには以下の書式が使える。&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;ファイルパス&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;code&gt;/path/to/repo.git&lt;/code&gt;とか&lt;code&gt;C:\\Users\\Kaito\\Desktop\\pcap4j&lt;/code&gt;といった、普通のファイルパスの書式。
&lt;a href=&#34;https://ja.wikipedia.org/wiki/Network_File_System&#34;&gt;NFS&lt;/a&gt;などでリモートリポジトリが共有されている場合などに使われる。&lt;/p&gt;

&lt;p&gt;シンボリックリンクがサポートされているOS上では、クローンはリモートリポジトリをハードリンクで参照する。
このシンボリック参照でのファイル共有がトラブルの元なため、この書式は非推奨。&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;strong&gt;ファイルURL&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;code&gt;file:///path/to/repo.git&lt;/code&gt;とか&lt;code&gt;file://C:/Users/Kaito/Desktop/pcap4j&lt;/code&gt;といった、ローカルホスト上のパスを示すファイルURLの書式。
用途はファイルパスと同様だが、ハードリンクを作る代わりにコピーするのでより安全。&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;strong&gt;HTTP(S)&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;code&gt;https://github.com/kaitoy/pcap4j.git&lt;/code&gt;といったHTTPSやHTTPのURL。
リポジトリへのアクセス制御にHTTPの認証機能やHTTPSのクライアント証明書などが使えるほか、HTTPSなら通信の暗号化もできる。&lt;/p&gt;

&lt;p&gt;使用するポートがファイアウォールにブロックされていることが少ないのも使いやすい。&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;strong&gt;Gitプロトコル&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;code&gt;git://example.com/path/to/repo.git&lt;/code&gt;といった書式で、&lt;a href=&#34;https://git-scm.com/book/ja/v1/Git-%E3%82%B5%E3%83%BC%E3%83%90%E3%83%BC-Git-%E3%83%87%E3%83%BC%E3%83%A2%E3%83%B3&#34;&gt;Gitデーモン&lt;/a&gt;によるGitネイティブプロトコルを使うURL。
HTTPよりも高速な通信ができるが、認証機能も暗号化機能もない。&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;strong&gt;SSH + Gitプロトコル&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;code&gt;ssh://git@github.com/kaitoy/pcap4j.git&lt;/code&gt;のような&lt;a href=&#34;https://ja.wikipedia.org/wiki/Secure_Shell&#34;&gt;SSH&lt;/a&gt;のURLで、これを使うとSSHトンネルを通してGitプロトコルで通信できる。
Gitプロトコル単体を使うのに比べ、SSHの認証機能と暗号化機能を利用できるが、やや遅くなるはず。&lt;/p&gt;

&lt;p&gt;このプロトコルには、&lt;code&gt;git@github.com:kaitoy/pcap4j.git&lt;/code&gt;のような&lt;a href=&#34;https://ja.wikipedia.org/wiki/Secure_copy&#34;&gt;SCP&lt;/a&gt;書式も使える。&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Git自体はGitデーモンを含めリポジトリへのアクセス制御の機能を一切持たないので、認証などが必要な場合はHTTPなどその機能を持つプロトコルのURLを使う必要がある。&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;fetch&lt;/p&gt;

&lt;p&gt;リモートリポジトリ内のローカルブランチとローカルリポジトリ内の追跡ブランチとがどう対応するかを定義する。
この定義は&lt;code&gt;refspec&lt;/code&gt;と呼ばれる。&lt;/p&gt;

&lt;p&gt;上の例の&lt;code&gt;fetch = +refs/heads/*:refs/remotes/origin/*&lt;/code&gt;だと、リモートリポジトリの&lt;code&gt;.git/refs/heads/&lt;/code&gt;にある全てのブランチをそれぞれ、ローカルリポジトリの&lt;code&gt;.git/refs/remotes/origin/&lt;/code&gt;にある同名のブランチで追跡する、という意味。&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;クローン時の挙動&#34;&gt;クローン時の挙動&lt;/h2&gt;

&lt;p&gt;クローン時のデフォルトの挙動について説明する。&lt;/p&gt;

&lt;p&gt;リポジトリのクローンを作ると、オブジェクト格納領域内のオブジェクトが全てクローンにコピーされる。
つまり、元のリポジトリ(i.e. リモートリポジトリ)と同じコミットグラフ(とタグオブジェクト)がクローンのリポジトリに入る。&lt;/p&gt;

&lt;p&gt;インデックスはリポジトリ毎に固有の一時的なデータなので、クローンにはコピーされない。&lt;/p&gt;

&lt;p&gt;参照については、リモートリポジトリ内の全てのローカルブランチとタグがクローンにコピーされる。&lt;/p&gt;

&lt;p&gt;リモート追跡ブランチはコピーされず、代わりに、リモートリポジトリ内の全てのローカルブランチに対応する同名のリモート追跡ブランチがクローンのリポジトリ内に作成される。
また、これに対応するリモートが作成され、これの&lt;code&gt;fetch&lt;/code&gt;に(前節の例と同様に)&lt;code&gt;+refs/heads/*:refs/remotes/origin/*&lt;/code&gt;が設定される。&lt;/p&gt;

&lt;p&gt;シンボリック参照はリポジトリ毎に固有のものなのでクローンにはコピーされない。
クローンにはデフォルトブランチ(普通は&lt;code&gt;master&lt;/code&gt;)を指す&lt;code&gt;HEAD&lt;/code&gt;が作成される。&lt;/p&gt;

&lt;h2 id=&#34;リモートリポジトリとのやり取りの図解&#34;&gt;リモートリポジトリとのやり取りの図解&lt;/h2&gt;

&lt;p&gt;リモートリポジトリをクローンして、変更をプルしたりプッシュしたりする様子を以下に図示する。&lt;/p&gt;

&lt;ul class=&#34;bxslider&#34;&gt;
  &lt;li&gt;&lt;img src=&#34;http://tbd.kaitoy.xyz/images/git-dvc/git_dvc_merge/スライド1.PNG&#34; /&gt;&lt;/li&gt;
  &lt;li&gt;&lt;img src=&#34;http://tbd.kaitoy.xyz/images/git-dvc/git_dvc_merge/スライド2.PNG&#34; /&gt;&lt;/li&gt;
  &lt;li&gt;&lt;img src=&#34;http://tbd.kaitoy.xyz/images/git-dvc/git_dvc_merge/スライド3.PNG&#34; /&gt;&lt;/li&gt;
  &lt;li&gt;&lt;img src=&#34;http://tbd.kaitoy.xyz/images/git-dvc/git_dvc_merge/スライド4.PNG&#34; /&gt;&lt;/li&gt;
  &lt;li&gt;&lt;img src=&#34;http://tbd.kaitoy.xyz/images/git-dvc/git_dvc_merge/スライド5.PNG&#34; /&gt;&lt;/li&gt;
  &lt;li&gt;&lt;img src=&#34;http://tbd.kaitoy.xyz/images/git-dvc/git_dvc_merge/スライド6.PNG&#34; /&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;これはこれで完全に正しい手順だが、最終的にできるコミットグラフが無駄に分岐していて美しくない。
普通は以下の様に、リベースを挟んで一直線の履歴に保つ方が一般にいいと思う。&lt;/p&gt;

&lt;ul class=&#34;bxslider&#34;&gt;
  &lt;li&gt;&lt;img src=&#34;http://tbd.kaitoy.xyz/images/git-dvc/git_dvc_ff/スライド1.PNG&#34; /&gt;&lt;/li&gt;
  &lt;li&gt;&lt;img src=&#34;http://tbd.kaitoy.xyz/images/git-dvc/git_dvc_ff/スライド2.PNG&#34; /&gt;&lt;/li&gt;
  &lt;li&gt;&lt;img src=&#34;http://tbd.kaitoy.xyz/images/git-dvc/git_dvc_ff/スライド3.PNG&#34; /&gt;&lt;/li&gt;
  &lt;li&gt;&lt;img src=&#34;http://tbd.kaitoy.xyz/images/git-dvc/git_dvc_ff/スライド4.PNG&#34; /&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;このフェッチ + リベースを一度にやってくれるのが、&lt;code&gt;git pull --rebase&lt;/code&gt;。&lt;/p&gt;

&lt;h2 id=&#34;gitで分散バージョン管理する際の注意点&#34;&gt;Gitで分散バージョン管理する際の注意点&lt;/h2&gt;

&lt;p&gt;Gitで分散バージョン管理する際の注意点を二つ挙げる。&lt;/p&gt;

&lt;h4 id=&#34;他のリポジトリにもあるコミットを変更してはいけない&#34;&gt;他のリポジトリにもあるコミットを変更してはいけない&lt;/h4&gt;

&lt;p&gt;Gitには、&lt;code&gt;git commit --amend&lt;/code&gt;、&lt;a href=&#34;http://tbd.kaitoy.xyz/2015/12/28/git-merge/#%E3%83%AA%E3%83%99%E3%83%BC%E3%82%B9&#34;&gt;&lt;code&gt;git rebase&lt;/code&gt;&lt;/a&gt;といったコミットを変更するコマンドや、&lt;a href=&#34;http://tbd.kaitoy.xyz/2016/01/01/git-revert-reset/#git-reset&#34;&gt;&lt;code&gt;git reset&lt;/code&gt;&lt;/a&gt;というコミットの削除につながるコマンドがある。
こういうコマンドで他のリポジトリにもあるコミットを変更してはいけない。&lt;/p&gt;

&lt;p&gt;他のリポジトリにもあるコミットとは、クローン時にコピーしてきたコミット、プルしたコミット、プッシュしたコミットなどのこと。&lt;/p&gt;

&lt;p&gt;もしやると、プッシュもプルも簡単にはできなくなり非常に面倒なことになる。&lt;/p&gt;

&lt;h4 id=&#34;開発リポジトリには-基本的に-プッシュしてはいけない&#34;&gt;開発リポジトリには(基本的に)プッシュしてはいけない&lt;/h4&gt;

&lt;p&gt;リポジトリには、&lt;strong&gt;ベアリポジトリ&lt;/strong&gt; と、&lt;strong&gt;開発リポジトリ&lt;/strong&gt; がある。
開発リポジトリは普段使っている普通のリポジトリ。
ベアリポジトリは、簡単に言うとワーキングディレクトリやカレントブランチやリモートを持たないリポジトリで、開発リポジトリのリモートリポジトリとして使われ、&lt;code&gt;git init&lt;/code&gt;や&lt;code&gt;git clone&lt;/code&gt;に&lt;code&gt;--bare&lt;/code&gt;オプションを付けて実行すると作れる。&lt;/p&gt;

&lt;p&gt;ベアリポジトリにはプッシュしていい。
むしろプッシュしないベアリポジトリに意味はない。&lt;/p&gt;

&lt;p&gt;一方、開発リポジトリには(基本的に)プッシュしてはいけない。
これは、プッシュがリモートリポジトリのオブジェクトと参照だけ更新してワーキングディレクトリやインデックスは更新せず、開発者がプッシュされたことに気付けないため(※1)。
気付かないまま開発を進めてコミットを作ると、プッシュによって&lt;code&gt;HEAD&lt;/code&gt;が変わっていたりするため、コミットグラフが変な状態になってしまう。&lt;/p&gt;

&lt;p&gt;お互い示し合わせたうえでプッシュをしたりプッシュするブランチを工夫したりすれば問題が起きないようにできるはできる。&lt;/p&gt;

&lt;p&gt;(※1: と&lt;a href=&#34;https://www.oreilly.co.jp/books/9784873114408/&#34;&gt;O&amp;rsquo;Reillyの蝙蝠本&lt;/a&gt;には書いてあったが、これは&lt;a href=&#34;https://github.com/git/git/blob/master/Documentation/RelNotes/1.7.0.txt&#34;&gt;Git 1.6.xまでの話らしい&lt;/a&gt;。
今はチェックアウトされたブランチにはデフォルトでプッシュできないので、この節に書いた問題は基本的に起きない。
2.6.3で試したら以下のエラーになった。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-text&#34;&gt;remote: error: refusing to update checked out branch: refs/heads/master
remote: error: By default, updating the current branch in a non-bare repository
remote: error: is denied, because it will make the index and work tree inconsistent
remote: error: with what you pushed, and will require &#39;git reset --hard&#39; to match
remote: error: the work tree to HEAD.
remote: error:
remote: error: You can set &#39;receive.denyCurrentBranch&#39; configuration variable t
remote: error: &#39;ignore&#39; or &#39;warn&#39; in the remote repository to allow pushing int
remote: error: its current branch; however, this is not recommended unless you
remote: error: arranged to update its work tree to match what you pushed in som
remote: error: other way.
remote: error:
remote: error: To squelch this message and still keep the default behaviour, se
remote: error: &#39;receive.denyCurrentBranch&#39; configuration variable to &#39;refuse&#39;.
To file://C:/Users/Kaito/Desktop/master
 ! [remote rejected] master -&amp;gt; master (branch is currently checked out)
error: failed to push some refs to &#39;file://C:/Users/Kaito/Desktop/master&#39;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;)&lt;/p&gt;
</description>
        </item>
      
    
      
        <item>
          <title>Gitのマージを図解する</title>
          <link>http://tbd.kaitoy.xyz/2015/12/28/git-merge/</link>
          <pubDate>Mon, 28 Dec 2015 01:05:29 MST</pubDate>
          <author>Kaito Yamada</author>
          <guid>http://tbd.kaitoy.xyz/2015/12/28/git-merge/</guid>
          <description>

&lt;p&gt;このエントリでは、&lt;a href=&#34;https://git-scm.com/&#34;&gt;&lt;strong&gt;Git&lt;/strong&gt;&lt;/a&gt;が提供するマージのための機能の内、主なもの4つ、&lt;strong&gt;真のマージ&lt;/strong&gt;、&lt;strong&gt;リベース&lt;/strong&gt;、&lt;strong&gt;ファストフォワードマージ&lt;/strong&gt;、&lt;strong&gt;チェリーピック&lt;/strong&gt; について図解する。
ここでマージとは、とあるブランチのコミットが入れた修正を別のブランチに取り込むこととする。&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://tbd.kaitoy.xyz/2015/12/27/git-repository/&#34;&gt;この記事&lt;/a&gt;を事前に呼んでおくとわかりやすいかもしれない。&lt;/p&gt;

&lt;p&gt;ここで説明するマージは全てローカルリポジトリ内のブランチを操作対象とする。&lt;/p&gt;

&lt;h2 id=&#34;真のマージ&#34;&gt;真のマージ&lt;/h2&gt;

&lt;p&gt;真のマージは、複数のブランチでそれぞれ開発が進んでいて、つまりそれぞれのコミットグラフが伸びている場合に、それらの修正を統合するときに実行する。
マージするブランチはいくつでも指定できる。&lt;/p&gt;

&lt;p&gt;基本的なコマンドは&lt;code&gt;git merge &amp;lt;ブランチ(複数可)&amp;gt;&lt;/code&gt;。&lt;/p&gt;

&lt;p&gt;操作に成功すると、マージ後のプロジェクトの状態を表すコミット(マージコミット)が作られ、カレントブランチの先頭に追加される。
マージコミットは、マージした全てのブランチが指していたコミットを親として持つ。&lt;/p&gt;

&lt;p&gt;このマージはマージコミットを追加するだけであり、既存のコミットを一切変更しないことを認識しておくべし。&lt;/p&gt;

&lt;p&gt;以下、真のマージの実行例を図示する。&lt;/p&gt;

&lt;ul class=&#34;bxslider&#34;&gt;
  &lt;li&gt;&lt;img src=&#34;http://tbd.kaitoy.xyz/images/git-merge/git_merge/スライド1.PNG&#34; /&gt;&lt;/li&gt;
  &lt;li&gt;&lt;img src=&#34;http://tbd.kaitoy.xyz/images/git-merge/git_merge/スライド2.PNG&#34; /&gt;&lt;/li&gt;
  &lt;li&gt;&lt;img src=&#34;http://tbd.kaitoy.xyz/images/git-merge/git_merge/スライド3.PNG&#34; /&gt;&lt;/li&gt;
  &lt;li&gt;&lt;img src=&#34;http://tbd.kaitoy.xyz/images/git-merge/git_merge/スライド4.PNG&#34; /&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;リベース&#34;&gt;リベース&lt;/h2&gt;

&lt;p&gt;リベースは、あるブランチで作った一連のコミットの起点(ベース)を移動したいときに実行する。
この操作は一般的にはマージとは呼ばれないが、冒頭に書いたマージの定義からするとマージと見なせないこともないのでここに挙げる。&lt;/p&gt;

&lt;p&gt;基本的なコマンドは&lt;code&gt;git rebase &amp;lt;ブランチ&amp;gt;&lt;/code&gt;。
このコマンドは、カレントブランチの起点を指定したブランチが指すコミットに移動する。&lt;/p&gt;

&lt;p&gt;この操作に成功すると、カレントブランチで作ったコミットは(実質)消え、それと同等の修正をもたらす別のコミットが移動先のコミットを起点として作成される。(※1)&lt;/p&gt;

&lt;p&gt;リベースは既存のコミットを消し、コミットグラフを変更してしまうということを認識しておくべし。&lt;/p&gt;

&lt;p&gt;以下、リベースの簡単な実行例を図示する。&lt;/p&gt;

&lt;ul class=&#34;bxslider&#34;&gt;
  &lt;li&gt;&lt;img src=&#34;http://tbd.kaitoy.xyz/images/git-merge/git_rebase/スライド1.PNG&#34; /&gt;&lt;/li&gt;
  &lt;li&gt;&lt;img src=&#34;http://tbd.kaitoy.xyz/images/git-merge/git_rebase/スライド2.PNG&#34; /&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;br&gt;&lt;/p&gt;

&lt;p&gt;上のスライドのように単純なコミットグラフならいいが、リベースするブランチが分岐していたりするとややこしいことが起き得る。
そういうケースには&lt;a href=&#34;https://www.oreilly.co.jp/books/9784873114408/&#34;&gt;O&amp;rsquo;Reillyの蝙蝠本&lt;/a&gt;などでよく勉強してから臨むべし。&lt;/p&gt;

&lt;p&gt;(※1: より正確には&lt;code&gt;git rebase &amp;lt;ブランチ&amp;gt;&lt;/code&gt;は、&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;カレントブランチで作った各コミットが入れた変更をパッチにして、&lt;/li&gt;
&lt;li&gt;それを古い順に一つずつ、指定したブランチが指すコミットに適用しながら新しいコミットを作り、&lt;/li&gt;
&lt;li&gt;カレントブランチが指しているコミットを&lt;code&gt;ORIG_HEAD&lt;/code&gt;で指し、&lt;/li&gt;
&lt;li&gt;カレントブランチを最新のコミットを指すよう更新する。&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;2で、指定したブランチが既にチェリーピック(後述)などでカレントブランチのとあるコミットの変更を取り込んでいた場合、そのコミットのパッチの適用はスキップされ、そのパッチによるコミットも作られない。&lt;/p&gt;

&lt;p&gt;また、上でカレントブランチのコミットは実質消えると書いたが、当面はオブジェクトが本当に消えるわけではないし、&lt;code&gt;ORIG_HEAD&lt;/code&gt;とかが指しているのでもどることもできる。)&lt;/p&gt;

&lt;h2 id=&#34;ファストフォワードマージ&#34;&gt;ファストフォワードマージ&lt;/h2&gt;

&lt;p&gt;ファストフォワードマージは、マージ先のコミットが全てマージ元に含まれているときに使えるマージ。
この操作は既存のコミットグラフをいじらないしマージコミットも作らない特殊なマージ。
(実のところマージじゃないと言ってもいい。)
このマージを実行した後は、コミットグラフは一直線になり、ブランチを作らずにコミットを作った場合と同様になる。&lt;/p&gt;

&lt;p&gt;このマージは、&lt;code&gt;git merge &amp;lt;ブランチ&amp;gt;&lt;/code&gt;を実行したときに可能であれば実行される。
(でなければ真のマージが実行される。オプションで選択することもできる。)&lt;/p&gt;

&lt;p&gt;以下にファストフォワードマージの例を図示する。&lt;/p&gt;

&lt;ul class=&#34;bxslider&#34;&gt;
  &lt;li&gt;&lt;img src=&#34;http://tbd.kaitoy.xyz/images/git-merge/git_ff/スライド1.PNG&#34; /&gt;&lt;/li&gt;
  &lt;li&gt;&lt;img src=&#34;http://tbd.kaitoy.xyz/images/git-merge/git_ff/スライド2.PNG&#34; /&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;br&gt;&lt;/p&gt;

&lt;p&gt;ファストフォワードマージはよくリベースとともに実行される。
リベースのスライドの最後のページの図は、ここのスライドの最初のページの図と同じになっている。&lt;/p&gt;

&lt;p&gt;リベース + ファストフォワードは、トピックブランチで入れた修正を、そのブランチを作ったという履歴を残さずに別のブランチに取り入れたいときなどに使う手法。
マージコミットを作る手法よりもコミットグラフをシンプルに保てる。&lt;/p&gt;

&lt;h2 id=&#34;チェリーピック&#34;&gt;チェリーピック&lt;/h2&gt;

&lt;p&gt;チェリーピックは、あるブランチの任意のコミットによる修正を別のブランチに取り込みたいときに実行する。
他の3つのマージに比べて分かりやすい操作であり、また操作対象にするブランチやコミットの自由度が高いので使いやすい。
その反面、コミットログなどに明記しないとどこのコミットをマージしたのかが分からなくなる。&lt;/p&gt;

&lt;p&gt;基本的なコマンドは&lt;code&gt;git cherry-pick &amp;lt;コミット&amp;gt;&lt;/code&gt;。&lt;/p&gt;

&lt;p&gt;操作に成功すると、指定したコミットと同等の修正をもたらす新しいコミットが作成され、&lt;code&gt;HEAD&lt;/code&gt;に追加される。&lt;/p&gt;

&lt;p&gt;この操作はコミットを追加するだけであり、既存のコミットは変更しない。&lt;/p&gt;

&lt;p&gt;以下にチェリーピックの例を図示する。&lt;/p&gt;

&lt;ul class=&#34;bxslider&#34;&gt;
  &lt;li&gt;&lt;img src=&#34;http://tbd.kaitoy.xyz/images/git-merge/git_cherry-pick/スライド1.PNG&#34; /&gt;&lt;/li&gt;
  &lt;li&gt;&lt;img src=&#34;http://tbd.kaitoy.xyz/images/git-merge/git_cherry-pick/スライド2.PNG&#34; /&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
        </item>
      
    
      
        <item>
          <title>Gitのリポジトリの中身をなるべく正確に理解する</title>
          <link>http://tbd.kaitoy.xyz/2015/12/27/git-repository/</link>
          <pubDate>Sun, 27 Dec 2015 11:34:18 MST</pubDate>
          <author>Kaito Yamada</author>
          <guid>http://tbd.kaitoy.xyz/2015/12/27/git-repository/</guid>
          <description>

&lt;p&gt;このエントリでは、&lt;a href=&#34;https://git-scm.com/&#34;&gt;&lt;strong&gt;Git&lt;/strong&gt;&lt;/a&gt;の基本的な使い方は理解している前提で、そのリポジトリの構造をなるべく正確に説明する。
ここに書いてあることは概ね、筆者が&lt;a href=&#34;https://www.oreilly.co.jp/books/9784873114408/&#34;&gt;O&amp;rsquo;Reillyの蝙蝠本&lt;/a&gt;を読んで得た知識に基づく。&lt;/p&gt;

&lt;p&gt;リポジトリの構造というとコアで上級者向けの知識のように聞こえるが、これをまず理解しておくことで強力で複雑なGitの機能を習得するのが非常に楽になる。
具体的には、Gitにおけるブランチの概念などの理解が深まったり、&lt;a href=&#34;http://tbd.kaitoy.xyz/2016/01/01/git-revert-reset/#git-reset&#34;&gt;&lt;code&gt;git reset&lt;/code&gt;&lt;/a&gt;などのGit特有で分かり辛いコマンドを自信をもって使えるようになったり、なにより、Gitを使う上での最大のハードルである &lt;strong&gt;インデックス&lt;/strong&gt; や &lt;strong&gt;HEAD&lt;/strong&gt; の概念を完璧に理解できるというメリットがある。&lt;/p&gt;

&lt;p&gt;チュートリアルを終えたくらいの初心者にこそ読んでほしいエントリである。&lt;/p&gt;

&lt;h1 id=&#34;gitリポジトリの中身&#34;&gt;Gitリポジトリの中身&lt;/h1&gt;

&lt;p&gt;Gitのリポジトリは、プロジェクトをクローンしたときとかにできる&lt;code&gt;.git&lt;/code&gt;ディレクトリ内に詰まっている。
このディレクトリには、&lt;strong&gt;オブジェクト格納領域&lt;/strong&gt; と &lt;strong&gt;インデックス&lt;/strong&gt; というデータ構造が入っている。
また、&lt;strong&gt;参照 (ref)&lt;/strong&gt; や &lt;strong&gt;シンボリック参照 (symref)&lt;/strong&gt; というものも入っている。&lt;/p&gt;

&lt;p&gt;以下、それぞれについて説明する。&lt;/p&gt;

&lt;h3 id=&#34;オブジェクト格納領域&#34;&gt;オブジェクト格納領域&lt;/h3&gt;

&lt;p&gt;オブジェクト格納領域は、ファイルシステム上では&lt;code&gt;.git/objects/&lt;/code&gt;以下にあたる。&lt;/p&gt;

&lt;p&gt;ここには、バージョン管理されているファイルの情報やそのコミット履歴などが保存されていて、具体的には以下の4種類のオブジェクトが置かれている。&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;ブロブ&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;一つのファイルを表すオブジェクト。
バージョン管理対象のファイルの内容(だけ)を保持する。&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;strong&gt;ツリー&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;一つのディレクトリを表すオブジェクト。ブロブや別のツリーを指すポインタを持ち、またそれらが表すファイル/ディレクトリの名前や属性を保持する。
つまり、これとブロブを組み合わせると、ファイルシステム上のディレクトリツリーを表すことができる。&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;strong&gt;コミット&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;一つのコミットを表すオブジェクト。コミット日時やログメッセージなどの情報と、一つ前のコミット(親コミット)を指すポインタと、一つのツリーを指すポインタを持つ。
このツリーはプロジェクトのルートディレクトリを表す。
つまり、一つのコミットは、プロジェクトのある時点でのディレクトリツリー全体を表してもいる。&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;strong&gt;タグ&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;一つの注釈付きタグ(&lt;code&gt;git tag -a&lt;/code&gt;で作るタグ)を表すオブジェクト。
タグ名やタグにつけたコメントなどの情報と、一つのオブジェクト(普通はコミット)へのポインタを持つ。
因みに軽量タグ(&lt;code&gt;git tag&lt;/code&gt;で作るタグ)はオブジェクトにならない。&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;ファイルシステム上で、一つのオブジェクトは一つのファイルに書き込まれ、&lt;a href=&#34;https://ja.wikipedia.org/wiki/Zlib&#34;&gt;zlib&lt;/a&gt;で圧縮され、&lt;code&gt;.git/objects/&lt;/code&gt;以下に配置される。
そのファイルへのパスには、オブジェクトのコンテンツから計算されたSHA1ハッシュの値(i.e. オブジェクトの名前)が使われる。
例えば&lt;code&gt;.git/objects/16/cacde1ddabe1698b0e41e091e4697313e2b7e5&lt;/code&gt;というファイルがあったら、これは &lt;strong&gt;16cacde1ddabe1698b0e41e091e4697313e2b7e5&lt;/strong&gt; という名のオブジェクトの実体。&lt;/p&gt;

&lt;p&gt;&lt;code&gt;git cat-file -p &amp;lt;SHA1ハッシュ&amp;gt;&lt;/code&gt;でオブジェクトのコンテンツを見れるので、いくつか見てみると面白い。&lt;/p&gt;

&lt;h3 id=&#34;インデックス&#34;&gt;インデックス&lt;/h3&gt;

&lt;p&gt;インデックスは、&lt;code&gt;git add&lt;/code&gt;の説明とかに出てくる「インデックス」とか「ステージング」とか呼ばれる機能を実現するためのデータ構造で、ファイルシステム上では&lt;code&gt;.git/index&lt;/code&gt;というバイナリファイルにあたる。&lt;/p&gt;

&lt;p&gt;インデックスは、プロジェクトのある時点でのディレクトリツリー全体を表すデータをもつ。
具体的には、プロジェクトの各ファイルについて、対応するブロブへのポインタと、プロジェクトルートディレクトリからの相対パスが記録されている。&lt;/p&gt;

&lt;p&gt;&lt;code&gt;git ls-files --stage&lt;/code&gt;で&lt;code&gt;.git/index&lt;/code&gt;の内容を見れる。&lt;/p&gt;

&lt;h3 id=&#34;オブジェクト格納領域とインデックスの図解&#34;&gt;オブジェクト格納領域とインデックスの図解&lt;/h3&gt;

&lt;p&gt;ワーキングディレクトリに変更を入れ、&lt;code&gt;git add&lt;/code&gt;、&lt;code&gt;git commit&lt;/code&gt;をする中で、オブジェクト格納領域とインデックスがどう変化するかを図にした。&lt;/p&gt;

&lt;ul class=&#34;bxslider&#34;&gt;
  &lt;li&gt;&lt;img src=&#34;http://tbd.kaitoy.xyz/images/git-repository/git_repo/スライド1.PNG&#34; /&gt;&lt;/li&gt;
  &lt;li&gt;&lt;img src=&#34;http://tbd.kaitoy.xyz/images/git-repository/git_repo/スライド2.PNG&#34; /&gt;&lt;/li&gt;
  &lt;li&gt;&lt;img src=&#34;http://tbd.kaitoy.xyz/images/git-repository/git_repo/スライド3.PNG&#34; /&gt;&lt;/li&gt;
  &lt;li&gt;&lt;img src=&#34;http://tbd.kaitoy.xyz/images/git-repository/git_repo/スライド4.PNG&#34; /&gt;&lt;/li&gt;
  &lt;li&gt;&lt;img src=&#34;http://tbd.kaitoy.xyz/images/git-repository/git_repo/スライド5.PNG&#34; /&gt;&lt;/li&gt;
  &lt;li&gt;&lt;img src=&#34;http://tbd.kaitoy.xyz/images/git-repository/git_repo/スライド6.PNG&#34; /&gt;&lt;/li&gt;
  &lt;li&gt;&lt;img src=&#34;http://tbd.kaitoy.xyz/images/git-repository/git_repo/スライド7.PNG&#34; /&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;(タグオブジェクトについては次の節で。)&lt;/p&gt;

&lt;p&gt;スライドの1ページ目や最後のページのようにワーキングディレクトリとインデックスとオブジェクト格納領域が同期していて、&lt;code&gt;git status&lt;/code&gt;を実行すると&lt;code&gt;nothing to commit, working directory clean&lt;/code&gt;と表示される状態をワーキングディレクトリがクリーンであると言い、そうでない状態をワーキングディレクトリがダーティであると言う。&lt;/p&gt;

&lt;p&gt;このスライドにより、Gitがファイルの履歴をどう記録しているかがよく分かるはず。
特に、ブロブが常にファイルのある時点の内容全体を保持していて、Gitが(&lt;a href=&#34;https://subversion.apache.org/&#34;&gt;Subversion&lt;/a&gt;のように)差分を保存しているわけではないことは覚えておくべし。&lt;/p&gt;

&lt;p&gt;スライドの最後のページのオブジェクト格納領域の図で、ツリーとブロブとそれらを指す矢印を省略すると、Gitのブランチ等の説明でよく見かける丸が矢印で連なった図(コミットグラフ)になる。以降の説明でそのような図を使うが、丸がコミットを意味していて、各コミットがルートツリーを指していることはよく認識しておくべし。&lt;/p&gt;

&lt;h3 id=&#34;参照-ref&#34;&gt;参照 (ref)&lt;/h3&gt;

&lt;p&gt;参照は、一つのオブジェクトを指し示すポインタのようなもので、普通はコミットオブジェクトを指す。
参照には、&lt;strong&gt;ローカルブランチ&lt;/strong&gt;、&lt;strong&gt;リモート追跡ブランチ&lt;/strong&gt;、&lt;strong&gt;タグ&lt;/strong&gt; の三種類がある。&lt;/p&gt;

&lt;p&gt;ファイルシステム上では&lt;code&gt;.git/refs/&lt;/code&gt;以下にある、指し示すオブジェクトのSHA1ハッシュ値が書かれただけのテキストファイルにあたる。
&lt;code&gt;.git/refs/heads/&lt;/code&gt;以下にローカルブランチ、&lt;code&gt;.git/refs/remotes/&lt;/code&gt;以下にリモート追跡ブランチ、&lt;code&gt;.git/refs/tags/&lt;/code&gt;以下にタグが置かれる。&lt;/p&gt;

&lt;p&gt;参照は、Gitコマンドなどにおいてコミットを指定する方法としてSHA1ハッシュ値の代わりに使える。
この時、参照の名前は上記ファイルシステム上のパスから&lt;code&gt;.git/&lt;/code&gt;を省いたものになる。
例えば&lt;code&gt;refs/heads/master&lt;/code&gt;。さらに、ディレクトリは省略できるので、同じ参照は&lt;code&gt;heads/master&lt;/code&gt;や単に&lt;code&gt;master&lt;/code&gt;とも書ける。&lt;/p&gt;

&lt;p&gt;ここで、ブランチやタグが単なる参照であるところに注目。
Subversionのようにリポジトリのコピーを作るのとはかなり異なる。
Gitのブランチを作るというのは単に参照を追加するだけだし、ブランチをチェックアウトするというのはブランチが指すコミットが指すツリーが表すディレクトリツリーをファイルシステムに展開するということ。
この実装によってGitのブランチが軽量で速いものになっている。&lt;/p&gt;

&lt;p&gt;ローカルブランチの挙動を以下に図示する。図中で、各コミットには便宜上ラベルとしてアルファベットを付けている。&lt;/p&gt;

&lt;ul class=&#34;bxslider&#34;&gt;
  &lt;li&gt;&lt;img src=&#34;http://tbd.kaitoy.xyz/images/git-repository/git_branch/スライド1.PNG&#34; /&gt;&lt;/li&gt;
  &lt;li&gt;&lt;img src=&#34;http://tbd.kaitoy.xyz/images/git-repository/git_branch/スライド2.PNG&#34; /&gt;&lt;/li&gt;
  &lt;li&gt;&lt;img src=&#34;http://tbd.kaitoy.xyz/images/git-repository/git_branch/スライド3.PNG&#34; /&gt;&lt;/li&gt;
  &lt;li&gt;&lt;img src=&#34;http://tbd.kaitoy.xyz/images/git-repository/git_branch/スライド4.PNG&#34; /&gt;&lt;/li&gt;
  &lt;li&gt;&lt;img src=&#34;http://tbd.kaitoy.xyz/images/git-repository/git_branch/スライド5.PNG&#34; /&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;このスライドの最後のページでmasterブランチが本流でbugfixブランチが支流かのように書いているが、実際は実装上それらに差はなく全く対等である。&lt;/p&gt;

&lt;p&gt;また、ブランチは単なる一方的な参照であり、コミットオブジェクトからはそれに全く関与しないことに注意。
ブランチを削除してもそれによってコミットが消えることはない(※1)し、また例えば、スライドの最後のページでbugfixブランチを削除したらXがどのブランチで作られたコミットなのかを知るすべはなくなる。&lt;/p&gt;

&lt;p&gt;(※1: ブランチを削除することにより到達不能になるコミットは、結果的に&lt;a href=&#34;https://git-scm.com/book/ja/v2/Git%E3%81%AE%E5%86%85%E5%81%B4-%E3%83%A1%E3%82%A4%E3%83%B3%E3%83%86%E3%83%8A%E3%83%B3%E3%82%B9%E3%81%A8%E3%83%87%E3%83%BC%E3%82%BF%E3%83%AA%E3%82%AB%E3%83%90%E3%83%AA&#34;&gt;&lt;code&gt;git gc&lt;/code&gt;&lt;/a&gt;により削除されはする。)&lt;/p&gt;

&lt;p&gt;&lt;br&gt;&lt;/p&gt;

&lt;p&gt;次に、タグの挙動を以下に図示する。&lt;/p&gt;

&lt;ul class=&#34;bxslider&#34;&gt;
  &lt;li&gt;&lt;img src=&#34;http://tbd.kaitoy.xyz/images/git-repository/git_tag/スライド1.PNG&#34; /&gt;&lt;/li&gt;
  &lt;li&gt;&lt;img src=&#34;http://tbd.kaitoy.xyz/images/git-repository/git_tag/スライド2.PNG&#34; /&gt;&lt;/li&gt;
  &lt;li&gt;&lt;img src=&#34;http://tbd.kaitoy.xyz/images/git-repository/git_tag/スライド3.PNG&#34; /&gt;&lt;/li&gt;
  &lt;li&gt;&lt;img src=&#34;http://tbd.kaitoy.xyz/images/git-repository/git_tag/スライド4.PNG&#34; /&gt;&lt;/li&gt;
  &lt;li&gt;&lt;img src=&#34;http://tbd.kaitoy.xyz/images/git-repository/git_tag/スライド5.PNG&#34; /&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;図中で、タグオブジェクトはオブジェクトなのでオブジェクト格納領域に入り、それを指す参照のタグは&lt;code&gt;.git/refs/&lt;/code&gt;に入る。&lt;/p&gt;

&lt;p&gt;&lt;br&gt;&lt;/p&gt;

&lt;p&gt;リモート追跡ブランチについては&lt;a href=&#34;http://tbd.kaitoy.xyz/2015/12/31/git-dvc/&#34;&gt;別のエントリ&lt;/a&gt;で書く。&lt;/p&gt;

&lt;h3 id=&#34;シンボリック参照-symref&#34;&gt;シンボリック参照 (symref)&lt;/h3&gt;

&lt;p&gt;シンボリック参照は参照やオブジェクトを指し示すポインタのようなもので、以下の四つがある。&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;HEAD&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;カレントブランチ、つまりチェックアウトしているブランチ(i.e. 参照)を指す。&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;strong&gt;ORIG_HEAD&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;code&gt;git merge&lt;/code&gt;や&lt;a href=&#34;http://tbd.kaitoy.xyz/2016/01/01/git-revert-reset/#git-reset&#34;&gt;&lt;code&gt;git reset&lt;/code&gt;&lt;/a&gt;でHEADが更新されたとき、更新前のHEADが指していたブランチが指していたコミットを指す。&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;strong&gt;FETCH_HEAD&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;最後にフェッチされたブランチの最新コミットを指す。&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;strong&gt;MERGE_HEAD&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;マージ操作中に作られ、HEADにマージされようとしているコミットを指す。&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;それぞれが、Gitコマンドなどにおいてコミットを指定する方法としてSHA1ハッシュ値の代わりに使える。&lt;/p&gt;

&lt;p&gt;ファイルシステム上では&lt;code&gt;.git/{HEAD,ORIG_HEAD,FETCH_HEAD,MERGE_HEAD}&lt;/code&gt;にあたり、全て単純なテキストファイルである。&lt;/p&gt;

&lt;p&gt;特によく使う&lt;code&gt;HEAD&lt;/code&gt;を図示すると以下のようになる。&lt;/p&gt;

&lt;ul class=&#34;bxslider&#34;&gt;
  &lt;li&gt;&lt;img src=&#34;http://tbd.kaitoy.xyz/images/git-repository/git_head/スライド1.PNG&#34; /&gt;&lt;/li&gt;
  &lt;li&gt;&lt;img src=&#34;http://tbd.kaitoy.xyz/images/git-repository/git_head/スライド2.PNG&#34; /&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;上図に見られるように、&lt;code&gt;HEAD&lt;/code&gt;は通常ブランチを指す。
実際に&lt;code&gt;.git/HEAD&lt;/code&gt;ファイルの中身を見ると以下の様になっていて、確かにブランチを指していることが見て取れる。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-text&#34;&gt;ref: refs/heads/master
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;gitコマンドの実行内容によっては&lt;code&gt;HEAD&lt;/code&gt;が直接コミットを指すようになることもあり、この場合は特に「detached HEAD」、つまり(ブランチから)切り離されたHEADと呼ばれる。&lt;/p&gt;

&lt;p&gt;スライドの1ページ目の状態では、だいたいのgitコマンドから見てコミットEと&lt;code&gt;master&lt;/code&gt;と&lt;code&gt;HEAD&lt;/code&gt;は等価であると考えていい。
つまり例えば、&lt;code&gt;git reset &amp;lt;コミットEのSHA1ハッシュ値&amp;gt;&lt;/code&gt;、&lt;code&gt;git reset master&lt;/code&gt;、&lt;code&gt;git reset HEAD&lt;/code&gt;は同じ結果になる。&lt;/p&gt;

&lt;p&gt;&lt;br&gt;&lt;/p&gt;

&lt;p&gt;以上がGitリポジトリの中身のほぼ全容。あとは設定ファイルとかフックスクリプトとかがあるだけ。&lt;/p&gt;
</description>
        </item>
      
    
      
        <item>
          <title>ReactをAtomパッケージ開発に使ってみた</title>
          <link>http://tbd.kaitoy.xyz/2015/12/21/hello-react/</link>
          <pubDate>Mon, 21 Dec 2015 00:07:28 MST</pubDate>
          <author>Kaito Yamada</author>
          <guid>http://tbd.kaitoy.xyz/2015/12/21/hello-react/</guid>
          <description>

&lt;p&gt;私は今&lt;a href=&#34;https://www.hpe.com/us/en/home.html&#34;&gt;HPE&lt;/a&gt;の&lt;a href=&#34;https://ja.wikipedia.org/wiki/%E3%83%95%E3%82%A9%E3%83%BC%E3%83%88%E3%83%BB%E3%82%B3%E3%83%AA%E3%83%B3%E3%82%BA_%28%E3%82%B3%E3%83%AD%E3%83%A9%E3%83%89%E5%B7%9E%29&#34;&gt;Fort Collins&lt;/a&gt;オフィスに居候している。
HPEは最近、&lt;a href=&#34;https://facebook.github.io/react/&#34;&gt;React&lt;/a&gt;を使ったUXフレームワークである&lt;a href=&#34;http://www.grommet.io/docs/&#34;&gt;Grommet&lt;/a&gt;を開発していて、私が扱っている製品もそれを使う兆しが見えてきた。
Grommetはいずれ仕事で触ることになりそうなので、まずはReactの勉強をと思い、&lt;a href=&#34;http://tbd.kaitoy.xyz/2015/12/19/atom-impress/&#34;&gt;とあるAtomパッケージ&lt;/a&gt;の開発に敢えて使ってみた。&lt;/p&gt;

&lt;p&gt;このエントリには、その作業の中で得た知識などについて書いた。
ただし、Reactを使った開発のノウハウみたいなものまでは得ていないので書いていない。&lt;/p&gt;

&lt;p&gt;(因みにGrommetは&lt;a href=&#34;https://github.com/grommet/grommet&#34;&gt;GitHub&lt;/a&gt;で公開されているが、ほとんど話題になっておらずスターも現時点で245しかついていない。。。)&lt;/p&gt;

&lt;h2 id=&#34;reactとは&#34;&gt;Reactとは&lt;/h2&gt;

&lt;p&gt;ReactはFacebookが開発しているWeb UIのフレームワークで、&lt;a href=&#34;https://ja.wikipedia.org/wiki/Model_View_Controller&#34;&gt;MVC&lt;/a&gt;のVだけを実装したもの。
2013年に最初のバージョンが公開され、世界中で流行ってきているらしい。&lt;/p&gt;

&lt;p&gt;その特徴(というかほぼ全容)は仮想DOM(&lt;a href=&#34;https://facebook.github.io/react/docs/glossary.html&#34;&gt;Virtual DOM&lt;/a&gt;)。
ReactのAPIを使うと、リアルDOMと一対一で対応する仮想DOMのツリーを作ることができ、UIを組み立てられる。
リアルDOMの構築や更新はReactが最適化された方法でやってくれるので、性能がいいUIができるらしい。
因みに、仮想DOM自体はReact特有の技術ではなく、別の実装もある。&lt;/p&gt;

&lt;p&gt;もう一つの特徴は&lt;a href=&#34;https://facebook.github.io/jsx/&#34;&gt;JSX&lt;/a&gt;。
これは、JavaScriptのコードの中で、XMLみたいな構文で仮想DOMを記述するための拡張構文。
これを使うとReactコードが見やすく簡単に書けるけど、当然普通のJavaScript実行環境では動かないので、プリコンパイルなどが必要になる。&lt;/p&gt;

&lt;p&gt;FacebookはReactを使った開発に&lt;a href=&#34;http://facebook.github.io/flux/docs/overview.html#content&#34;&gt;Flux&lt;/a&gt;というアーキテクチャの採用を推奨している。
FluxはMVCアーキテクチャに置き換わるもので、従来の複雑なデータフローに反発し、一方向のシンプルなデータフローを提供する。
Fluxは単なるアーキテクチャで、その全体の実装を支援するフレームワークは現時点では無い。
(多分。&lt;a href=&#34;https://facebook.github.io/relay/&#34;&gt;Relay&lt;/a&gt;が一部支援してくれるっぽい。)&lt;/p&gt;

&lt;h2 id=&#34;reactを触った感想&#34;&gt;Reactを触った感想&lt;/h2&gt;

&lt;p&gt;Reactは本当にちょっとしか触っていないので、あまりよく分かっていないんだろうけど、なんだか使いにくかった。&lt;/p&gt;

&lt;p&gt;Reactは仮想DOMを作るところしか助けてくれないので、他のことは全部自分でやらないといけない。
FacebookはReact用のウィジェットすら提供していない。
昔仕事で全部入りの&lt;a href=&#34;https://ja.wikipedia.org/wiki/Dojo_Toolkit&#34;&gt;Dojo&lt;/a&gt;を使っていたので、それとのギャップをすごい感じた。&lt;/p&gt;

&lt;p&gt;そのうえ、他のフレームワークやライブラリと組み合わせて使おうとすると仮想DOMが壁になってくる。普通のフレームワークはリアルDOMを扱うからだ。
例えば、JavaScriptを書いているとすぐ&lt;a href=&#34;https://jquery.com/&#34;&gt;jQuery&lt;/a&gt;を使いたくなるが、これでリアルDOMを直接いじってしまってはReactを使う意味がない気がする。&lt;/p&gt;

&lt;h2 id=&#34;atomパッケージでreactを使う&#34;&gt;AtomパッケージでReactを使う&lt;/h2&gt;

&lt;p&gt;Reactは&lt;a href=&#34;https://www.npmjs.com/&#34;&gt;npm&lt;/a&gt;でも提供されていて、Atomパッケージの開発に簡単に使える。
パッケージの&lt;code&gt;package.json&lt;/code&gt;の&lt;code&gt;dependencies&lt;/code&gt;に&lt;a href=&#34;https://www.npmjs.com/package/react&#34;&gt;react&lt;/a&gt;と&lt;a href=&#34;https://www.npmjs.com/package/react-dom&#34;&gt;react-dom&lt;/a&gt;を入れておけば、パッケージコード中で以下の様に仮想DOMを作れるようになる。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;var React = require(&#39;react&#39;);
var ReactDOM = require(&#39;react-dom&#39;);

class MyComponent extends React.Component {
  render() {
    return &amp;lt;div&amp;gt;Hello World&amp;lt;/div&amp;gt;;
  }
}

ReactDOM.render(&amp;lt;MyComponent /&amp;gt;, node);
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;babelによるjsxの手動コンパイル&#34;&gt;BabelによるJSXの手動コンパイル&lt;/h2&gt;

&lt;p&gt;JSXのコンパイルには&lt;a href=&#34;https://babeljs.io/&#34;&gt;Babel&lt;/a&gt;を使うのがいい。
手動コンパイルにはBabelのコマンドラインツールが必要で、これはnpmで提供されている。
npmコマンドはAtomに同梱されているので別途インストールは不要。&lt;/p&gt;

&lt;p&gt;以下が手順の詳細。&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;Babelのコマンドラインツールのインストール&lt;/p&gt;

&lt;p&gt;任意の場所で、&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;npm install -g babel-cli
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;を実行すると、Babelのコマンドラインツールがグローバルにインストールされ、任意の場所で&lt;code&gt;babel&lt;/code&gt;コマンドが使えるようになる。&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Babelの定義ファイル作成&lt;/p&gt;

&lt;p&gt;適当なフォルダ(プロジェクトのルートなど)に&lt;code&gt;.babelrc&lt;/code&gt;というBabelの定義ファイルを作り、以下を書いておく。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-json&#34;&gt;{
  &amp;quot;presets&amp;quot;: [&amp;quot;react&amp;quot;]
}
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Reactプラグインのインストール&lt;/p&gt;

&lt;p&gt;&lt;code&gt;.babelrc&lt;/code&gt;に書いた&lt;code&gt;presets&lt;/code&gt;の値は、コンパイルにReactプラグインを使うという意味。
なので、以下のコマンドでReactプラグインを(ローカルに)インストールする必要がある。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;cd &amp;lt;.babelrcを置いたフォルダ&amp;gt;
npm install babel-preset-react
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;コンパイル&lt;/p&gt;

&lt;p&gt;&lt;code&gt;babel&lt;/code&gt;コマンドでコンパイルを実行する。例えば以下を実行すると、&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;cd &amp;lt;.babelrcを置いたフォルダ&amp;gt;
babel src -d lib
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;code&gt;src/*.jsx&lt;/code&gt;がコンパイルされて、&lt;code&gt;lib/*.js&lt;/code&gt;に出力される。&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&#34;language-babelパッケージによるjsxの自動コンパイル&#34;&gt;language-babelパッケージによるJSXの自動コンパイル&lt;/h2&gt;

&lt;p&gt;上記Babelによるコンパイルは、Atomなら&lt;a href=&#34;https://atom.io/packages/language-babel&#34;&gt;language-babelパッケージ&lt;/a&gt;で自動化できる。&lt;/p&gt;

&lt;p&gt;以下、Atomパッケージの開発でlanguage-babelを利用する手順を書く。&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;language-babelのインストール&lt;/p&gt;

&lt;p&gt;language-babelをAtomのSettingsなどからインストールして、language-babelのSettingsで、&lt;code&gt;Allow Local Override&lt;/code&gt;にチェックを付ける。&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Babelの定義ファイル作成&lt;/p&gt;

&lt;p&gt;手動のと同じ内容の&lt;code&gt;.babelrc&lt;/code&gt;をパッケージプロジェクトのルートに置く。&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;package.json編集&lt;/p&gt;

&lt;p&gt;パッケージプロジェクトの&lt;code&gt;package.json&lt;/code&gt;の&lt;code&gt;dependencies&lt;/code&gt;の下あたりに以下の定義を追加して、BabelとReactプラグインへの依存を張る。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-json&#34;&gt;  &amp;quot;devDependencies&amp;quot;: {
    &amp;quot;babel-core&amp;quot;: &amp;quot;^6.1.2&amp;quot;,
    &amp;quot;babel-preset-react&amp;quot;: &amp;quot;^6.1.2&amp;quot;
  }
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;上記定義を追加したら、&lt;code&gt;apm install&lt;/code&gt;を実行して追加した依存をダウンロードする。&lt;/p&gt;

&lt;p&gt;因みに、&lt;code&gt;devDependencies&lt;/code&gt;は&lt;code&gt;dependencies&lt;/code&gt;と似てるけど、開発時だけに必要なモジュールを定義するプロパティ。
&lt;code&gt;devDependencies&lt;/code&gt;に書いたものは&lt;code&gt;apm install&lt;/code&gt;したときはダウンロードされるけど、パブリッシュされたものをインストールするときにはダウンロードされない。&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;language-babelの設定ファイル作成&lt;/p&gt;

&lt;p&gt;language-babelの設定は&lt;code&gt;.languagebabel&lt;/code&gt;というファイルにかく。
これに以下の様な内容を書いてパッケージプロジェクトのルートに置く。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-json&#34;&gt;{
  &amp;quot;babelMapsPath&amp;quot;:                   &amp;quot;lib&amp;quot;,
  &amp;quot;babelMapsAddUrl&amp;quot;:                 false,
  &amp;quot;babelSourcePath&amp;quot;:                 &amp;quot;src&amp;quot;,
  &amp;quot;babelTranspilePath&amp;quot;:              &amp;quot;lib&amp;quot;,
  &amp;quot;createMap&amp;quot;:                       false,
  &amp;quot;createTargetDirectories&amp;quot;:         true,
  &amp;quot;createTranspiledCode&amp;quot;:            true,
  &amp;quot;disableWhenNoBabelrcFileInPath&amp;quot;:  false,
  &amp;quot;suppressSourcePathMessages&amp;quot;:      true,
  &amp;quot;suppressTranspileOnSaveMessages&amp;quot;: false,
  &amp;quot;transpileOnSave&amp;quot;:                 true
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;これで、&lt;code&gt;&amp;lt;パッケージプロジェクトのルート&amp;gt;/src/*.jsx&lt;/code&gt;が、Atomで編集して保存したときにコンパイルされ、&lt;code&gt;&amp;lt;パッケージプロジェクトのルート&amp;gt;/lib/*.js&lt;/code&gt;に出力されるようになった。&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&#34;babelでjsxをコンパイルする場合の制限&#34;&gt;BabelでJSXをコンパイルする場合の制限&lt;/h2&gt;

&lt;p&gt;手動にしろ自動にしろ、JSXのコンパイルにBabelを使う場合、BabelがCoffeeScriptに対応していないので、CoffeeScript + JSXでは書けない。
JavaScript + JSXで書かないといけない。&lt;/p&gt;

&lt;h2 id=&#34;minified-exception&#34;&gt;Minified exception&lt;/h2&gt;

&lt;p&gt;React周りでバグを作りこんでエラーが発生した場合、コンソールに以下のようなエラーメッセージが出ることがある。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-text&#34;&gt;Uncaught Error: Minified exception occured; use the non-minified dev environment for the full error message and additional helpful warnings.
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;これではエラーの詳細はわからない。詳細を見たい場合は、AtomをDev Modeで開いておく必要がある。
(e.g. Atomのメニューバーの[View]&amp;gt;[Developer]&amp;gt;[Open In Dev Mode]から開く。)&lt;/p&gt;
</description>
        </item>
      
    
      
        <item>
          <title>impress.jsでのプレゼン資料作成をサポートするAtomパッケージ - impress</title>
          <link>http://tbd.kaitoy.xyz/2015/12/19/atom-impress/</link>
          <pubDate>Sat, 19 Dec 2015 23:37:08 MST</pubDate>
          <author>Kaito Yamada</author>
          <guid>http://tbd.kaitoy.xyz/2015/12/19/atom-impress/</guid>
          <description>

&lt;p&gt;&lt;a href=&#34;https://atom.io/&#34;&gt;&lt;strong&gt;Atom&lt;/strong&gt;&lt;/a&gt;のパッケージを作った話。&lt;/p&gt;

&lt;p&gt;ついでに、パッケージプロジェクト内で別のプロジェクトを取り込んで使いたい場合に、&lt;a href=&#34;https://git-scm.com/book/ja/v2/Git-%E3%81%AE%E3%81%95%E3%81%BE%E3%81%96%E3%81%BE%E3%81%AA%E3%83%84%E3%83%BC%E3%83%AB-%E3%82%B5%E3%83%96%E3%83%A2%E3%82%B8%E3%83%A5%E3%83%BC%E3%83%AB&#34;&gt;Gitのサブモジュール&lt;/a&gt;を使ってはダメという話。&lt;/p&gt;

&lt;h2 id=&#34;impress-js&#34;&gt;impress.js&lt;/h2&gt;

&lt;p&gt;&lt;a href=&#34;https://github.com/impress/impress.js&#34;&gt;&lt;strong&gt;impress.js&lt;/strong&gt;&lt;/a&gt;というJavaScriptライブラリがある。
HTML5とCSS3とJavaScriptでプレゼン資料を作るためのライブラリで、これを使うと、&lt;a href=&#34;https://products.office.com/ja-jp/powerpoint&#34;&gt;PowerPoint&lt;/a&gt;や&lt;a href=&#34;http://www.apple.com/jp/mac/keynote/&#34;&gt;Keynote&lt;/a&gt;といった従来のツールによるものからは一線を画す斬新な資料を作ることができる。&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://impress.github.io/impress.js/#/bored&#34;&gt;公式のデモ&lt;/a&gt;を見ればその魅力を堪能できる。&lt;/p&gt;

&lt;p&gt;デモを見ると分かるが、&lt;a href=&#34;https://prezi.com/&#34;&gt;&lt;strong&gt;Prezi&lt;/strong&gt;&lt;/a&gt;に触発されたライブラリだ。
Preziでも非常に新鮮な資料を作れるが、ほぼ有料で、また作成した資料をPreziのサーバに置かなければいけないので、仕事で使う資料作りには使いにくい。
その点impress.jsは、&lt;a href=&#34;https://ja.wikipedia.org/wiki/MIT_License&#34;&gt;MIT&lt;/a&gt;(と&lt;a href=&#34;https://ja.wikipedia.org/wiki/GNU_General_Public_License&#34;&gt;GPLv2&lt;/a&gt;)で公開されていて自由に無料で使えるのがよい。&lt;/p&gt;

&lt;p&gt;ただし、Preziがスライドという概念から大きく脱却しているのに対して、実のところimpress.jsで作れる資料はあくまでスライドベースだ。
従来のものに比べてスライドの並びに制約がなく、スライド間の遷移がダイナミックというだけだ。
impress.jsでもまあ工夫すればPreziのような資料は作れるが。
独自のオーサリングツール/ビューワに依存するPreziに対し、impress.jsは標準的なHTML/CSS/JavaScriptにだけ依存しているので、&lt;a href=&#34;https://jquery.com/&#34;&gt;jQuery&lt;/a&gt;などのWeb技術を活用してスライドを作れるという副次的なメリットはある。&lt;/p&gt;

&lt;p&gt;impress.jsは、2012年に最初のバージョンが公開されてからもう4年近く経つが、未だにそれほど広く使われている様子はない。
PowerPointが幅を利かせているせいもあるだろうが、その使い辛さから利用をためらう人が多いのではないだろうか。
impress.jsはあまりドキュメントが充実しているとは言えない。
&lt;a href=&#34;https://github.com/impress/impress.js#how-to-use-it&#34;&gt;GitHubに公開されているREADME&lt;/a&gt;には、使い方はソースを見よ、それで分からないなら使うなとある。
さらにソース中には、impress.jsを使うには、HTMLとCSSのスキルに加えてデザイナーのセンスも必要とある。
かなりハードルを上げている。&lt;/p&gt;

&lt;p&gt;このハードルをクリアしていたとしても、実際、impress.jsで資料を作るのはPowerPointに比べて10倍は大変だ。
impress.jsはスライド(impress.js用語ではステップ)間の遷移を制御してくれるだけで、各スライドのコンテンツを作るという部分に関してはなんのサポートも提供しない。
テンプレートもなければ、表やグラフを書く機能もなく、アニメーションも作れない。
そういうことをしたければ、自分で別途ライブラリを探して使うなりしないといけない。&lt;/p&gt;

&lt;p&gt;ちょっとした図を書くにも、テキストエディタでちまちまHTMLとCSSを書いて、ブラウザで表示して確認して、思った通りになっていなければディベロッパツールでデバッグして、Web UIでも書いていたんだっけという気になってくる。&lt;/p&gt;

&lt;h2 id=&#34;impressパッケージ&#34;&gt;impressパッケージ&lt;/h2&gt;

&lt;p&gt;そんな負担を少しでも軽くしたいと思って作ったのが&lt;a href=&#34;https://atom.io/packages/impress&#34;&gt;impressパッケージ&lt;/a&gt;。&lt;/p&gt;

&lt;p&gt;同じ目的のツール(i.e. オーサリングツール)は実は既に&lt;a href=&#34;https://github.com/impress/impress.js/wiki/Examples-and-demos#authoring-tools&#34;&gt;いくつかあった&lt;/a&gt;。
なかでも、&lt;a href=&#34;https://github.com/regebro/hovercraft&#34;&gt;Hovercraft!&lt;/a&gt;というのが高機能で便利そう。
ただ、これらはPowerPointほど自在にスライドを作れるまでには至っておらず、結局は仕上げにHTML/CSSを手でいじる作業が必要になる。(と思う。)
また、jQueryのプラグイン使ってかっこいいことしたいとか言う場合にも、手でコードを書かなければいけない。&lt;/p&gt;

&lt;p&gt;つまりテキストエディタを開かなければいけない。よってAtomを起動することになる。(私は。)&lt;/p&gt;

&lt;p&gt;であれば、オーサリングツールもAtomに統合されていた方が便利なんじゃないの?
というのがimpressパッケージを作った動機。&lt;/p&gt;

&lt;p&gt;まだ機能は少なくて、新規資料プロジェクトの雛形生成、&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://tbd.kaitoy.xyz/images/atom-impress/new_project.gif&#34; alt=&#34;new_project&#34; /&gt;
&lt;/p&gt;

&lt;p&gt;ステップをリスト表示するビュー表示、&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://tbd.kaitoy.xyz/images/atom-impress/step_list_view.gif&#34; alt=&#34;step_list_view&#34; /&gt;
&lt;/p&gt;

&lt;p&gt;プレビューができるだけ。&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://tbd.kaitoy.xyz/images/atom-impress/preview.gif&#34; alt=&#34;preview&#34; /&gt;
&lt;/p&gt;

&lt;p&gt;&lt;br&gt;&lt;/p&gt;

&lt;p&gt;ゆくゆくは、GUIでステップの配置や角度を編集する機能、GUIでステップ内の図を作成する機能を作りたい。
あとできればアニメーションを付ける機能とかも。
Hovercraft!みたいにHTML書かなくてもいいよ、というのを目指すつもりはなくて、あくまでもコーダーのための、コーディングを補助するツールを目指す。&lt;/p&gt;

&lt;h2 id=&#34;パッケージのサブモジュール&#34;&gt;パッケージのサブモジュール&lt;/h2&gt;

&lt;p&gt;impressパッケージは、新規資料プロジェクトの雛形生成機能などのため、impress.jsプロジェクト(の&lt;a href=&#34;https://github.com/kaitoy/impress.js&#34;&gt;フォーク&lt;/a&gt;)をサブモジュールとしてとりこんでいる。&lt;/p&gt;

&lt;p&gt;最初はGitのサブモジュールコマンド(&lt;code&gt;git submodule&lt;/code&gt;)を使って取り込んでいて、上手くいっているように見えたが、パブリッシュ後に次のような問題が発生した。
即ち、試しにimpressパッケージをインストールしてみたら、サブモジュールのフォルダの中身がからっぽだった。&lt;/p&gt;

&lt;p&gt;これは、Atomのパッケージマネージャがパッケージを&lt;a href=&#34;https://help.github.com/articles/about-releases/&#34;&gt;GitHub Releases&lt;/a&gt;から&lt;a href=&#34;http://tbd.kaitoy.xyz/2015/12/02/unpublish-atom-package/#%E6%B3%A8%E6%84%8F%E3%81%99%E3%81%B9%E3%81%8D%E7%82%B9-3-%E3%83%91%E3%83%83%E3%82%B1%E3%83%BC%E3%82%B8%E3%81%AE%E3%82%AD%E3%83%A3%E3%83%83%E3%82%B7%E3%83%A5&#34;&gt;ダウンロードしてインストールする&lt;/a&gt;からだ。サブモジュールの中身はGitHub Releasesに登録されるアーカイブに含まれない。このGitHub Releasesの挙動は、サブモジュールを含むGitプロジェクトをクローンした場合、&lt;a href=&#34;https://git-scm.com/book/ja/v2/Git-%E3%81%AE%E3%81%95%E3%81%BE%E3%81%96%E3%81%BE%E3%81%AA%E3%83%84%E3%83%BC%E3%83%AB-%E3%82%B5%E3%83%96%E3%83%A2%E3%82%B8%E3%83%A5%E3%83%BC%E3%83%AB#%E3%82%B5%E3%83%96%E3%83%A2%E3%82%B8%E3%83%A5%E3%83%BC%E3%83%AB%E3%82%92%E5%90%AB%E3%82%80%E3%83%97%E3%83%AD%E3%82%B8%E3%82%A7%E3%82%AF%E3%83%88%E3%81%AE%E3%82%AF%E3%83%AD%E3%83%BC%E3%83%B3&#34;&gt;デフォルトではサブモジュールはクローンされない&lt;/a&gt;というGitサブモジュールの仕様に関係しているのかもしれない。&lt;/p&gt;

&lt;p&gt;この問題をきっかけにGitサブモジュールについてちょっと調べてみた。
&lt;a href=&#34;https://www.oreilly.co.jp/books/9784873114408/&#34;&gt;蝙蝠本&lt;/a&gt;によると、Git開発チームはあまりサブモジュールコマンドの開発に熱心ではなく真面目に作らなかったらしい。
また、&lt;a href=&#34;http://japan.blogs.atlassian.com/2014/03/alternatives-to-git-submodule-git-subtree/&#34;&gt;あるブログ&lt;/a&gt;によればサブモジュールコマンドは大分まえからオワコンらしい。このブログによれば、今は多くの場合&lt;code&gt;git subtree&lt;/code&gt;を使うのがいいとのこと。&lt;code&gt;git subtree&lt;/code&gt;は蝙蝠本にも&lt;a href=&#34;https://git-scm.com/book/en/v2&#34;&gt;Pro Git&lt;/a&gt;にも載ってないのだが。&lt;/p&gt;

&lt;p&gt;&lt;code&gt;git subtree&lt;/code&gt;でプロジェクトを取り込んだ場合、親プロジェクトのクローン時にサブプロジェクトもデフォルトでクローンされる仕様だ。
(というか正しくは、サブモジュールと違って、子プロジェクトが親プロジェクトにマージされているから、一緒にクローンされるというだけ。)
これを使ってimpressパッケージを構成しなおしてみたら件の問題が解決した。
因みにやりかたは、impressパッケージプロジェクトのルートに&lt;code&gt;impress.js&lt;/code&gt;というフォルダを作った後、以下のコマンドを実行しただけ。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;git subtree add --prefix impress.js git@github.com:kaitoy/impress.js.git master --squash
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;br&gt;&lt;/p&gt;

&lt;p&gt;ということで、Atomのパッケージに別のプロジェクトを取り込んで使いたい場合は、&lt;code&gt;git submodule&lt;/code&gt;ではなく、&lt;code&gt;git subtree&lt;/code&gt;を使わないといけないという教訓を得た。&lt;/p&gt;
</description>
        </item>
      
    
      
        <item>
          <title>Pcap4JがSoftware Quality Award 2015で入賞</title>
          <link>http://tbd.kaitoy.xyz/2015/12/03/software-quality-award-2015/</link>
          <pubDate>Thu, 03 Dec 2015 12:28:24 MST</pubDate>
          <author>Kaito Yamada</author>
          <guid>http://tbd.kaitoy.xyz/2015/12/03/software-quality-award-2015/</guid>
          <description>&lt;p&gt;&lt;a href=&#34;http://www.teamed.io/&#34;&gt;Teamed.io&lt;/a&gt;が主催の、ソフトウェアの品質とその開発プロジェクトの品質への取り組みを競うコンテスト、&lt;a href=&#34;http://www.yegor256.com/2015/04/16/award.html&#34;&gt;Software Quality Award&lt;/a&gt;の第一回が2015年4月～11月にかけて開催された。
Teamed.ioのCTOであるYegorとは、彼のブログを和訳してここに載せている関係でたまにメールしているが、そのやりとりの中で誘われたので私も&lt;a href=&#34;https://github.com/kaitoy/pcap4j&#34;&gt;Pcap4J&lt;/a&gt;をひっさげてそれに参加した。&lt;/p&gt;

&lt;p&gt;優勝すると$4,096もらえるということではあったが、150以上のプロジェクトがエントリーしていて、&lt;a href=&#34;http://gulpjs.com/&#34;&gt;Gulp&lt;/a&gt;とか有名なものも入っていたので、どうせ全然ダメだろと思ってエントリー以来なにも対策しなかったが、なんと &lt;strong&gt;8位&lt;/strong&gt; 入賞を果たしてしまった。
まあ講評をみるとずいぶんこき下ろされてはいるが…&lt;/p&gt;

&lt;p&gt;因みに講評は以下の感じ。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;utilパッケージがあってそこにユーティリティクラスがある。クソだ。&lt;/li&gt;
&lt;li&gt;NULLが可変オブジェクトで使われている。例えば&lt;a href=&#34;https://github.com/kaitoy/pcap4j/blob/master/pcap4j-core/src/main/java/org/pcap4j/core/AbstractPcapAddress.java&#34;&gt;AbstractPcapAddress&lt;/a&gt;。クソだ。&lt;/li&gt;
&lt;li&gt;スタティックメソッドとスタティック変数が多すぎる。文字通りどこにでもある。pcap4j-packetfactory-staticという名のスタティックメソッドだらけのモジュールまである。&lt;/li&gt;
&lt;li&gt;JavaDocに一貫性がなく、未完なものもある。&lt;a href=&#34;https://github.com/kaitoy/pcap4j/blob/master/pcap4j-core/src/main/java/org/pcap4j/core/NotOpenException.java#L21-L23&#34;&gt;これ&lt;/a&gt;とか。&lt;/li&gt;
&lt;li&gt;ほんのちょっとのissuesとたった6つのプルリクエストしかない。コミットがissuesにリンクされてない。変更のトレーサビリティはほとんどゼロだ。&lt;/li&gt;
&lt;li&gt;リリース手順が自動化されていない。&lt;a href=&#34;https://github.com/kaitoy/pcap4j/releases&#34;&gt;リリース&lt;/a&gt;がドキュメントに書かれていない。&lt;/li&gt;
&lt;li&gt;静的解析してなくて、そのせいか乱雑なコードがたまにある。&lt;/li&gt;
&lt;li&gt;スコア: 3&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;静的解析くらいは導入しようかな…&lt;/p&gt;

&lt;p&gt;ユーティリティクラスとかNULLとかスタティックメソッドは使うのやめるつもりはないけど。&lt;/p&gt;

&lt;p&gt;そういえば、入賞者にはスポンサーである&lt;a href=&#34;https://www.jetbrains.com/products.html&#34;&gt;JetBrainsの製品&lt;/a&gt;の一年ライセンスがもらえることになっていたはずだが特に連絡がないな。&lt;/p&gt;
</description>
        </item>
      
    
      
        <item>
          <title>Atomパッケージをアンパブリッシュする</title>
          <link>http://tbd.kaitoy.xyz/2015/12/02/unpublish-atom-package/</link>
          <pubDate>Wed, 02 Dec 2015 11:23:02 MST</pubDate>
          <author>Kaito Yamada</author>
          <guid>http://tbd.kaitoy.xyz/2015/12/02/unpublish-atom-package/</guid>
          <description>

&lt;p&gt;&lt;a href=&#34;https://atom.io/&#34;&gt;&lt;strong&gt;Atom&lt;/strong&gt;&lt;/a&gt;のパッケージをリリースすることをパブシッシュというが、リリースを取り消すことをアンパブリッシュという。
この記事はそのアンパブリッシュのやり方などについて。&lt;/p&gt;

&lt;p&gt;筆者の環境は以下。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Windows 7 x64&lt;/li&gt;
&lt;li&gt;Atom 1.2.4&lt;/li&gt;
&lt;li&gt;Git for Windows 2.6.3&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;アンパブリッシュのやり方&#34;&gt;アンパブリッシュのやり方&lt;/h2&gt;

&lt;p&gt;リリースしたパッケージのプロジェクトのルートフォルダ(package.jsonがあるところ)に&lt;code&gt;cd&lt;/code&gt;して、&lt;code&gt;apm unpublish&lt;/code&gt;を実行するだけ。&lt;/p&gt;

&lt;p&gt;または、任意のフォルダで&lt;code&gt;apm unpublish &amp;lt;パッケージ名&amp;gt;&lt;/code&gt;を実行する。&lt;/p&gt;

&lt;p&gt;特定のバージョンだけアンパブリッシュしたい場合は、&lt;code&gt;apm unpublish &amp;lt;パッケージ名&amp;gt;@&amp;lt;バージョン&amp;gt;&lt;/code&gt;。例えば&lt;code&gt;apm unpublish disturb-me@0.1.0&lt;/code&gt;。&lt;/p&gt;

&lt;h2 id=&#34;注意すべき点-1-git-bashでアンパブリッシュするとエラー&#34;&gt;注意すべき点 1: Git Bashでアンパブリッシュするとエラー&lt;/h2&gt;

&lt;p&gt;&lt;a href=&#34;https://git-for-windows.github.io/&#34;&gt;Git for Windows&lt;/a&gt;のGit Bash上で、Windows版Atomに付属するapmで&lt;code&gt;apm unpublish&lt;/code&gt;を実行すると以下のエラーが出る。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-text&#34;&gt;Error: EINVAL, invalid argument
    at new Socket (net.js:157:18)
    at process.stdin (node.js:693:19)
    at Unpublish.module.exports.Unpublish.promptForConfirmation (C:\Users\Kaito\AppData\Local\atom\app-1.2.4\resources\app\apm\lib

\unpublish.js:87:48)
    at Unpublish.module.exports.Unpublish.run (C:\Users\Kaito\AppData\Local\atom\app-1.2.4\resources\app\apm\lib\unpublish.js:126:21)
    at Object.module.exports.run (C:\Users\Kaito\AppData\Local\atom\app-1.2.4\resources\app\apm\lib\apm-cli.js:226:32)
    at Object.&amp;lt;anonymous&amp;gt; (C:\Users\Kaito\AppData\Local\atom\app-1.2.4\resources\app\apm\lib\cli.js:6:7)
    at Object.&amp;lt;anonymous&amp;gt; (C:\Users\Kaito\AppData\Local\atom\app-1.2.4\resources\app\apm\lib\cli.js:17:4)
    at Module._compile (module.js:456:26)
    at Object.Module._extensions..js (module.js:474:10)
    at Module.load (module.js:356:32)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;br&gt;&lt;/p&gt;

&lt;p&gt;コマンドプロンプトでやるべし。&lt;/p&gt;

&lt;h2 id=&#34;注意すべき点-2-アンパブリッシュはパブリッシュの真逆じゃない&#34;&gt;注意すべき点 2: アンパブリッシュはパブリッシュの真逆じゃない&lt;/h2&gt;

&lt;p&gt;&lt;a href=&#34;http://tbd.kaitoy.xyz/2015/08/21/japanese-word-selection/#10-%E3%83%91%E3%83%96%E3%83%AA%E3%83%83%E3%82%B7%E3%83%A5&#34;&gt;以前の記事&lt;/a&gt;で
&lt;code&gt;apm publish&lt;/code&gt;は以下の処理をすると書いた。&lt;/p&gt;

&lt;blockquote&gt;
&lt;ol&gt;
&lt;li&gt;(初回のみ)パッケージ名をatom.ioに登録する。&lt;/li&gt;
&lt;li&gt;package.jsonのversionをインクリメントしてコミットする。&lt;code&gt;apm publish&lt;/code&gt;にminorを指定するので、0.1.0になる。代わりにmajorかpatchを指定すると、1.0.0か0.0.1になる。&lt;/li&gt;
&lt;li&gt;Gitのタグを作る。&lt;/li&gt;
&lt;li&gt;GitHubに変更とタグをpushする。&lt;/li&gt;
&lt;li&gt;atom.ioにパッケージを登録する。&lt;/li&gt;
&lt;/ol&gt;
&lt;/blockquote&gt;

&lt;p&gt;この内、&lt;code&gt;apm unpublish&lt;/code&gt;が取り消してくれるのは 5 だけ。&lt;/p&gt;

&lt;p&gt;3, 4 のタグ作成も取り消したいのであれば、&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;git tag -d v0.1.0
git push origin :v0.1.0
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;のようにして、ローカルリポジトリとリモートリポジトリ両方のタグを削除する。&lt;/p&gt;

&lt;p&gt;また、2 のpackage.jsonのversion変更を取り消したいのであれば、&lt;code&gt;git log&lt;/code&gt;で&lt;code&gt;Prepare 0.1.0 release&lt;/code&gt;みたいなログのコミットをさがしてそのハッシュをメモり、&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;git revert &amp;lt;ハッシュ&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;を実行して&lt;code&gt;git push&lt;/code&gt;。(上記&amp;lt;ハッシュ&amp;gt;の部分は、&lt;code&gt;apm publish&lt;/code&gt;後何もcommitしてないなら&lt;code&gt;HEAD&lt;/code&gt;でもよし。)&lt;/p&gt;

&lt;h2 id=&#34;注意すべき点-3-パッケージのキャッシュ&#34;&gt;注意すべき点 3: パッケージのキャッシュ&lt;/h2&gt;

&lt;p&gt;とあるパッケージ、仮に&lt;code&gt;hoge&lt;/code&gt;を開発していたとき、以下のような操作をした後に変な現象が起こった。&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;バージョン&lt;code&gt;0.1.0&lt;/code&gt;をパブリッシュ。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;hoge&lt;/code&gt;をちゃんとインストールできるかを確認するために、

&lt;ol&gt;
&lt;li&gt;&lt;code&gt;apm unlink hoge&lt;/code&gt;で&lt;code&gt;.atom\packages&lt;/code&gt;からリンクを削除。(&lt;a href=&#34;http://tbd.kaitoy.xyz/2015/08/21/japanese-word-selection/#11-%E3%83%91%E3%83%83%E3%82%B1%E3%83%BC%E3%82%B8%E3%81%AE%E3%82%A2%E3%83%83%E3%83%97%E3%83%87%E3%83%BC%E3%83%88%E3%81%AE%E9%96%8B%E7%99%BA&#34;&gt;以前&lt;/a&gt;、パブリッシュすると&lt;code&gt;.atom\packages&lt;/code&gt;にはパッケージの実ファイルが入ると書いたが、リンクのままだった。勘違い?)&lt;/li&gt;
&lt;li&gt;AtomのSettingsから&lt;code&gt;hoge&lt;/code&gt;をインストール。&lt;/li&gt;
&lt;/ol&gt;&lt;/li&gt;
&lt;li&gt;ちゃんとインストールできなかったので&lt;code&gt;apm unpublish hoge&lt;/code&gt;して、バージョンも戻す。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;hoge&lt;/code&gt;を修正して、再度&lt;code&gt;0.1.0&lt;/code&gt;としてパブリッシュ。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;hoge&lt;/code&gt;をちゃんとインストールできるかを再度確認するために、

&lt;ol&gt;
&lt;li&gt;&lt;code&gt;apm unlink hoge&lt;/code&gt;して、&lt;/li&gt;
&lt;li&gt;AtomのSettingsから&lt;code&gt;hoge&lt;/code&gt;をインストール。&lt;/li&gt;
&lt;/ol&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;これをしたら最終的になぜか修正前の&lt;code&gt;hoge&lt;/code&gt;がインストールされた。
どうやらキャッシュがある模様ということで、&lt;a href=&#34;https://github.com/atom/apm/blob/master/src/install.coffee&#34;&gt;apmのソース&lt;/a&gt;をみたら、パッケージのインストール中に以下のようなことをしていることがわかった。&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;AtomのサイトのREST API (&lt;a href=&#34;https://www.atom.io/api/packages/hoge/&#34;&gt;https://www.atom.io/api/packages/hoge/&lt;/a&gt;) からパッケージ情報を取得。&lt;/li&gt;
&lt;li&gt;また別のREST API (&lt;a href=&#34;https://www.atom.io/api/packages/hoge/versions/0.1.0/tarball&#34;&gt;https://www.atom.io/api/packages/hoge/versions/0.1.0/tarball&lt;/a&gt;) を実行して、パッケージのアーカイブ(tar.gz)をテンポラリフォルダにダウンロード。
どうもこれは実際にはGitHubの&lt;a href=&#34;https://help.github.com/articles/about-releases/&#34;&gt;Releases&lt;/a&gt;からダウンロードしている模様。
因みにGitHub Releasesのアーカイブは、リポジトリにタグが追加されると自動で作られる。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;npm install&lt;/code&gt;でそのアーカイブを指定してインストール。&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;この手順の 2 をやる前に、&lt;code&gt;.atom\.apm\hoge\0.1.0\package.tgz&lt;/code&gt;を探して、見つかるとダウンロードせずにこっちをインストールする。
ソースの雰囲気から、&lt;code&gt;.atom\.apm\&lt;/code&gt;に入っているのはキャッシュのようで、いつ作られるかはよくわからないが、これが上記変な現象の原因ぽい。&lt;/p&gt;

&lt;p&gt;ということで、&lt;code&gt;.atom\.apm\hoge\0.1.0\package.tgz&lt;/code&gt;を消して再度インストールしたら無事修正後の&lt;code&gt;hoge&lt;/code&gt;が入った。&lt;/p&gt;

&lt;p&gt;&lt;br&gt;&lt;/p&gt;

&lt;p&gt;このキャッシュの件や、&lt;code&gt;apm unpublish&lt;/code&gt;がパッケージのバージョンを戻さないところをみると、同じバージョンを再度パブリッシュするのはダメな操作なのかもしれない。
修正したかったらバージョンを上げろということなのかも。&lt;/p&gt;
</description>
        </item>
      
    
      
        <item>
          <title>ありがとうさようならjapanese-wrap</title>
          <link>http://tbd.kaitoy.xyz/2015/11/16/thanks-bye-bye-japanese-wrap/</link>
          <pubDate>Mon, 16 Nov 2015 22:38:11 MST</pubDate>
          <author>Kaito Yamada</author>
          <guid>http://tbd.kaitoy.xyz/2015/11/16/thanks-bye-bye-japanese-wrap/</guid>
          <description>&lt;p&gt;テキストエディタ&lt;a href=&#34;https://atom.io/&#34;&gt;Atom&lt;/a&gt;のとある有名なパッケージの話。&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://tbd.kaitoy.xyz/2015/08/21/japanese-word-selection/&#34;&gt;以前の記事&lt;/a&gt;でも触れた&lt;a href=&#34;https://github.com/raccy/japanese-wrap&#34;&gt;japanese-wrap&lt;/a&gt;。
日本語が画面の端でうまく改行(softwrap)してくれない問題を解決してくれるパッケージ。
Atomで日本語を書く殆どの人がインストールしているであろうパッケージだが、先日11/12にリリースされた&lt;a href=&#34;http://blog.atom.io/2015/11/12/atom-1-2.html&#34;&gt;Atom 1.2&lt;/a&gt;で&lt;a href=&#34;https://ja.wikipedia.org/wiki/CJK%E7%B5%B1%E5%90%88%E6%BC%A2%E5%AD%97&#34;&gt;CJK文字&lt;/a&gt; (中国語・日本語・朝鮮語・ベトナム語の文字)のsoftwrapへの対応が実装されたので、もはや不要になった。&lt;/p&gt;

&lt;p&gt;むしろ、Atom 1.2でjapanese-wrapを有効にすると、以下のように残念なことになる。&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://tbd.kaitoy.xyz/images/thanks-bye-bye-japanese-wrap/w-japanese-wrap.jpg&#34; alt=&#34;project tree&#34; /&gt;
&lt;/p&gt;

&lt;p&gt;&lt;br&gt;&lt;/p&gt;

&lt;p&gt;japanese-wrapにはずっとお世話になってきたので申し訳なく名残惜しくもあるが、AtomのSettingsからDisableまたはUninstallさせてもらうしかあるまい。すると以下の様に直る。&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://tbd.kaitoy.xyz/images/thanks-bye-bye-japanese-wrap/wo-japanese-wrap.jpg&#34; alt=&#34;project tree&#34; /&gt;
&lt;/p&gt;

&lt;p&gt;&lt;br&gt;&lt;/p&gt;

&lt;p&gt;ありがとうさようならjapanese-wrap。&lt;/p&gt;
</description>
        </item>
      
    
      
        <item>
          <title>よいオブジェクトの七つの美徳</title>
          <link>http://tbd.kaitoy.xyz/2015/10/28/seven-virtues-of-good-object/</link>
          <pubDate>Wed, 28 Oct 2015 13:38:47 MDT</pubDate>
          <author>Kaito Yamada</author>
          <guid>http://tbd.kaitoy.xyz/2015/10/28/seven-virtues-of-good-object/</guid>
          <description>

&lt;p&gt;このエントリでは、Yegor Bugayenkoによる記事、&lt;a href=&#34;http://tbd.kaitoy.xyz/2015/10/28/seven-virtues-of-good-object/&#34;&gt;Seven Virtues of a Good Object&lt;/a&gt;を紹介する。
(Yegorから和訳と転載の許可は得た。)
以下はその全文の和訳だが、意訳超訳が混じっているので、もとのニュアンスを知りたければ元記事を読んでもいいし、読まなくてもいい。&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;Martin Fowler&lt;a href=&#34;http://martinfowler.com/bliki/InversionOfControl.html&#34;&gt;曰く&lt;/a&gt;、&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;ライブラリは本質的には呼び出し可能な関数の集合で、最近は普通クラス内にまとめられる。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;クラス内にまとめられた関数?
失礼を承知で言わせてもらうが、これは間違っている。
そして、これはオブジェクト指向プログラミングにおいて、クラスに対する非常に一般的な誤解だ。
クラスは関数をまとめるものではないし、オブジェクトはデータ構造体ではない。&lt;/p&gt;

&lt;p&gt;では、なにが適切なオブジェクトなのか?
どれが不適切なオブジェクトなのか?
その違いは何か?
これは論争を呼ぶ主題ではあるが、とても重要だ。
オブジェクトが何かを理解しなければ、オブジェクト指向ソフトウェアをどうやって書くんだ?
まあ、JavaやRubyなどのおかげで、書けることは書ける。
しかし、はたして良いものができるだろうか?
不幸にも、これは厳密な科学ではなく、様々な意見がある。
ここに、良いオブジェクトの特性を私なりにリストアップする。&lt;/p&gt;

&lt;h1 id=&#34;クラス-vs-オブジェクト&#34;&gt;クラス vs オブジェクト&lt;/h1&gt;

&lt;p&gt;&lt;img alt=&#34;good-object-1.png&#34; src=&#34;http://tbd.kaitoy.xyz/images/seven-virtues-of-good-object/good-object-1.png&#34; width=&#34;300&#34; style=&#34;margin: 0px auto; display: block;&#34;&gt;&lt;/p&gt;

&lt;p&gt;オブジェクトについて議論を始める前に、クラスとは何かを定義しよう。
それはオブジェクトが生まれる(インスタント化される)場所だ。
クラスの主な責任は、要求に応じて新しいオブジェクトを構築し、使われなくなったオブジェクトを破壊することだ。
クラスはその子供たちがどのように見えどのように振る舞うべきかを知っている。
言い換えれば、子供たちが従うべき契約を知っている。&lt;/p&gt;

&lt;p&gt;クラスが「オブジェクトのテンプレート」であると言われることもある。(例えば&lt;a href=&#34;https://ja.wikipedia.org/wiki/%E3%82%AF%E3%83%A9%E3%82%B9_%28%E3%82%B3%E3%83%B3%E3%83%94%E3%83%A5%E3%83%BC%E3%82%BF%29&#34;&gt;Wikipediaにはそう書いてある&lt;/a&gt;。)
この定義はクラスを受動的なポジションに置いているので正しくない。
この定義は、だれかがテンプレートを取得してそこからオブジェクトを構築するということを想定している。
これは、技術的には正しいかもしれないが、概念的には間違っている。
クラスとその子供たちだけが居るのであって、他の誰も関係すべきではない。
あるオブジェクトがクラスに他のオブジェクトを作るように頼み、そのクラスがオブジェクトを構築する。それだけだ。
RubyはJavaやC++に比べてこの概念をかなりうまく表現している。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;photo = File.new(&#39;/tmp/photo.png&#39;)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;code&gt;photo&lt;/code&gt;オブジェクトは&lt;code&gt;File&lt;/code&gt;クラスによって構築される。(&lt;code&gt;new&lt;/code&gt;はそのクラスへのエントリポイント。)
オブジェクトは、いったん構築されると、自身に基づいて行動する。
オブジェクトは、自身を誰が構築したかとか、何人兄弟姉妹がいるかとかを知っているべきではない。
そう、&lt;a href=&#34;https://ja.wikipedia.org/wiki/%E3%83%AA%E3%83%95%E3%83%AC%E3%82%AF%E3%82%B7%E3%83%A7%E3%83%B3_%28%E6%83%85%E5%A0%B1%E5%B7%A5%E5%AD%A6%29&#34;&gt;リフレクション&lt;/a&gt;は酷いアイデアだと言っている。
それについては他の記事で詳しく書くとして、ここでは、オブジェクトについてと、その最高と最悪の両面について話そう。&lt;/p&gt;

&lt;h1 id=&#34;1-彼は実世界に存在している&#34;&gt;1. 彼は実世界に存在している&lt;/h1&gt;

&lt;p&gt;&lt;img alt=&#34;good-object-2.png&#34; src=&#34;http://tbd.kaitoy.xyz/images/seven-virtues-of-good-object/good-object-2.png&#34; width=&#34;300&#34; style=&#34;margin: 0px auto; display: block;&#34;&gt;&lt;/p&gt;

&lt;p&gt;まず第一に、オブジェクトは生きた有機体だ。
もっと言えば、オブジェクトは&lt;a href=&#34;https://ja.wikipedia.org/wiki/%E6%93%AC%E4%BA%BA%E5%8C%96&#34;&gt;擬人化&lt;/a&gt;されるべきだ。
つまり、人間(もしくは、君がより好むならペット)のように扱われるべきだ。
基本的にこれは、オブジェクトはデータ構造体や関数の集合ではないということを意味している。
代わりに、オブジェクトは独立したエンティティで、それ自身のライフサイクル、振る舞い、性質を持つ。&lt;/p&gt;

&lt;p&gt;従業員、部署、HTTPリクエスト、MySQLのテーブル、ファイルの行、ファイルそのもの、これらは適切なオブジェクトだ。
なぜならこれらは、ソフトウェアを停止した時でも実世界に存在しているから。
より正確には、オブジェクトは実世界のモノの表現のひとつだ。
オブジェクトは実世界のモノと他のオブジェクトとの間のプロキシだ。
そのようなモノが存在しなければ、明らかにオブジェクトは存在しない。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;photo = File.new(&#39;/tmp/photo.png&#39;)
puts photo.width()
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;この例では、&lt;code&gt;File&lt;/code&gt;に新しいオブジェクト&lt;code&gt;photo&lt;/code&gt;を構築するよう頼んでいる。
&lt;code&gt;photo&lt;/code&gt;はディスク上の実際のファイルの表現となる。
ファイルもまた仮想のもので、コンピュータが起動している間だけ存在すると言う人がいるかもしれない。
それには私も同意し、「実世界」の定義を次のように改善しよう。
オブジェクトが住むプログラムの範囲外に存在する全てのもの。
ディスク上のファイルはプログラムの範囲外にあり、その表現をプログラム内に作成することは完全に正しいことと言える。&lt;/p&gt;

&lt;p&gt;コントローラ、パーサ、フィルタ、バリデータ、サービスロケータ、シングルトン、ファクトリー、これれは良いオブジェクトではない。(そう、ほとんどのGoFパターンはアンチパターンだ!)
これらはソフトウェアの外側、実世界に存在していない。
他のオブジェクト同士を結びつけるためだけに考案されたものだ。
人工的で偽のモノだ。何も表現していない。
真面目な話、XMLパーサ、これが表現するものはなんだ?
何もない。&lt;/p&gt;

&lt;p&gt;上記オブジェクトのいくつかは名前を変えれば良いオブジェクトになる。他のものは決して存在を許されない。
例えば、XMLパーサは「パース可能なXML」と改名でき、プログラム外に存在するXMLドキュメントを表現するようになる。&lt;/p&gt;

&lt;p&gt;常に、「このオブジェクトの背後にある実世界のエンティティは何か?」を自問しよう。
もし回答が見つからなければ、リファクタリングを考えるときだ。&lt;/p&gt;

&lt;h1 id=&#34;2-彼は契約によって働く&#34;&gt;2. 彼は契約によって働く&lt;/h1&gt;

&lt;p&gt;&lt;img alt=&#34;good-object-3.png&#34; src=&#34;http://tbd.kaitoy.xyz/images/seven-virtues-of-good-object/good-object-3.png&#34; width=&#34;300&#34; style=&#34;margin: 0px auto; display: block;&#34;&gt;&lt;/p&gt;

&lt;p&gt;良いオブジェクトは常に契約によって働く。
彼は、個人的な実力ではなく、契約に従うということを理由に雇われることを期待している。
一方、我々がオブジェクトを雇うとき、差別待遇をして、特定のクラスの特定のオブジェクトが我々のために働いてくれると期待してはいけない。
どんなオブジェクトも契約通りのことをすると考えるべきだ。
オブジェクトが期待通りの働きをしている限りは、彼の出生や性別や信仰に興味を持つべきではない。&lt;/p&gt;

&lt;p&gt;例えば、ある写真をスクリーンに表示したいとする。その写真はPNGフォーマットのファイルから読みこまれる。
私は&lt;code&gt;DataFile&lt;/code&gt;クラスのオブジェクトと契約を結び、その画像のバイナリコンテンツをくれるよう頼む。&lt;/p&gt;

&lt;p&gt;しかし待ってほしい。私はそのデータが厳密にどこから来るかを気にするだろうか?
ディスク上のファイル、HTTPリクエスト、Dropbox上のドキュメントかもしれないが、実際私は気にしない。
私が気にするのは、オブジェクトがPNGデータが入ったバイト配列をくれるということだけだ。
つまり、私が結ぶ契約は以下のようなものだ。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;interface Binary {
  byte[] read();
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;この場合、(DataFileクラスだけでなく)どんなクラスのどんなオブジェクトでも私のもとで働くことができる。
オブジェクトが働く資格を得るためにすべきは、&lt;code&gt;Binary&lt;/code&gt;インターフェースを実装することにより、契約に従うということだけだ。&lt;/p&gt;

&lt;p&gt;この際のルールは単純で、良いオブジェクトの全てのpublicメソッドは、インターフェースのものを実装すべきだということだ。
もしオブジェクトがインターフェースから継承していないpublicメソッドを持っていたら、それはダメな設計だ。&lt;/p&gt;

&lt;p&gt;これには実用的な理由が二つある。
第一に、無契約で働いているオブジェクトは、ユニットテストで使うモックが作れない。
第二に、無契約なオブジェクトは&lt;a href=&#34;https://ja.wikipedia.org/wiki/Decorator_%E3%83%91%E3%82%BF%E3%83%BC%E3%83%B3&#34;&gt;デコレータ&lt;/a&gt;で拡張できない。&lt;/p&gt;

&lt;h1 id=&#34;3-彼はユニーク&#34;&gt;3. 彼はユニーク&lt;/h1&gt;

&lt;p&gt;良いオブジェクトは常に、ユニークであるために何かを内包しているべきだ。
何も内包していないと、そのオブジェクトとまったく同じクローンが存在し得ることになる。私はこれはダメなことだと考えている。
以下がクローンが存在し得る悪いオブジェクトの例。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;class HTTPStatus implements Status {
  private URL page = new URL(&amp;quot;http://www.google.com&amp;quot;);
  @Override
  public int read() throws IOException {
    return HttpURLConnection.class.cast(
      this.page.openConnection()
    ).getResponseCode();
  }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;code&gt;HTTPStatus&lt;/code&gt;クラスのインスタンスは複数作れ、それら全ては互いに等しい。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;first = new HTTPStatus();
second = new HTTPStatus();
assert first.equals(second);
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;明らかにユーティリティクラスは、スタティックメソッドだけを持つので、よいオブジェクトにインスタンス化できない。
より一般的には、ユーティリティクラスはこの記事で述べられているどのメリットも持たず、「クラス」と呼ぶことさえできない。
ユーティリティクラスは単純にオブジェクトパラダイムの酷い乱用で、モダンなオブジェクト指向言語の作者がスタティックメソッドを有効にしたせいで存在している。&lt;/p&gt;

&lt;h1 id=&#34;4-彼は不変-immutable&#34;&gt;4. 彼は不変(Immutable)&lt;/h1&gt;

&lt;p&gt;良いオブジェクトは内包する状態を決して変えるべきではない。
オブジェクトは実世界のエンティティの表現であることを思い出してほしい。このエンティティは、オブジェクトが存続する間は変化しないはずだ。
言い換えれば、オブジェクトはそれが表すエンティティに決して背いてはいけない。
オブジェクトがその所有者を変化させることはないよね。&lt;/p&gt;

&lt;p&gt;不変であることが、全てのメソッドが常に同じ値を返すことを意味するわけではないことに注意してほしい。
むしろ、良い不変オブジェクトはとても動的だ。
しかし、それは内部状態を変えることはない。例えば、&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;@Immutable
final class HTTPStatus implements Status {
  private URL page;
  public HTTPStatus(URL url) {
    this.page = url;
  }
  @Override
  public int read() throws IOException {
    return HttpURLConnection.class.cast(
      this.page.openConnection()
    ).getResponseCode();
  }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;code&gt;read()&lt;/code&gt;メソッドは異なる値を返す可能性があるが、このオブジェクトは不変だ。
ある一つのウェブページを指し、他のどこを指すこともない。
内包する状態を決して変えないし、表現しているURLに背くこともない。&lt;/p&gt;

&lt;p&gt;なぜこの不変性が美徳なのか?
次の記事で詳細を説明している: &lt;a href=&#34;http://www.yegor256.com/2014/06/09/objects-should-be-immutable.html&#34;&gt;オブジェクトは不変であるべきだ&lt;/a&gt;。
要するに、不変オブジェクトが優れている理由は、&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;不変オブジェクトは簡単に構築、テスト、使用できる。&lt;/li&gt;
&lt;li&gt;真の不変オブジェクトは常にスレッドセーフ。&lt;/li&gt;
&lt;li&gt;時間的結合(訳注: コードの実行順の暗黙的な制約)を回避するのに役立つ。&lt;/li&gt;
&lt;li&gt;不変オブジェクトを使っても副作用がおきない。(防御的コピー無)&lt;/li&gt;
&lt;li&gt;エラー発生時の原子性が保証されている。&lt;/li&gt;
&lt;li&gt;キャッシュしやすい。&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://tbd.kaitoy.xyz/2015/07/26/why-null-is-bad/&#34;&gt;NULL参照&lt;/a&gt;を防ぐ。&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;もちろん、良いオブジェクトは&lt;a href=&#34;http://tbd.kaitoy.xyz/2015/07/22/getters-setters-evil/&#34;&gt;setter&lt;/a&gt;をもたない。セッターはオブジェクトの状態を変え得るし、URLに背くことを強要する。
言い換えると、&lt;code&gt;HTTPStatus&lt;/code&gt;で&lt;code&gt;setURL()&lt;/code&gt;メソッドを実装することは酷い間違いとなる。&lt;/p&gt;

&lt;p&gt;その他にも、不変オブジェクトを使うことで、設計は必然的に凝集度の高いものになり、また密で理解しやすいものになる。
これについては&lt;a href=&#34;http://www.yegor256.com/2014/11/07/how-immutability-helps.html&#34;&gt;不変性がどう役に立つか&lt;/a&gt;という記事で説明している。&lt;/p&gt;

&lt;h1 id=&#34;5-彼のクラスはスタティックなものをいっさいもたない&#34;&gt;5. 彼のクラスはスタティックなものをいっさいもたない&lt;/h1&gt;

&lt;p&gt;スタティックメソッドは、オブジェクトではなくクラスの挙動を実装する。
&lt;code&gt;File&lt;/code&gt;クラスがあり、その子供が&lt;code&gt;size()&lt;/code&gt;メソッドを持つとする。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;final class File implements Measurable {
  @Override
  public int size() {
    // calculate the size of the file and return
  }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;ここまではよい。&lt;code&gt;size()&lt;/code&gt;メソッドは&lt;code&gt;Measurable&lt;/code&gt;契約によって存在し、&lt;code&gt;File&lt;/code&gt;クラスの全てのオブジェクトはそのサイズを測ることができる。
このクラスを、代わりにスタティックメソッドを持つように実装するのは酷い間違いだ。
(こうした設計は&lt;a href=&#34;http://www.yegor256.com/2014/05/05/oop-alternative-to-utility-classes.html&#34;&gt;ユーティリティクラス&lt;/a&gt;と呼ばれ、JavaやRubyなどのほぼ全てのOOP言語でとても人気だ。)&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;// TERRIBLE DESIGN, DON&#39;T USE!
class File {
  public static int size(String file) {
    // calculate the size of the file and return
  }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;この設計はオブジェクト指向パラダイムの真逆を行く。
なぜかって?
なぜならスタティックメソッドはオブジェクト指向プログラミングを「クラス指向」プログラミングに変えてしまうからだ。
この、&lt;code&gt;size()&lt;/code&gt;メソッドは、オブジェクトではなくクラスの挙動を公開する。
これの何が間違っているかと言われるかもしれない。
なぜオブジェクトとクラス両方をコード中で第一級市民として使えないのか?
なぜ両方ともがメソッドやプロパティを持てないのか?&lt;/p&gt;

&lt;p&gt;この問題は、クラス指向プログラミングでは、分離ができなくなるというものだ。
複雑な問題をブレイクダウンできなくなる。
なぜなら、プログラム全体の中でクラスのインスタンスがたったひとつしか存在しないからだ。
OOPの力は、オブジェクトをスコープを分離するための道具として使えることだ。
あるオブジェクトをメソッド中でインスタンス化したとき、そのオブジェクトは特定のタスク専任となる。
そのオブジェクトは、メソッド周辺の他のオブジェクトから完璧に分離されている。
このオブジェクトはメソッドスコープのローカル変数だ。
スタティックメソッドを持つクラスは、どこで使うにしろ常にグローバル変数だ。
このため、この変数とのやりとりを分離することはできない。&lt;/p&gt;

&lt;p&gt;オブジェクト指向の原理に概念的に反しているということの他にも、パブリックなスタティックメソッドは実用的な欠点も持っている。&lt;/p&gt;

&lt;p&gt;第一に、モックを作れない。
(いや、&lt;a href=&#34;https://code.google.com/p/powermock/&#34;&gt;PowerMock&lt;/a&gt;を使うことはできる。が、これはJavaプロジェクトで取り得る決断の中で最悪なものとなるだろう。。。私はそれを数年前にやってしまった。)&lt;/p&gt;

&lt;p&gt;第二に、定義上スレッドセーフではない。なぜなら、常にスタティック変数とともに動くからで、スタティック変数は全てのスレッドからアクセスできるからだ。
スタティックメソッドをスレッドセーフに作ることもできるが、この場合常に明示的な同期が必要になる。&lt;/p&gt;

&lt;p&gt;パブリックなスタティックメソッドを見つけたら常に、即座に書き直すべきだ。
スタティック(グローバル)変数がどれだけ酷いかについては説明したくもない。それは明らかだ。&lt;/p&gt;

&lt;h1 id=&#34;6-彼の名前は職名ではない&#34;&gt;6. 彼の名前は職名ではない&lt;/h1&gt;

&lt;p&gt;&lt;img alt=&#34;good-object-4.png&#34; src=&#34;http://tbd.kaitoy.xyz/images/seven-virtues-of-good-object/good-object-4.png&#34; width=&#34;300&#34; style=&#34;margin: 0px auto; display: block;&#34;&gt;&lt;/p&gt;

&lt;p&gt;オブジェクト名はそのオブジェクトが何であるかを示すべきで、何をするかを示すべきではない。
実世界の物に名付けるのと同様に。
ページ集めではなく本、水入れではなくカップ、体飾りではなくTシャツ。
もちろん、プリンタやコンピュータのような例外はあるが、これらはこの記事を読まなかった人々によってごく最近発明されたものだ。&lt;/p&gt;

&lt;p&gt;例えば、次のような名前はその持ち主が何であるかを示す。
りんご、ファイル、HTTPリクエスト群、ソケット、XMLドキュメント、ユーザリスト、正規表現、整数、PostgreSQLテーブル、Jeffrey Lebowski。
適切な名前はいつも小さい絵として描ける。正規表現でさえ描ける。&lt;/p&gt;

&lt;p&gt;逆に、次に挙げる名前の例は持ち主が何をするかを示す。
ファイルリーダ、テキストパーサ、URLバリデータ、XMLプリンタ、サービスロケータ、シングルトン、スクリプトランナ、Javaプログラマ。
これらの絵を描けるか?
描けない。
こういう名前は良いオブジェクトには適さない。
これらは酷い設計につながる酷い名前だ。&lt;/p&gt;

&lt;p&gt;一般的に、「-er」で終わる名前を避けるべきだ。そのほとんどはダメなものだ。&lt;/p&gt;

&lt;p&gt;「&lt;code&gt;FileReader&lt;/code&gt;の代わりは何」と疑問に思うだろう。
よりよい名前は何?&lt;/p&gt;

&lt;p&gt;ええと、我々は既に&lt;code&gt;File&lt;/code&gt;を持っていて、それは実世界のディスク上のファイルの表現だ。
この表現は十分に強力ではない。なぜなら、それはファイルの内容を読む方法を知らないからだ。
その能力を持ったより強力なものを作りたい。
何という名前にする?
名前は、その持ち主が何をするかではなく、何であるかを示すべきであるということを思い出してほしい。
持ち主は何か?
データを持ったファイルだ。ただのファイルではなく。
&lt;code&gt;File&lt;/code&gt;っぽいけど、もっと洗練されたものだ。データを持った。
なので、&lt;code&gt;FileWithData&lt;/code&gt;、もしくは単に&lt;code&gt;DataFile&lt;/code&gt;というのはどうだろう?&lt;/p&gt;

&lt;p&gt;同様のロジックを他の全ての名前にも適用すべきだ。
常に何をするかよりも何であるかを考えよう。
オブジェクトに職名ではなく、リアルで、意味のある名前を付けよう。&lt;/p&gt;

&lt;p&gt;より詳しくは「&lt;a href=&#34;http://www.yegor256.com/2015/03/09/objects-end-with-er.html&#34;&gt;-ERで終わるオブジェクトを作るな&lt;/a&gt;」を参照。&lt;/p&gt;

&lt;h1 id=&#34;7-彼のクラスはfinalかabstractのどちらか&#34;&gt;7. 彼のクラスはFinalかAbstractのどちらか&lt;/h1&gt;

&lt;p&gt;&lt;img alt=&#34;good-object-5.png&#34; src=&#34;http://tbd.kaitoy.xyz/images/seven-virtues-of-good-object/good-object-5.png&#34; width=&#34;300&#34; style=&#34;margin: 0px auto; display: block;&#34;&gt;&lt;/p&gt;

&lt;p&gt;良いオブジェクトはfinalまたはabstractなクラスから生成される。
&lt;code&gt;final&lt;/code&gt;クラスは継承によって拡張できないクラスだ。
&lt;code&gt;abstract&lt;/code&gt;クラスは子供を持てないクラスだ。
簡単に言うと、クラスは、「君は僕を決して壊せない。僕はブラックボックスだ。」か、または「僕は壊れている。直してから使ってくれ。」のどちらかを言う。&lt;/p&gt;

&lt;p&gt;その間には何もない。finalクラスはブラックボックスで、あらゆる意味で変更できない。
オブジェクトは現状のままで働き、君はそれを使うか捨てるかしかしない。
そのプロパティを継承する別のクラスを作ることはできない。
これは&lt;code&gt;final&lt;/code&gt;修飾子によって禁止されている。
そのようなfinalクラスを拡張する唯一の手段は、その子供をデコレートすることだ。
例えば、(上記)&lt;code&gt;HTTPStatus&lt;/code&gt;クラスがあり、それを気に入らなかったとする。
いやまあ好きではあるけど、私にとっては十分強力ではないんだ。
HTTPステータスが400より大きい場合に例外を投げて欲しい。
&lt;code&gt;read()&lt;/code&gt;メソッドにもう少し処理をしてもらいたい。
古風なやり方は、そのクラスを拡張してメソッドを上書きすることだ。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;class OnlyValidStatus extends HTTPStatus {
  public OnlyValidStatus(URL url) {
    super(url);
  }
  @Override
  public int read() throws IOException {
    int code = super.read();
    if (code &amp;gt; 400) {
      throw new RuntimException(&amp;quot;unsuccessful HTTP code&amp;quot;);
    }
    return code;
  }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;なぜこれではダメなのか?
メソッドのひとつをオーバーライドすることで親クラス全体のロジックを壊す危険があるので全然ダメだ。
&lt;code&gt;read()&lt;/code&gt;を子クラスでオーバーライドしたら、親クラスから来る全てのメソッドがその新しいやつを使うことになる、ということを忘れないで欲しい。
これは、文字通り新しい「実装のかけら」をクラスの内部に挿入するということだ。
哲学的に言って、これは反則だ。&lt;/p&gt;

&lt;p&gt;一方、finalクラスを拡張するためには、それをブラックボックスのように扱い、他の実装でデコレートする必要がある。(&lt;a href=&#34;https://ja.wikipedia.org/wiki/Decorator_%E3%83%91%E3%82%BF%E3%83%BC%E3%83%B3&#34;&gt;デコレータパターン&lt;/a&gt;)&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;final class OnlyValidStatus implements Status {
  private final Status origin;
  public OnlyValidStatus(Status status) {
    this.origin = status;
  }
  @Override
  public int read() throws IOException {
    int code = this.origin.read();
    if (code &amp;gt; 400) {
      throw new RuntimException(&amp;quot;unsuccessful HTTP code&amp;quot;);
    }
    return code;
  }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;このクラスがもともとと同じインターフェース、&lt;code&gt;Status&lt;/code&gt;を実装していることに注目して欲しい。
&lt;code&gt;HTTPStatus&lt;/code&gt;のインスタンスはコンストラクタを通して渡され、内包される。
そして、全てのメソッド呼び出しは割り込まれ、必要に応じて独自に実装される。
この設計だと、もとのオブジェクトをブラックボックスとして扱い、その内部のロジックには決して触らない。&lt;/p&gt;

&lt;p&gt;もし&lt;code&gt;final&lt;/code&gt;というキーワードを使わなかったら、だれでも(君自身でも)そのクラスを拡張し、損なうことができる。(よって&lt;code&gt;final&lt;/code&gt;でないクラスは悪い設計だ。)&lt;/p&gt;

&lt;p&gt;abstractクラスは真反対なケースだ。それは不完全で、そのままでは使えないことを示している。
独自の実装ロジックを挿入する必要があるが、それは許可された部分だけに限られる。
この部分は&lt;code&gt;abstract&lt;/code&gt;メソッドとして明示的に示されている。
例えば、&lt;code&gt;HTTPStatus&lt;/code&gt;は以下のようになる。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;abstract class ValidatedHTTPStatus implements Status {
  @Override
  public final int read() throws IOException {
    int code = this.origin.read();
    if (!this.isValid()) {
      throw new RuntimException(&amp;quot;unsuccessful HTTP code&amp;quot;);
    }
    return code;
  }
  protected abstract boolean isValid();
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;見て分かるとおり、このクラスはHTTPコードを検証する方法を知らないので、継承して&lt;code&gt;isValid()&lt;/code&gt;をオーバーライドすることによってそのロジックを挿入することを期待している。
この継承は親クラスを損なわない。他の全メソッドが&lt;code&gt;final&lt;/code&gt;によって守られているからだ。(メソッドの修飾子に注目してくれ。)
つまり、このクラスは攻撃への備えがしてあって、完全に防御している。&lt;/p&gt;

&lt;p&gt;まとめると、クラスは&lt;code&gt;final&lt;/code&gt;か&lt;code&gt;abstract&lt;/code&gt;のどちらかであるべきで、その中間はない。&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;以上がYegorの記事。&lt;/p&gt;

&lt;p&gt;この記事は、オブジェクト指向原理主義者であるYegorが彼のオブジェクト観の概論を書いたものだ。
彼のオブジェクトに対するとんがった信念が読み取れる。&lt;/p&gt;

&lt;p&gt;記事の内容をまとめると、&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;オブジェクトは何か実体と対応していないといけない。&lt;/li&gt;
&lt;li&gt;クラスはインターフェースを実装していないといけない。&lt;/li&gt;
&lt;li&gt;オブジェクトはユニーク性を保証するフィールドを持っていないといけない。&lt;/li&gt;
&lt;li&gt;オブジェクトは不変でないといけない&lt;/li&gt;
&lt;li&gt;クラスはスタティックメソッド/フィールドを持っていてはいけない。&lt;/li&gt;
&lt;li&gt;erで終わるクラス名を使ってはいけない。&lt;/li&gt;
&lt;li&gt;クラスにはfinalかabstractが付いていないといけない。&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;#1と#6はだいたい同じことを主張していて、その内容は実用的というよりかは哲学的だ。
敢えて実用面について言えば、同じ哲学を共有しているチームがこの主張に従えば、そのチーム内でコードの可読性や保守性が上がるというメリットがあると考えられる。
が、オブジェクト指向原理主義よりもGoFのデザインパターンの方がはるかに広く深く浸透しているので、このメリットはあまりありがたみが無い。
私はオブジェクト真理教に入信したわけではないので、これからもControllerとかFactoryとかServiceとかいうクラスを書くだろう。&lt;/p&gt;

&lt;p&gt;#2については、言っていることは分かるしインターフェースのメリットもよく理解しているつもりだが、わんさとクラスを書かないといけないのに逐一インターフェースまで書いてられるかというのが本音だ。
実際には、モックを書いたり多態したいとき、または将来そうなると天啓があったとき、つまりは必要に応じてインターフェースを書くのであって、なんでもかんでも書いていたら書くのも読むのもいたずらに大変になってしまう。(そういう方針をとって開発者から不満が噴出したプロジェクトが身近にあったと聞いた。)
Yegorのプロジェクトでは全てのクラスがインターフェースを実装しているんだろうか。信じ難い。&lt;/p&gt;

&lt;p&gt;#3も、ちょっと実用的な雰囲気の主張だが、よくみるとこれに従うことでどんなメリットがあるかとか、従わないことでどんな問題が発生するかとかが書いてない。
哲学的な主張か。
私が開発している&lt;a href=&#34;https://github.com/kaitoy/pcap4j&#34;&gt;Pcap4J&lt;/a&gt;には、ネットワークパケットを表すクラスが多数あるが、それらからインスタンス化されるオブジェクトは必ずしもユニークではない。
例えば、Ethernetヘッダを表すクラスである&lt;a href=&#34;https://github.com/kaitoy/pcap4j/blob/master/pcap4j-core/src/main/java/org/pcap4j/packet/EthernetPacket.java&#34;&gt;EthernetHeader&lt;/a&gt;は、Ethernetパケットの送り元と送り先が同じで、且つレイヤ3のプロトコルが同じなら&lt;code&gt;equals()&lt;/code&gt;が&lt;code&gt;true&lt;/code&gt;を返す。
つまり、実世界で異なるパケットのヘッダでも、Java世界では同一とみなされることがよくある。
この実装で実用上困ることは無い気がするけど、オブジェクト指向原理主義に照らすとダメってことか?
&lt;code&gt;UUID&lt;/code&gt;みたいなフィールドでも加えればいいのか?
そんなフィールドはEthernetヘッダにはないのに?&lt;/p&gt;

&lt;p&gt;#4は好き。ただ全てに適用できるかというと疑問。不変オブジェクトで、例えば&lt;a href=&#34;http://qiita.com/disc99/items/840cf9936687f97a482b#effective-java-builder&#34;&gt;Builderパターン(GoFじゃなくてEffective Javaの方)&lt;/a&gt;が対応している問題をどう解決するんだろう?
すごく頑張ってYegorの言いつけを守りながら、Builderパターンっぽくインスタンス化できるEthernetHeader(という名のEthernetヘッダフィールドの値を保持するクラス)を書いてみたら以下のようになった。&lt;/p&gt;

&lt;p&gt;まず、一般的なヘッダを表す&lt;code&gt;Header&lt;/code&gt;クラスを作る。不変で、&lt;code&gt;id&lt;/code&gt;という適当なフィールドを持つ。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;package test;
import org.pcap4j.util.MacAddress;

public final class Header {
  private final int id;

  public Header(int id) {
    this.id = id;
  }

  public int getId() { return id; }

  public DstAddrSetEthernetHeader dstAddr(MacAddress dstAddr) {
    return new DstAddrSetEthernetHeader(this, dstAddr);
  }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;次に、&lt;code&gt;Header&lt;/code&gt;をデコレートして拡張し、&lt;code&gt;dstAddr&lt;/code&gt;というフィールドを追加したもちろん不変なクラス&lt;code&gt;DstAddrSetEthernetHeader&lt;/code&gt;(dstAddrだけがセットされたEthernetヘッダ)を作る。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;package test;
import org.pcap4j.util.MacAddress;

public final class DstAddrSetEthernetHeader {
  private final Header header;
  private final MacAddress dstAddr;

  DstAddrSetEthernetHeader(Header header, MacAddress dstAddr) {
    this.header = header;
    this.dstAddr = dstAddr;
  }

  public MacAddress getDstAddr() { return dstAddr; }

  public int getId() { return header.getId(); }

  public DstAddrAndSrcAddrSetEthernetHeader srcAddr(MacAddress srcAddr) {
    return new DstAddrAndSrcAddrSetEthernetHeader(this, srcAddr);
  }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;さらに&lt;code&gt;DstAddrSetEthernetHeader&lt;/code&gt;をデコレートして拡張し、&lt;code&gt;srcAddr&lt;/code&gt;というフィールドを追加したもちろん不変なクラス&lt;code&gt;DstAddrAndSrcAddrSetEthernetHeader&lt;/code&gt;(dstAddrとsrcAddrがセットされたEthernetヘッダ)を作る。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;package test;
import org.pcap4j.packet.namednumber.EtherType;
import org.pcap4j.util.MacAddress;

public final class DstAddrAndSrcAddrSetEthernetHeader {
  private final DstAddrSetEthernetHeader header;
  private final MacAddress srcAddr;

  DstAddrAndSrcAddrSetEthernetHeader(DstAddrSetEthernetHeader header, MacAddress srcAddr) {
    this.header = header;
    this.srcAddr = srcAddr;
  }

  public MacAddress getSrcAddr() { return srcAddr; }

  public int getId() { return header.getId(); }

  public MacAddress getDstAddr() { return header.getDstAddr(); }

  public EthernetHeader type(EtherType type) {
    return new EthernetHeader(this, type);
  }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;やっとビルド対象である&lt;code&gt;EthernetHeader&lt;/code&gt;を書く。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;package test;
import org.pcap4j.packet.namednumber.EtherType;
import org.pcap4j.util.MacAddress;

public final class EthernetHeader {
  private final int id;
  private final MacAddress dstAddr;
  private final MacAddress srcAddr;
  private final EtherType type;

  public EthernetHeader(DstAddrAndSrcAddrSetEthernetHeader header, EtherType type) {
    this.id = header.getId();
    this.dstAddr = header.getDstAddr();
    this.srcAddr = header.getSrcAddr();
    this.type = type;
  }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;上記4つのクラスを使って、次のようにBuilderパターンっぽいことができる。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;package test;
import org.pcap4j.packet.namednumber.EtherType;
import org.pcap4j.util.MacAddress;

public class ImmutableBuilderSample {
  public static void main(String[] args) {
    EthernetHeader header
      = new Header(1)
          .dstAddr(MacAddress.getByName(&amp;quot;aa:bb:cc:dd:ee:ff&amp;quot;))
          .srcAddr(MacAddress.getByName(&amp;quot;11:22:33:44:55:66&amp;quot;))
          .type(EtherType.IPV4);
  }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;パラメータの設定順を自由にしたければ、さらに&lt;code&gt;SrcAddrSetEthernetHeader&lt;/code&gt;とか&lt;code&gt;TypeSetEthernetHeader&lt;/code&gt;とか&lt;code&gt;DstAddrAndTypeSetEthernetHeader&lt;/code&gt;とか作らないといけない。これは疲れる。
沢山オブジェクトを作るのに、最後の&lt;code&gt;EthernetHeader&lt;/code&gt;以外のが使い捨てというのも辛い。
&lt;code&gt;EthernetHeader&lt;/code&gt;は3つしかフィールドがないからまだましな方なんだが。&lt;/p&gt;

&lt;p&gt;私は、不変クラスはスレッドセーフにすることを主目的として作る。
普通アプリケーションはマルチスレッドになるんだから、基本的にクラスは不変を目指して作り、どうしても可変にしたくなったときは内部で同期してスレッドセーフに保つか、外で同期してもらうか、またはシングルスレッドで使ってもらうかを考える。
上記のBuilderなんかは可変フィールドを使わないとまともに作れないし、その性質上マルチスレッドで使うことは普通ないし、無理に不変にする必要はなかろう。&lt;/p&gt;

&lt;p&gt;#5については、Yegorが問題視していることにはだいたい納得できる。(哲学的な部分以外は。。。)
しかし、Yegorが、スタティックメソッドが可変フィールドを参照することを前提に話しているところにひっかかる。
私はpublic staticなフィールドをfinal無しで書くことはないし、スタティックメソッドは殆どの場合引数だけを使うように書き、たまにfinalなフィールドを参照させるくらいだ。(ちょっとあやしいけど多分。)
世のユーティリティクラスもだいたいそんな感じで書かれているんじゃなかろうか。
この場合、スレッドセーフじゃないという問題点は出ないし、問題の分離も、スタティックフィールドでデータを共有するわけではないのでちゃんとできる。
モックはできないけど、ユーティリティクラスのモックを書きたいことなんてあるだろうか?&lt;/p&gt;

&lt;p&gt;#7は同意。abstractじゃないメソッドをオーバーライドするのって気持ち悪いし。
ところでデコレータパターンってすごい便利で汎用性高いと思うんだけど、いざというときに思いつかないようで、あんまり使ったことないな。&lt;/p&gt;

&lt;p&gt;以上ひとつひとつの主張について考えてみたけど、反感が多いな。
これはオブジェクト真理教に入信するメリットが見えてこないからだろう。
もともとOOPっていうのは、手続き型言語が隆盛な時代の関数を使った処理の分離という考え方を押し進め、処理と処理対象データを一緒にして分離するという実用的で技術的な目的のもとに生まれたもので、オブジェクトは実世界のモノを表現しなきゃいけないってのは後付けの哲学だ。
OOPはそれを共通認識として発展したわけではないので、極端な哲学に縛られていると長い歴史に揉まれた強力なノウハウの多くが使えなくなってしまう。
GoFのデザインパターンを否定するなら、GoFが解決した問題への別解を提示してくれないとなかなか受け入れがたい。&lt;/p&gt;
</description>
        </item>
      
    
      
        <item>
          <title>Step by Step to Add a Protocol Support to Pcap4J (Part 2)</title>
          <link>http://tbd.kaitoy.xyz/2015/10/12/step-by-step-to-add-a-protocol-support-to-pcap4j-2/</link>
          <pubDate>Mon, 12 Oct 2015 01:00:13 MDT</pubDate>
          <author>Kaito Yamada</author>
          <guid>http://tbd.kaitoy.xyz/2015/10/12/step-by-step-to-add-a-protocol-support-to-pcap4j-2/</guid>
          <description>

&lt;p&gt;This is continued from &lt;a href=&#34;http://tbd.kaitoy.xyz/2015/08/09/step-by-step-to-add-a-protocol-support-to-pcap4j-1/&#34;&gt;the part 1&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;We are adding DHCP support to &lt;a href=&#34;https://github.com/kaitoy/pcap4j&#34;&gt;Pcap4J&lt;/a&gt;.&lt;/p&gt;

&lt;h3 id=&#34;packet-piece-class&#34;&gt;Packet Piece Class&lt;/h3&gt;

&lt;p&gt;A packet piece class is a Java class which represents a field of a packet.
We should create such classes instead of using a primitive types in some cases.&lt;/p&gt;

&lt;p&gt;In the case of DHCP, its &lt;strong&gt;flags&lt;/strong&gt; field includes two fields in itself as like below:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-text&#34;&gt;                    1 1 1 1 1 1
0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5
+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
|B|             MBZ             |
+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+

B:  BROADCAST flag
MBZ:  MUST BE ZERO (reserved for future use)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Although this flags field is 2 bytes long and can be held by a primitive short variable, it&amp;rsquo;s better to create a packet piece class to hold it for better usability.&lt;/p&gt;

&lt;p&gt;I mean,&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;boolean broadcast = DhcpV4Packet.getHeader().getFlags().isBroadcast();
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;is better than&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;boolean broadcast = (0x8000 &amp;amp; DhcpV4Packet.getHeader().getFlags()) != 0;
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;dhcpv4flags-class&#34;&gt;DhcpV4Flags class&lt;/h3&gt;

&lt;p&gt;Now, let&amp;rsquo;s write a packet piece class &lt;strong&gt;DhcpV4Flags&lt;/strong&gt; for the flags field.
For writing packet piece classes, there is no rule except that they must implement &lt;a href=&#34;http://docs.oracle.com/javase/7/docs/api/java/io/Serializable.html&#34;&gt;Serializable interface&lt;/a&gt;.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;package org.pcap4j.packet;

import java.io.Serializable;

public final class DhcpV4Flags implements Serializable {

  private static final long serialVersionUID = -7144264525666462708L;

  private final short value;

  public static DhcpV4Flags newInstance(short value) {
    return new DhcpV4Flags(value);
  }

  private DhcpV4Flags(short value) {
    this.value = value;
  }

  public short value() {
    return value;
  }

}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;What we should do to implement Serializable is only adding a field &lt;code&gt;private static final long serialVersionUID&lt;/code&gt; in this case because DhcpV4Flags has only one primitive short field.&lt;/p&gt;

&lt;p&gt;The short field holds entire value of the flags field.
The constructor receives a short value and simply stores it in the short field.
I made the constructor private and wrote a static factory method &lt;code&gt;newInstance&lt;/code&gt;, which is just my taste and not necessary.&lt;/p&gt;

&lt;p&gt;&lt;br&gt;&lt;/p&gt;

&lt;p&gt;Here, let&amp;rsquo;s remember that the flags field has two fields in itself, which are B (BROADCAST) and MBZ (MUST BE ZERO), and add two methods to get them.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;  public boolean isBroadcast() { return (value &amp;amp; 0x8000) != 0; }

  public short getMbz() { return (short)(value &amp;amp; 0x7FFF); }
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;br&gt;&lt;/p&gt;

&lt;p&gt;And, generally speaking, we should always override &lt;code&gt;toString&lt;/code&gt;, &lt;code&gt;equals&lt;/code&gt;, and &lt;code&gt;hashCode&lt;/code&gt;.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append(&amp;quot;[BROADCAST: &amp;quot;)
      .append(isBroadcast())
      .append(&amp;quot;] [value: 0x&amp;quot;)
      .append(ByteArrays.toHexString(value, &amp;quot;&amp;quot;))
      .append(&amp;quot;]&amp;quot;);

    return sb.toString();
  }

  @Override
  public boolean equals(Object obj) {
    if (obj == this) { return true; }
    if (!this.getClass().isInstance(obj)) { return false; }

    DhcpV4Flags other = (DhcpV4Flags)obj;
    return this.value == other.value;
  }

  @Override
  public int hashCode() { return value; }
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;br&gt;&lt;/p&gt;

&lt;p&gt;The last thing to write is &lt;strong&gt;Builder class&lt;/strong&gt;, which is another way to instantiate DhcpV4Flags objects.
The static factory method I wrote above is used when dissecting a real DHCP packet (i.e. a byte array), while the Builder is used when crafting a DHCP packet object.&lt;/p&gt;

&lt;p&gt;A Builder class is usually written as an inner class.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;public final class DhcpV4Flags implements Serializable {

  (snip)

  public Builder getBuilder() {
    return new Builder(this);
  }

  public static final class Builder {

    private boolean broadcast = false;
    private short mbz = 0;

    public Builder() {}

    private Builder(DhcpV4Flags flags) {
      this.broadcast = flags.isBroadcast();
      this.mbz = flags.getMbz();
    }

    public Builder broadcast(boolean broadcast) {
      this.broadcast = broadcast;
      return this;
    }

    public Builder mbz(short mbz) {
      this.mbz = mbz;
      return this;
    }

    public DhcpV4Flags build() {
      return new DhcpV4Flags(this);
    }

  }

}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;And, DhcpV4Flags needs a constructor which uses the Builder.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;  private DhcpV4Flags(Builder builder) {
    if (builder == null) {
      throw new NullPointerException(&amp;quot;builder is null.&amp;quot;);
    }
    if (builder.mbz &amp;lt; 0) {
      throw new IllegalArgumentException(
              &amp;quot;mbz must be equal or greater than zero but it is: &amp;quot; + builder.mbz
            );
    }

    this.value = builder.broadcast ? (short)(builder.mbz | 0x8000) : builder.mbz;
  }
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;br&gt;&lt;/p&gt;

&lt;p&gt;That&amp;rsquo;s all. The entire code is as follows:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;package org.pcap4j.packet;

import java.io.Serializable;
import org.pcap4j.util.ByteArrays;

public final class DhcpV4Flags implements Serializable {

  private static final long serialVersionUID = -7144264525666462708L;

  private final short value;

  public static DhcpV4Flags newInstance(short value) {
    return new DhcpV4Flags(value);
  }

  private DhcpV4Flags(short value) {
    this.value = value;
  }

  private DhcpV4Flags(Builder builder) {
    if (builder == null) {
      throw new NullPointerException(&amp;quot;builder is null.&amp;quot;);
    }
    if (builder.mbz &amp;lt; 0) {
      throw new IllegalArgumentException(
              &amp;quot;mbz must be equal or greater than zero but it is: &amp;quot; + builder.mbz
            );
    }

    this.value = builder.broadcast ? (short)(builder.mbz | 0x8000) : builder.mbz;
  }

  public short value() {
    return value;
  }

  public boolean isBroadcast() { return (value &amp;amp; 0x8000) != 0; }

  public short getMbz() { return (short)(value &amp;amp; 0x7FFF); }

  public Builder getBuilder() {
    return new Builder(this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append(&amp;quot;[BROADCAST: &amp;quot;)
      .append(isBroadcast())
      .append(&amp;quot;] [value: 0x&amp;quot;)
      .append(ByteArrays.toHexString(value, &amp;quot;&amp;quot;))
      .append(&amp;quot;]&amp;quot;);

    return sb.toString();
  }

  @Override
  public boolean equals(Object obj) {
    if (obj == this) { return true; }
    if (!this.getClass().isInstance(obj)) { return false; }

    DhcpV4Flags other = (DhcpV4Flags)obj;
    return this.value == other.value;
  }

  @Override
  public int hashCode() { return value; }

  public static final class Builder {

    private boolean broadcast = false;
    private short mbz = 0;

    public Builder() {}

    private Builder(DhcpV4Flags flags) {
      this.broadcast = flags.isBroadcast();
      this.mbz = flags.getMbz();
    }

    public Builder broadcast(boolean broadcast) {
      this.broadcast = broadcast;
      return this;
    }

    public Builder mbz(short mbz) {
      this.mbz = mbz;
      return this;
    }

    public DhcpV4Flags build() {
      return new DhcpV4Flags(this);
    }

  }

}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;br&gt;&lt;/p&gt;

&lt;p&gt;In the next part, we&amp;rsquo;ll write the DHCP packet class.&lt;/p&gt;
</description>
        </item>
      
    
      
        <item>
          <title>ORMは不快なアンチパターン</title>
          <link>http://tbd.kaitoy.xyz/2015/09/13/orm-is-offensive-anti-pattern/</link>
          <pubDate>Sun, 13 Sep 2015 13:52:30 MDT</pubDate>
          <author>Kaito Yamada</author>
          <guid>http://tbd.kaitoy.xyz/2015/09/13/orm-is-offensive-anti-pattern/</guid>
          <description>

&lt;p&gt;このエントリでは、Yegor Bugayenkoによる記事、&lt;a href=&#34;http://www.yegor256.com/2014/12/01/orm-offensive-anti-pattern.html&#34;&gt;ORM Is an Offensive Anti-Pattern&lt;/a&gt;を紹介する。
(Yegorから和訳と転載の許可は得た。)
以下はその全文の和訳だが、意訳超訳が混じっているので、もとのニュアンスを知りたければ元記事を読んでもいいし、読まなくてもいい。&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;結論から言えば、ORMはオブジェクト指向プログラミングの原則の全てに違反するひどいアンチパターンだ。オブジェクトをバラバラに引き裂き、もの言わぬ受身なデータ入れに変えてしまう。
小さいWebアプリケーションから、数千のテーブルをCRUD操作するエンタープライズシステムまで、どんなアプリケーションにもORMが存在することはゆるせない。
代わりになるものは?
SQLを話すオブジェクトだ。&lt;/p&gt;

&lt;h1 id=&#34;ormの仕組み&#34;&gt;ORMの仕組み&lt;/h1&gt;

&lt;p&gt;&lt;a href=&#34;https://ja.wikipedia.org/wiki/%E3%82%AA%E3%83%96%E3%82%B8%E3%82%A7%E3%82%AF%E3%83%88%E9%96%A2%E4%BF%82%E3%83%9E%E3%83%83%E3%83%94%E3%83%B3%E3%82%B0&#34;&gt;オブジェクト関係マッピング&lt;/a&gt; (Object-relatinal mapping、ORM)は、オブジェクト指向言語(例えばJava)からリレーショナルデータベースにアクセスする技術(またはデザインパターン)だ。
ほとんどの言語で複数のORM実装がある。
例えば、Javaの&lt;a href=&#34;http://hibernate.org/orm/&#34;&gt;Hibernate&lt;/a&gt;、Ruby on Ralsの&lt;a href=&#34;http://guides.rubyonrails.org/active_record_basics.html&#34;&gt;ActiveRecord&lt;/a&gt;、PHPの&lt;a href=&#34;http://www.doctrine-project.org/&#34;&gt;Doctrine&lt;/a&gt;、Pythonの&lt;a href=&#34;http://www.sqlalchemy.org/&#34;&gt;SQLAlchemy&lt;/a&gt;。
Javaでは、ORMデザインは&lt;a href=&#34;https://ja.wikipedia.org/wiki/Java_Persistence_API&#34;&gt;JPA&lt;/a&gt;として標準化されてさえいる。&lt;/p&gt;

&lt;p&gt;最初に、ORMがどう動くかを見てみよう。JavaとPostgreSQLとHibernateを使い、データベースに&lt;code&gt;post&lt;/code&gt; (訳注: ブログポスト、ブログの記事)という単一のテーブルがあるとする。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-text&#34;&gt;+-----+------------+--------------------------+
| id  | date       | title                    |
+-----+------------+--------------------------+
|   9 | 10/24/2014 | How to cook a sandwich   |
|  13 | 11/03/2014 | My favorite movies       |
|  27 | 11/17/2014 | How much I love my job   |
+-----+------------+--------------------------+
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;で、このテーブルをJavaアプリケーションからCRUD操作したい。(CRUDはcreate、read、update、deleteの略。)
まず、&lt;code&gt;Post&lt;/code&gt;クラスを書く。(長くてごめん。けどなるべく短くしたんだ。)&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;@Entity
@Table(name = &amp;quot;post&amp;quot;)
public class Post {
  private int id;
  private Date date;
  private String title;

  @Id
  @GeneratedValue
  public int getId() {
    return this.id;
  }

  @Temporal(TemporalType.TIMESTAMP)
  public Date getDate() {
    return this.date;
  }

  public Title getTitle() {
    return this.title;
  }

  public void setDate(Date when) {
    this.date = when;
  }

  public void setTitle(String txt) {
    this.title = txt;
  }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Hibernateでの処理をする前に、セッションファクトリを作らないといけない。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;SessionFactory factory = new AnnotationConfiguration()
  .configure()
  .addAnnotatedClass(Post.class)
  .buildSessionFactory();
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;このファクトリは&lt;code&gt;Post&lt;/code&gt;オブジェクトを操作したいときに「セッション」を作ってくれる。
セッションを使う全ての操作は以下のようなコードブロックで囲わないといけない。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;Session session = factory.openSession(); try {
  Transaction txn = session.beginTransaction();
  // your manipulations with the ORM, see below
  txn.commit();
} catch (HibernateException ex) {
  txn.rollback();
} finally {
  session.close();
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;セッションが準備できたら、以下のようにしてデータベーステーブルから全てのpostのリストを取得する。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;List posts = session.createQuery(&amp;quot;FROM Post&amp;quot;).list();
for (Post post : (List&amp;lt;Post&amp;gt;) posts){
  System.out.println(&amp;quot;Title: &amp;quot; + post.getTitle());
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;ここで何が起こっているかは明確だと思う。
Hibernateという巨大で強力なエンジンが、データベースへの接続、SQLの&lt;code&gt;SELECT&lt;/code&gt;リクエスト発行、及びデータの取得をする。
そして、&lt;code&gt;Post&lt;/code&gt;クラスのインスタンスを作り、データをつめる。
そのオブジェクトが我々に渡されるとき、それにはデータが詰まっていて、getterでデータを取り出すことができる。上記&lt;code&gt;getTitle()&lt;/code&gt;でやっているように。&lt;/p&gt;

&lt;p&gt;逆の処理をしてオブジェクトをデータベースに送りたい場合は、同じことを逆の手順でやればいい。
&lt;code&gt;Post&lt;/code&gt;のインスタンスを作り、データを入れ、Hibernateに保存するよう頼む。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;Post post = new Post();
post.setDate(new Date());
post.setTitle(&amp;quot;How to cook an omelette&amp;quot;); session.save(post);
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;これがほぼ全てのORMの仕組みだ。
基本的な原則はいつも同じで、ORMオブジェクトは無気力なデータの包みだ。
我々はORMフレームワークと話して、ORMフレームワークはデータベースと話す。
オブジェクトは我々のリクエストをORMフレームワークに送り、そのレスポンスを読むのを助けてくれるだけだ。
こうしたオブジェクトは、getterやsetterのほかに何のメソッドも持たない。どのデータベースから来たのかすら知らない。&lt;/p&gt;

&lt;p&gt;これがオブジェクト関係マッピングの仕組みだ。&lt;/p&gt;

&lt;p&gt;これの何が間違ってるかって? 全てだ!&lt;/p&gt;

&lt;h1 id=&#34;ormの何が悪いのか&#34;&gt;ORMの何が悪いのか&lt;/h1&gt;

&lt;p&gt;真面目な話、何が悪い?
Hibernateは既に10年以上にわたって最も人気のあるJavaライブラリの一つだ。
この世のほぼ全てのSQL集約的なアプリケーションが使っている。
Javaのチュートリアルは、データベースに接続するアプリケーションのためのものとしてHibernate(またはTopLinkやOpenJPAのような&lt;a href=&#34;https://en.wikipedia.org/wiki/List_of_object-relational_mapping_software&#34;&gt;ほかのORM&lt;/a&gt;)を挙げる。
それはデファクトスタンダードであって、なお間違っていると言っているのか?
そうだ。&lt;/p&gt;

&lt;p&gt;私はORMの根底にあるアイデア全体が間違っていると訴えている。
この発明は多分、OOPにおいて最大の失敗である&lt;a href=&#34;http://tbd.kaitoy.xyz/2015/07/26/why-null-is-bad/&#34;&gt;NULL&lt;/a&gt;に次ぐ失敗だ。&lt;/p&gt;

&lt;p&gt;実際、私だけがこんなことを言っているわけではないし、最初に言ったわけでもないことは明白だ。
この問題に関しては、既に多くの記述が尊敬すべき著者によって公開されている。例えば、Martin Fowlerによる&lt;a href=&#34;http://martinfowler.com/bliki/OrmHate.html&#34;&gt;OrmHate&lt;/a&gt;、Jeff Atwoodによる&lt;a href=&#34;http://blog.codinghorror.com/object-relational-mapping-is-the-vietnam-of-computer-science/&#34;&gt;Object-Relational Mapping Is the Vietnam of Computer Science&lt;/a&gt;、Ted Newardによる&lt;a href=&#34;http://blogs.tedneward.com/2006/06/26/The+Vietnam+Of+Computer+Science.aspx&#34;&gt;The Vietnam of Computer Science&lt;/a&gt;、Laurie Vossによる&lt;a href=&#34;http://seldo.com/weblog/2011/08/11/orm_is_an_antipattern&#34;&gt;ORM Is an Anti-Pattern&lt;/a&gt;などで、他にも沢山ある。&lt;/p&gt;

&lt;p&gt;しかし、私の論点はこれらの著者とは違っている。
彼らが挙げている、「ORMは遅い」とか「データベースアップグレードが難しい」といった理由は実用的で有効ではあるが、重要なポイントが欠けている。
こういう実用的な論点に対しては、Bozhidar Bozhanovが彼のブログポストの&lt;a href=&#34;http://techblog.bozho.net/orm-haters-dont-get-it/&#34;&gt;ORM Haters Don’t Get It&lt;/a&gt;の中でとてもよい実用的な回答を示している。&lt;/p&gt;

&lt;p&gt;重要なポイントとは、ORMが、データベースとのやり取りをオブジェクト内にカプセル化するのではなく、それを抜き取り、密で堅い&lt;a href=&#34;http://tbd.kaitoy.xyz/2015/10/28/seven-virtues-of-good-object/&#34;&gt;生ける有機体&lt;/a&gt;を文字通りばらばらに引き裂く、ということだ。
引き裂かれたオブジェクトの欠片はデータを保持し、ほかの欠片(ORMのエンジンであるセッションファクトリ内に実装されているもの)はそのデータの扱い方を知っていて、それをリレーショナルデータベースへ転送する。
下の絵を見てくれ。これはORMがやっていることを図示している。&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://tbd.kaitoy.xyz/images/orm-is-offensive-anti-pattern/orm-anti-pattern.svg&#34; alt=&#34;orm-anti-pattern.svg&#34; /&gt;
&lt;/p&gt;

&lt;p&gt;ブログポストの記事を読むとき、二つのコンポーネントを扱わないといけない。一つはORMで、もう一つは手足を奪われたオブジェクト。
OOPにおいては、扱うふるまいは単一のエントリーポイント、つまり一つのオブジェクトから提供されることになっている。
しかしORMの場合、ふるまいは二つのエントリーポイント、つまりORMと「もの」から提供される。
これはもはやオブジェクトとは呼べない。&lt;/p&gt;

&lt;p&gt;この不快でひどいオブジェクト指向パラダイム違反のせいで、上記記事で述べられているような多くの実用的な問題を抱える。
私はこれにもう少しだけ付け加える。&lt;/p&gt;

&lt;h2 id=&#34;sqlが隠蔽されない&#34;&gt;SQLが隠蔽されない&lt;/h2&gt;

&lt;p&gt;ORMユーザはSQL(もしくは&lt;a href=&#34;https://docs.jboss.org/hibernate/orm/3.3/reference/en/html/queryhql.html&#34;&gt;HQL&lt;/a&gt;のような方言)を書くはずだ。
前記の例を見てほしい。全てのブログポストを取得するために&lt;code&gt;session.createQuery(&amp;quot;FROM Post&amp;quot;)&lt;/code&gt;を実行している。
これはSQLではないけど、よく似たものだ。
つまり、リレーショナルモデルはオブジェクト内にカプセル化されていない。
代わりに、それはアプリケーション全体に公開されている。
オブジェクトに触る誰しもが、何かを取得したり保存したりするためにリレーショナルモデルを扱わないといけない。
つまり、ORMはSQLを隠蔽したりラップしたりしておらず、アプリケーション全体に撒き散らしている。&lt;/p&gt;

&lt;h2 id=&#34;テストが困難&#34;&gt;テストが困難&lt;/h2&gt;

&lt;p&gt;ブログポストのリストを操作するオブジェクトがある場合、それは&lt;code&gt;SessionFactory&lt;/code&gt;のインスタンスを扱わないといけない。
この依存をどうする?
モックを作らないといけない?
これはどのくらい複雑な作業だろうか?
上記コードを見てほしい。ユニットテストがどれだけ冗長でやっかいなものになるかわかるはずだ。
代わりに、統合テストを書いてアプリケーション全体をテスト用PostgreSQLに接続することもできる。
この場合、&lt;code&gt;SessionFactory&lt;/code&gt;のモックは不要だ。
しかしこういうテストは遅く、さらに注目すべきことには、データベースに対して何もしないオブジェクトがデータベースインスタンスに対してテストされることになる。最悪な設計だ。&lt;/p&gt;

&lt;p&gt;もう一度繰り返すが、ORMの実用的な問題は結果に過ぎない。
根本的な欠陥は、ORMがオブジェクトをバラバラにし、&lt;a href=&#34;http://tbd.kaitoy.xyz/2015/10/28/seven-virtues-of-good-object/&#34;&gt;オブジェクト&lt;/a&gt;の真の概念にひどく違反していることだ。&lt;/p&gt;

&lt;h1 id=&#34;sqlを話すオブジェクト&#34;&gt;SQLを話すオブジェクト&lt;/h1&gt;

&lt;p&gt;他の選択肢は?
例を挙げて教えよう。
あの、&lt;code&gt;Post&lt;/code&gt;クラスを私のやり方で設計してみよう。
これは二つのクラスに分ける必要がある。&lt;code&gt;Post&lt;/code&gt;と&lt;code&gt;Posts&lt;/code&gt;だ。
単数形と複数形。
私の&lt;a href=&#34;http://tbd.kaitoy.xyz/2015/10/28/seven-virtues-of-good-object/&#34;&gt;以前の記事&lt;/a&gt;ですでに述べたように、よいオブジェクトは常に現実世界のエンティティの抽象だ。
この原則が実際にどう働くかをここに示す。
我々は二つのエンティティを扱う。データベーステーブルとテーブルの行だ。
これが二つのクラスを作る理由だ。&lt;code&gt;Posts&lt;/code&gt;がテーブルを表し、&lt;code&gt;Post&lt;/code&gt;が行を表す。&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://tbd.kaitoy.xyz/images/orm-is-offensive-anti-pattern/sql-speaking-object.svg&#34; alt=&#34;sql-speaking-object.svg&#34; /&gt;
&lt;/p&gt;

&lt;p&gt;例の&lt;a href=&#34;http://tbd.kaitoy.xyz/2015/10/28/seven-virtues-of-good-object/&#34;&gt;記事&lt;/a&gt;で既に述べたように、全てのオブジェクトは契約によって働き、インターフェースを実装すべきだ。
我々の設計も二つのインターフェースから始めよう。
もちろん、オブジェクトは不変だ。&lt;code&gt;Posts&lt;/code&gt;は以下のようになる。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;@Immutable
interface Posts {
  Iterable&amp;lt;Post&amp;gt; iterate();
  Post add(Date date, String title);
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;code&gt;Post&lt;/code&gt;は以下だ。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;@Immutable
interface Post {
  int id();
  Date date();
  String title();
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;データベーステーブル内の全てのpostを表示するには以下のようにする。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;Posts posts = // we&#39;ll discuss this right now
for (Post post : posts.iterate()){
  System.out.println(&amp;quot;Title: &amp;quot; + post.title());
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;新しいpostを作る場合は以下のようにする。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;Posts posts = // we&#39;ll discuss this right now
posts.add(new Date(), &amp;quot;How to cook an omelette&amp;quot;);
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;このようにすると真のオブジェクトになる。
これらのオブジェクトは全ての処理を受け持ち、実装の詳細を完璧に隠蔽する。
トランザクションもセッションもファクトリもない。
これらのオブジェクトが実際にPostgreSQLと話しているのかテキストファイルからデータを持ってきているのかすらわからない。
&lt;code&gt;Posts&lt;/code&gt;に求められるのは、全てのブログポストを取得する機能と新しいブログポストを作る機能だけだ。
実装の詳細は完璧に内部に隠蔽されている。
これから、どのようにこれら二つのクラスを実装できるかを見ていきたい。&lt;/p&gt;

&lt;p&gt;ここではJDBCラッパに&lt;a href=&#34;http://jdbc.jcabi.com/&#34;&gt;jcabi-jdbc&lt;/a&gt;を使うが、好みに応じてほかのものやJDBCを直接使ってもよい。
それは全く重要ではない。重要なのは、データベースとのやり取りをオブジェクト内に隠蔽することだ。
&lt;code&gt;Posts&lt;/code&gt;から始めよう。&lt;code&gt;PgPosts&lt;/code&gt;クラス(「pg」はPostgreSQLのこと)に実装する。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;@Immutable
final class PgPosts implements Posts {
  private final Source dbase;
  public PgPosts(DataSource data) {
    this.dbase = data;
  }
  public Iterable&amp;lt;Post&amp;gt; iterate() {
    return new JdbcSession(this.dbase)
      .sql(&amp;quot;SELECT id FROM post&amp;quot;)
      .select(
        new ListOutcome&amp;lt;Post&amp;gt;(
          new ListOutcome.Mapping&amp;lt;Post&amp;gt;() {
            @Override
            public Post map(final ResultSet rset) {
              return new PgPost(rset.getInteger(1));
            }
          }
        )
      );
  }
  public Post add(Date date, String title) {
    return new PgPost(
      this.dbase,
      new JdbcSession(this.dbase)
        .sql(&amp;quot;INSERT INTO post (date, title) VALUES (?, ?)&amp;quot;)
        .set(new Utc(date))
        .set(title)
        .insert(new SingleOutcome&amp;lt;Integer&amp;gt;(Integer.class))
    );
  }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;次に&lt;code&gt;Post&lt;/code&gt;を&lt;code&gt;PgPost&lt;/code&gt;クラスに実装する。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;@Immutable
final class PgPost implements Post {
  private final Source dbase;
  private final int number;
  public PgPost(DataSource data, int id) {
    this.dbase = data;
    this.number = id;
  }
  public int id() {
    return this.number;
  }
  public Date date() {
    return new JdbcSession(this.dbase)
      .sql(&amp;quot;SELECT date FROM post WHERE id = ?&amp;quot;)
      .set(this.number)
      .select(new SingleOutcome&amp;lt;Utc&amp;gt;(Utc.class));
  }
  public String title() {
    return new JdbcSession(this.dbase)
      .sql(&amp;quot;SELECT title FROM post WHERE id = ?&amp;quot;)
      .set(this.number)
      .select(new SingleOutcome&amp;lt;String&amp;gt;(String.class));
  }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;今作ったクラスを使ってデータベースとやり取りする完全なシナリオは以下のようになる。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;Posts posts = new PgPosts(dbase);
for (Post post : posts.iterate()){
  System.out.println(&amp;quot;Title: &amp;quot; + post.title());
}
Post post = posts.add(new Date(), &amp;quot;How to cook an omelette&amp;quot;);
System.out.println(&amp;quot;Just added post #&amp;quot; + post.id());
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;a href=&#34;https://github.com/aintshy/hub/tree/0.7.2/src/main/java/com/aintshy/pgsql&#34;&gt;ここ&lt;/a&gt;で完全な実用的な例を見られる。
これはオープンソースのWebアプリで、上で説明したのと全く同じアプローチ、つまりSQLを話すオブジェクトを使ってPostgreSQLにアクセスする。&lt;/p&gt;

&lt;h1 id=&#34;性能は&#34;&gt;性能は?&lt;/h1&gt;

&lt;p&gt;「性能は?」と君が叫んでいるのが聞こえる。
数行上のスクリプトにはデータベースとの冗長なやりとりを書いた。
まず、&lt;code&gt;SELECT id&lt;/code&gt;でブログポストのIDを取得し、さらに、タイトルを取得するために&lt;code&gt;SELECT title&lt;/code&gt;をそれぞれのブログポストに対して実行する。
これは非効率だ。単に遅すぎると言ってもいい。&lt;/p&gt;

&lt;p&gt;心配はいらない。これはオブジェクト指向プログラミングであり、柔軟なんだ!
&lt;code&gt;PgPost&lt;/code&gt;のデコレータを作り、全てのデータをそのコンストラクタで受け取って内部で永遠にキャッシュしよう。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;@Immutable
final class ConstPost implements Post {
  private final Post origin;
  private final Date dte;
  private final String ttl;
  public ConstPost(Post post, Date date, String title) {
    this.origin = post;
    this.dte = date;
    this.ttl = title;
  }
  public int id() {
    return this.origin.id();
  }
  public Date date() {
    return this.dte;
  }
  public String title() {
    return this.ttl;
  }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;このデコレータはPostgreSQLやJDBCについて何も関与しないことに注目してほしい。
単に&lt;code&gt;Post&lt;/code&gt;オブジェクトをデコレートして日付(date)とタイトル(title)をキャッシュするだけだ。
例によってこのデコレータは不変だ。&lt;/p&gt;

&lt;p&gt;さて、&lt;code&gt;Posts&lt;/code&gt;の別の実装を作って、「定数」オブジェクトを返すようにしてみよう。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;@Immutable
final class ConstPgPosts implements Posts {
  // ...
  public Iterable&amp;lt;Post&amp;gt; iterate() {
    return new JdbcSession(this.dbase)
      .sql(&amp;quot;SELECT * FROM post&amp;quot;)
      .select(
        new ListOutcome&amp;lt;Post&amp;gt;(
          new ListOutcome.Mapping&amp;lt;Post&amp;gt;() {
            @Override
            public Post map(final ResultSet rset) {
              return new ConstPost(
                new PgPost(rset.getInteger(1)),
                Utc.getTimestamp(rset, 2),
                rset.getString(3)
              );
            }
          }
        )
      );
  }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;今、この新しいクラスの&lt;code&gt;iterate()&lt;/code&gt;が返す全てのブログポストには、データベースとの一往復で取得された日付とタイトルが入っている。
デコレータやインターフェースの複数の実装を使うことで、どんな機能も望みどおりに構成することができる。
最も重要なことは、機能は拡張されたが設計は複雑になっていないことだ。クラスのサイズが大きくなっていないからね。
代わりに、小さく、それ故強度と凝集度が高い新しいクラスを導入した。&lt;/p&gt;

&lt;h1 id=&#34;トランザクションは&#34;&gt;トランザクションは?&lt;/h1&gt;

&lt;p&gt;全てのオブジェクトはそれ自身のトランザクションを扱い、それを&lt;code&gt;SELECT&lt;/code&gt;や&lt;code&gt;INSERT&lt;/code&gt;と同様にカプセル化すべきだ。
これはトランザクションのネストにつながる。
トランザクションのネストは、データベースサーバがサポートしていれば全く素晴らしいものだ。
サポートされていなければ、セッション全体に渡るトランザクションを表すオブジェクトを作り、「callable」クラスを受け取ればいい。
以下がその例。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;final class Txn {
  private final DataSource dbase;
  public &amp;lt;T&amp;gt; T call(Callable&amp;lt;T&amp;gt; callable) {
    JdbcSession session = new JdbcSession(this.dbase);
    try {
      session.sql(&amp;quot;START TRANSACTION&amp;quot;).exec();
      T result = callable.call();
      session.sql(&amp;quot;COMMIT&amp;quot;).exec();
      return result;
    } catch (Exception ex) {
      session.sql(&amp;quot;ROLLBACK&amp;quot;).exec();
      throw ex;
    }
  }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;そして、ひとつのトランザクションに複数のオブジェクト操作をラップしたい場合はこのようにする。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;new Txn(dbase).call(
  new Callable&amp;lt;Integer&amp;gt;() {
    @Override
    public Integer call() {
      Posts posts = new PgPosts(dbase);
      Post post = posts.add(new Date(), &amp;quot;How to cook an omelette&amp;quot;);
      posts.comments().post(&amp;quot;This is my first comment!&amp;quot;);
      return post.id();
    }
  }
);
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;このコードは新しいブログポストを作ってコメントを加える。
もし処理に失敗したら、トランザクション全体がロールバックされる。&lt;/p&gt;

&lt;p&gt;私にはこのアプローチがオブジェクト指向に見える。
私はこれを「SQLを話すオブジェクト」と呼んでいる。
なぜなら、このオブジェクトはデータベースサーバとSQLを話す方法を知っているからだ。
それはオブジェクトのスキルで、完璧に内部にカプセル化されている。&lt;/p&gt;

&lt;p&gt;&lt;div class=&#34;embed video-player&#34; style=&#34;text-align: center&#34;&gt;
  &lt;iframe class=&#34;youtube-player&#34; type=&#34;text/html&#34; width=&#34;320&#34; height=&#34;193&#34; src=&#34;http://www.youtube.com/embed/DEqcn4-freM&#34; allowfullscreen frameborder=&#34;0&#34;&gt;
  &lt;/iframe&gt;
&lt;/div&gt;
&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;以上がYegorの記事。&lt;/p&gt;

&lt;p&gt;ORMはHibernateをちょっと使ったことがあるくらい。
IPAのデータベーススペシャリストの試験を申し込んだものの参考書が理解できなくてあきらめた過去もあり、この分野には苦手意識があって、あまり大きい声は出せない。&lt;/p&gt;

&lt;p&gt;Hibernateについてちょっと言えば、使い始めはすばらしいものに見えて興奮するが、だんだんとその融通の利かなさにうんざりしてきて、結局DAOとかにSQLを書きまくったり、自分でデータをキャッシュする仕組みを書いたりする羽目になる、というイメージ。
Hibernateを初歩的に使うと一行もSQL(やHQL)を書かずにRDBを使うアプリケーションを書けるので、ORMはSQLを学ぶコストをカットするためのツールであると勘違いしてしまうが、実際にはインピーダンスミスマッチの解決が主目的であって、実用に際してはRDBとSQLへの深い知識が必要になる。&lt;/p&gt;

&lt;p&gt;もちろんこれはORMの「実用的な問題」であって、Yegorが書いていることとは違う。&lt;/p&gt;

&lt;p&gt;日本では、Yegorも挙げているLaurie Vossの&lt;a href=&#34;http://seldo.com/weblog/2011/08/11/orm_is_an_antipattern&#34;&gt;2011年半ばのブログポスト&lt;/a&gt;がきっかけでORMの問題が話題になったようだ。
これは&lt;a href=&#34;https://ja.wikipedia.org/wiki/NoSQL&#34;&gt;NoSQL&lt;/a&gt;が日本で大きく取り上げられ始めた時期ともかぶっている気がする。
もっと前から本当に性能にシビアなWebサービス界ではNoSQLを使うのが主流になっていたみたいだけど。
これはGoogle、Amazon、FacebookといったWebサービス企業のカリスマがNoSQLを押したのもあるか。
ホリエモンもエンジニアだったころ自社のサービスを作った時に使ったとか。これは15年以上前の話だから、かなり先見性があったんだな。&lt;/p&gt;

&lt;p&gt;今RDBをもっとも使っている分野であろうエンタープライズ向けのシステムやパッケージソフトも、サービス化が大きなトレンドであり、それに加えてマルチテナント化が進めば扱うデータ量が増え、性能に対してどんどんシビアになり、NoSQLを取り入れる動きが増えるんだろう。
&lt;a href=&#34;http://japan.zdnet.com/article/35061140/&#34;&gt;2015年はNoSQL元年&lt;/a&gt;なんて記事もある。この記事によれば、NoSQLは大量の非構造化データを扱うIoTやM2Mの分野に有効だそうな。&lt;/p&gt;

&lt;p&gt;まあこれもYegorが書いていることとは関係ないけど。&lt;/p&gt;

&lt;p&gt;Yegorが言っていること、ORMは本来オブジェクトの仕事であるものを取り上げてしまうのでだめだという理屈は、オブジェクト原理主義者から見ればそうなのかもしれないが、一般の開発者から見ればそれがいいんじゃないかという話になって、議論はかみ合わない。
Yegor自身が前半で書いているORMを使ったコードより、後半のOOP原理的コードの方がかなり長い。
それってORMを使った方がやっぱりいいんじゃないのという感想を持つ人が多いのでは。(少なくとも「実用的な問題」を抜きにすれば。)&lt;/p&gt;

&lt;p&gt;オブジェクト原理主義をしっかり理解し、そのメリットを知らなければYegorの説教も馬の耳にだ。というわけで、次は&lt;a href=&#34;http://www.yegor256.com/2014/11/20/seven-virtues-of-good-object.html&#34;&gt;Seven Virtues of a Good Object&lt;/a&gt;を読むか。(&lt;a href=&#34;http://tbd.kaitoy.xyz/2015/10/28/seven-virtues-of-good-object/&#34;&gt;訳した。&lt;/a&gt;)&lt;/p&gt;
</description>
        </item>
      
    
      
        <item>
          <title>AtomにおけるGIF画像のキャッシュ</title>
          <link>http://tbd.kaitoy.xyz/2015/09/07/caching-gifs-on-atom/</link>
          <pubDate>Mon, 07 Sep 2015 20:10:31 MDT</pubDate>
          <author>Kaito Yamada</author>
          <guid>http://tbd.kaitoy.xyz/2015/09/07/caching-gifs-on-atom/</guid>
          <description>

&lt;p&gt;以前、&lt;a href=&#34;https://atom.io/packages/disturb-me&#34;&gt;&lt;strong&gt;disturb-me&lt;/strong&gt;&lt;/a&gt;という&lt;a href=&#34;https://atom.io/&#34;&gt;&lt;strong&gt;Atom&lt;/strong&gt;&lt;/a&gt;パッケージを作ったという&lt;a href=&#34;http://tbd.kaitoy.xyz/2015/09/06/disturb-me/&#34;&gt;エントリ&lt;/a&gt;を書いた。
このエントリでは、disturb-meに見つけたバグの修正のなかで、AtomがGIF画像をキャッシュする問題に対応したという話を書く。&lt;/p&gt;

&lt;h2 id=&#34;disturb-meのバグ&#34;&gt;disturb-meのバグ&lt;/h2&gt;

&lt;p&gt;&lt;a href=&#34;http://tbd.kaitoy.xyz/2015/09/06/disturb-me/#6-%E3%83%AA%E3%83%AA%E3%83%BC%E3%82%B9%E3%81%AA%E3%81%A9&#34;&gt;以前のエントリの最後&lt;/a&gt;にも書いた通り、disturb-me 1.0.0には、ループしないGIFアニメーション画像を設定で指定した場合、そのアニメーションが画像の初回表示時にしか再生されないというバグがある。&lt;/p&gt;

&lt;p&gt;disturb-meは、&lt;code&gt;Ctrl+Alt+d Ctrl+Alt+m&lt;/code&gt;と入力すると画像を表示し、もう一度それを入力すると画像を消す。
デフォルトで表示する画像はAtomのロゴで、表示を始める時と消す時にGIF画像でループしないアニメーションを再生する。&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://github.com/kaitoy/disturb-me/raw/master/assets/disturb-me-demo.gif&#34; alt=&#34;screenshot&#34; /&gt;
&lt;/p&gt;

&lt;p&gt;&lt;br&gt;&lt;/p&gt;

&lt;p&gt;このデフォルトの状態で、一度Atomロゴを表示して消して、再度表示して消すと、消すときのアニメーションが再生されない。(表示を始める時のアニメーションはなぜか再生される。)&lt;/p&gt;

&lt;h2 id=&#34;バグの原因&#34;&gt;バグの原因&lt;/h2&gt;

&lt;p&gt;disturb-meは、&lt;code&gt;img&lt;/code&gt;タグをAtomウィンドウ内に追加した後、その&lt;code&gt;src&lt;/code&gt;属性に画像へのパスをセットして画像を表示させるが、どうもAtom(のChromium)が画像をキャッシュしてくれるせいで、一度表示し終わったGIFアニメーションは二度と再生されない模様。
なぜ表示開始時のアニメーションが再生されるかは不明。&lt;/p&gt;

&lt;h2 id=&#34;バグ修正&#34;&gt;バグ修正&lt;/h2&gt;

&lt;p&gt;外部リソースをロードするときにブラウザによるキャッシュを回避するには、URLにランダムな値をもつクエリストリングを付けるのが常套手段。&lt;/p&gt;

&lt;p&gt;今回のバグも、&lt;code&gt;src&lt;/code&gt;にセットするGIF画像のパス(URL)にそのようなクエリストリングをつければよい。
例えば、&lt;strong&gt;C:\images\hoge.gif&lt;/strong&gt;を表示したいなら、&lt;code&gt;&amp;lt;img src=&amp;quot;C:\images\hoge.gif?time=1441559906660&amp;quot;&amp;gt;&amp;lt;img&amp;gt;&lt;/code&gt;という風にする。
ここでtimeの値には&lt;code&gt;Date.now()&lt;/code&gt;とかで毎回違う値を生成して使う。&lt;/p&gt;

&lt;h2 id=&#34;atomプロトコルの問題&#34;&gt;Atomプロトコルの問題&lt;/h2&gt;

&lt;p&gt;ここで一つ問題が。disturb-meがデフォルトで使うAtomロゴの画像はパッケージに含まれていて、そういうリソースのURLには&lt;a href=&#34;https://atom.io/docs/latest/creating-a-package#bundle-external-resources&#34;&gt;&lt;strong&gt;Atomプロトコル&lt;/strong&gt;&lt;/a&gt;を使うのが普通。
Atomプロトコルを使うと、&lt;code&gt;atom://disturb-me/assets/atom/white/atom_born.gif&lt;/code&gt;みたいに書いて、パッケージ内の相対パスでリソースを指定できる。&lt;/p&gt;

&lt;p&gt;このAtomプロトコルが、今の時点(Atom v1.0.11)でクエリストリングに対応していない。困った。&lt;/p&gt;

&lt;h2 id=&#34;atomプロトコルの問題への対応&#34;&gt;Atomプロトコルの問題への対応&lt;/h2&gt;

&lt;p&gt;いい機会なので、Atomのソースをfork、cloneして、Atomプロトコルを(簡易的に)クエリストリングに対応させ、ビルドして確認し、プルリクエストを送ってみた。これについてはまた別のエントリで書くかもしれない。&lt;/p&gt;

&lt;p&gt;このプルリクエストが取り込まれるまでの暫定対策として、&lt;a href=&#34;https://github.com/atom/atom/blob/master/src/browser/atom-protocol-handler.coffee&#34;&gt;Atomプロトコルハンドラのソース&lt;/a&gt;を見て、AtomプロトコルのURLからリソースのファイルシステム上での絶対パスを導いている部分をdisturb-me内にパクって、&lt;code&gt;src&lt;/code&gt;にセットする値として&lt;code&gt;atom://&lt;/code&gt;を使わないようにした。&lt;/p&gt;

&lt;p&gt;これでちゃんと動いた。&lt;/p&gt;
</description>
        </item>
      
    
      
        <item>
          <title>Atomウィンドウ内で画像を動かすパッケージ - disturb-me</title>
          <link>http://tbd.kaitoy.xyz/2015/09/06/disturb-me/</link>
          <pubDate>Sun, 06 Sep 2015 20:18:14 MDT</pubDate>
          <author>Kaito Yamada</author>
          <guid>http://tbd.kaitoy.xyz/2015/09/06/disturb-me/</guid>
          <description>

&lt;p&gt;&lt;a href=&#34;https://atom.io/&#34;&gt;&lt;strong&gt;Atom&lt;/strong&gt;&lt;/a&gt;のパッケージを見ていて、便利なパッケージが沢山あるなぁと思いつつ、真面目なパッケージばかりでもつまらないので、たまには不真面目で役に立たないパッケージがあってもいいかと思って作ったパッケージの話。&lt;/p&gt;

&lt;h2 id=&#34;disturb-me&#34;&gt;disturb-me&lt;/h2&gt;

&lt;p&gt;作ったのは&lt;a href=&#34;https://atom.io/packages/disturb-me&#34;&gt;&lt;strong&gt;disturb-me&lt;/strong&gt;&lt;/a&gt;というパッケージ。
&lt;code&gt;Ctrl+Alt&lt;/code&gt;を押しながら&lt;code&gt;d&lt;/code&gt;と&lt;code&gt;m&lt;/code&gt;を押すとAtomウィンドウ内に画像が表示され、その画像がランダムに動き回り作業の邪魔をするというもの。&lt;/p&gt;

&lt;p&gt;画像はパッケージの設定から指定できる。デフォルトではAtomのロゴ。&lt;/p&gt;

&lt;p&gt;最初は&lt;strong&gt;pac-m●n&lt;/strong&gt;というパッケージ名にして、ゲーム界のミッキーことパ●クマンが動き回るパッケージにしようと思ってたけど、バンダイナムコからダメだと言われてしまった。
この構想はいつか&lt;a href=&#34;https://open.channel.or.jp/user.php&#34;&gt;カタログIPオープン化プロジェクト&lt;/a&gt;を利用して実現しようと思う。&lt;/p&gt;

&lt;h2 id=&#34;disturb-meの作り方&#34;&gt;disturb-meの作り方&lt;/h2&gt;

&lt;p&gt;以前&lt;a href=&#34;http://tbd.kaitoy.xyz/2015/08/21/japanese-word-selection/&#34;&gt;別のエントリ&lt;/a&gt;でAtomパッケージの作り方の基本について書いたので、ここではそこで書かなかったことを書く。&lt;/p&gt;

&lt;h4 id=&#34;1-メインスクリプト-コマンド&#34;&gt;1. メインスクリプト - コマンド&lt;/h4&gt;

&lt;p&gt;今回はコマンドを追加するので&lt;a href=&#34;https://atom.io/docs/api/latest/CommandRegistry&#34;&gt;&lt;strong&gt;CommandRegistry&lt;/strong&gt;&lt;/a&gt;を使う。
CommandRegistryのインスタンスには&lt;strong&gt;atom.commands&lt;/strong&gt;でアクセスでき、その&lt;strong&gt;add&lt;/strong&gt;メソッドでコマンドを追加できる。&lt;/p&gt;

&lt;p&gt;addメソッドの引数は、第一引数から順に、&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;target: コマンドを有効にするDOM要素か、それを示すCSSセレクタ。&lt;/li&gt;
&lt;li&gt;commandName: コマンドパレットに表示するコマンド名。全部小文字で、単語をハイフンでつないで、パッケージ名を先頭につけるのがルール。&lt;/li&gt;
&lt;li&gt;callback(event): コマンドを実行したときに呼ばれるメソッド。&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;br&gt;&lt;/p&gt;

&lt;p&gt;disturb-meのコマンドはAtomウィンドウ内のどこでも有効にしたいので、第一引数にはAtomウィンドウを表すカスタムタグである&lt;strong&gt;atom-workspace&lt;/strong&gt;を指定する。
コードは以下の感じ。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-coffeescript&#34;&gt;  activate: (state) -&amp;gt;
    @subscriptions = new CompositeDisposable
    @subscriptions.add atom.commands.add &#39;atom-workspace&#39;, &#39;disturb-me:toggle&#39;: =&amp;gt; @toggle()

  toggle: -&amp;gt;
    # 画像を挿入したり削除したりするコード。
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;br&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;toggle&lt;/strong&gt;の中では画像を挿入したり削除したりするわけだけど、この処理は、その画像を表す別のクラスにまかせることにする。
のでtoggleは以下のように書く。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-coffeescript&#34;&gt;  @disturber: null

  toggle: -&amp;gt;
    if @disturber?
      @disturber.stop()
      @disturber = null
    else
      @disturber = new Disturber()
      document.body.appendChild(@disturber.getElement())
      @disturber.start()
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;strong&gt;Disturber&lt;/strong&gt;が画像を表すクラス。別のファイル(&lt;strong&gt;lib/disturber.coffee&lt;/strong&gt;)の中で定義して、スクリプトの先頭辺りで&lt;code&gt;Disturber = require &#39;./disturber&#39;&lt;/code&gt;のようにインポートする。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;document.body.appendChild&lt;/strong&gt;しているところは、何かAtomのAPI(&lt;a href=&#34;https://atom.io/docs/api/latest/ViewRegistry&#34;&gt;&lt;strong&gt;ViewRegistry&lt;/strong&gt;&lt;/a&gt;とか)を使うべきなのかも。&lt;/p&gt;

&lt;h4 id=&#34;2-disturber&#34;&gt;2. Disturber&lt;/h4&gt;

&lt;p&gt;Disturberは以下のように書く。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-coffeescript&#34;&gt;module.exports =
class Disturber

  element: null

  constructor: -&amp;gt;
    # &amp;lt;img&amp;gt;を作って@elementに入れる。

  destroy: -&amp;gt;
    # @elementをDOMツリーから削除する。

  getElement: -&amp;gt;
    # @element返す。

  start: -&amp;gt;
    # @elementのsrcを設定して、ランダムに動かし始める。

  stop: -&amp;gt;
    # @elementを止める。
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;あまり取り立てて書くことないな…。&lt;/p&gt;

&lt;p&gt;因みに画像を動かすのには&lt;a href=&#34;https://www.npmjs.com/package/velocity-animate&#34;&gt;&lt;strong&gt;Velocity&lt;/strong&gt;&lt;/a&gt;を使い、DOMの操作とかにちょっと&lt;a href=&#34;https://www.npmjs.com/package/jquery&#34;&gt;&lt;strong&gt;jQuery&lt;/strong&gt;&lt;/a&gt;を使う。&lt;/p&gt;

&lt;h4 id=&#34;3-パッケージ設定&#34;&gt;3. パッケージ設定&lt;/h4&gt;

&lt;p&gt;動かす画像や動かす速度はユーザが設定できるようにする。
設定はメインスクリプトで定義でき、その値には&lt;a href=&#34;https://atom.io/docs/api/latest/Config&#34;&gt;&lt;strong&gt;Config&lt;/strong&gt;&lt;/a&gt;クラスでアクセスできる。&lt;/p&gt;

&lt;p&gt;メインスクリプトでの定義は以下のように書く。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-coffeescript&#34;&gt;module.exports = DisturbMe =
  disturber: null
  subscriptions: null

  config:
    bornImage:
      title: &#39;Born-Image&#39;
      type: &#39;string&#39;
      default: &#39;atom://disturb-me/assets/atom/white/atom_born.gif&#39;
    bornDuration:
      title: &#39;Born-Duration&#39;
      type: &#39;integer&#39;
      default: 2000
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;するとパッケージ設定画面が以下のようになる。&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://tbd.kaitoy.xyz/images/disturb-me/settings.jpg&#34; alt=&#34;settings&#34; /&gt;
&lt;/p&gt;

&lt;p&gt;&lt;br&gt;&lt;/p&gt;

&lt;p&gt;各設定の定義に最低限必要な属性は&lt;strong&gt;type&lt;/strong&gt;と&lt;strong&gt;default&lt;/strong&gt;。オプショナルなものに&lt;strong&gt;title&lt;/strong&gt;、&lt;strong&gt;description&lt;/strong&gt;などがある。
typeには、&lt;strong&gt;string&lt;/strong&gt;、&lt;strong&gt;integer&lt;/strong&gt;、&lt;strong&gt;number&lt;/strong&gt;、&lt;strong&gt;boolean&lt;/strong&gt;、&lt;strong&gt;array&lt;/strong&gt;、&lt;strong&gt;object&lt;/strong&gt;、&lt;strong&gt;color&lt;/strong&gt;を指定できる。
詳しくは&lt;a href=&#34;https://atom.io/docs/api/latest/Config&#34;&gt;&lt;strong&gt;Config&lt;/strong&gt;&lt;/a&gt;クラスの説明に載ってる。&lt;/p&gt;

&lt;p&gt;Configクラスのインスタンスには&lt;strong&gt;atom.config&lt;/strong&gt;でアクセスでき、上で定義した設定を以下のように操作できる。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-coffeescript&#34;&gt;imagePath = atom.config.get(&#39;disturb-me.bornImage&#39;)
atom.config.set(&#39;disturb-me.bornDuration&#39;, &#39;1000&#39;)
&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id=&#34;4-キーバインディング&#34;&gt;4. キーバインディング&lt;/h4&gt;

&lt;p&gt;メインスクリプト内でコマンドパレットに表示するコマンドを定義したが、これにキーボードショートカット(キーバインディング)を設定する。&lt;/p&gt;

&lt;p&gt;キーバインディングは&lt;strong&gt;keymaps&lt;/strong&gt;フォルダの中の&lt;strong&gt;cson&lt;/strong&gt;ファイルで以下のように定義する。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-cson&#34;&gt;&#39;atom-workspace&#39;:
  &#39;ctrl-alt-d ctrl-alt-m&#39;: &#39;disturb-me:toggle&#39;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;これ見ればだいたい書き方はわかるはず。(詳細は&lt;a href=&#34;https://atom.io/docs/latest/behind-atom-keymaps-in-depth&#34;&gt;Atom Flight Manual&lt;/a&gt;に。)&lt;/p&gt;

&lt;p&gt;特殊キーは&lt;strong&gt;cmd&lt;/strong&gt;、&lt;strong&gt;ctrl&lt;/strong&gt;、&lt;strong&gt;alt&lt;/strong&gt;、&lt;strong&gt;shift&lt;/strong&gt;、&lt;strong&gt;enter&lt;/strong&gt;、&lt;strong&gt;escape&lt;/strong&gt;、&lt;strong&gt;backspace&lt;/strong&gt;、&lt;strong&gt;delete&lt;/strong&gt;、&lt;strong&gt;tab&lt;/strong&gt;、&lt;strong&gt;home&lt;/strong&gt;、&lt;strong&gt;end&lt;/strong&gt;、&lt;strong&gt;pageup&lt;/strong&gt;、&lt;strong&gt;pagedown&lt;/strong&gt;、&lt;strong&gt;left&lt;/strong&gt;、&lt;strong&gt;right&lt;/strong&gt;、&lt;strong&gt;up&lt;/strong&gt;、&lt;strong&gt;down&lt;/strong&gt;が使える。&lt;/p&gt;

&lt;p&gt;同時に押すキーはハイフンでつなぎ、連続して押すキーはスペースで区切るので、上記&lt;code&gt;ctrl-alt-d ctrl-alt-m&lt;/code&gt;は、&lt;code&gt;Ctrl+Alt&lt;/code&gt;を押しながら&lt;code&gt;d&lt;/code&gt;と&lt;code&gt;m&lt;/code&gt;を連続して押す、という意味。&lt;/p&gt;

&lt;h4 id=&#34;5-package-json&#34;&gt;5. package.json&lt;/h4&gt;

&lt;p&gt;&lt;a href=&#34;http://tbd.kaitoy.xyz/2015/08/21/japanese-word-selection/#5-package-json%E7%B7%A8%E9%9B%86&#34;&gt;前回&lt;/a&gt;と同様の編集に加えて、今回は二つのnpmパッケージに依存するので、&lt;strong&gt;dependencies&lt;/strong&gt;を以下のように書く。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-json&#34;&gt;  &amp;quot;dependencies&amp;quot;: {
    &amp;quot;velocity-animate&amp;quot;: &amp;quot;&amp;gt;=1.2.0&amp;quot;,
    &amp;quot;jquery&amp;quot;: &amp;quot;&amp;gt;=2.0.0&amp;quot;
  }
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;これを書いて、プロジェクトルートフォルダで&lt;code&gt;apm install&lt;/code&gt;すると、ルート直下の&lt;strong&gt;node_modules&lt;/strong&gt;フォルダに依存モジュールがインストールされる。&lt;/p&gt;

&lt;p&gt;node_modulesは&lt;strong&gt;Package Generator&lt;/strong&gt;が生成する&lt;strong&gt;.gitignore&lt;/strong&gt;に入っているので、リポジトリには入らない。&lt;/p&gt;

&lt;h4 id=&#34;6-リリースなど&#34;&gt;6. リリースなど&lt;/h4&gt;

&lt;p&gt;&lt;a href=&#34;http://tbd.kaitoy.xyz/2015/08/21/japanese-word-selection/&#34;&gt;前回&lt;/a&gt;と同様にリリースする。
めんどいのでテストは書かない。&lt;/p&gt;

&lt;p&gt;リリース後、ループしないgifアニメーション画像をdisturb-meに使った場合、そのアニメーションが再生されない場合があるバグに気付いた。
これについては&lt;a href=&#34;http://tbd.kaitoy.xyz/2015/09/07/caching-gifs-on-atom/&#34;&gt;別のエントリ&lt;/a&gt;で書いた。&lt;/p&gt;
</description>
        </item>
      
    
      
        <item>
          <title>GitHub Pagesでブログ立ち上げ - Hugoを使う</title>
          <link>http://tbd.kaitoy.xyz/2015/08/28/using-hugo/</link>
          <pubDate>Fri, 28 Aug 2015 23:36:21 MDT</pubDate>
          <author>Kaito Yamada</author>
          <guid>http://tbd.kaitoy.xyz/2015/08/28/using-hugo/</guid>
          <description>

&lt;p&gt;&lt;a href=&#34;http://tbd.kaitoy.xyz/2015/08/25/tools-for-jekyll/&#34;&gt;&lt;strong&gt;GitHub Pagesでブログ立ち上げ - Jekyllのためのツール&lt;/strong&gt;&lt;/a&gt;の続き。
前回は、&lt;a href=&#34;https://pages.github.com/&#34;&gt;&lt;strong&gt;GitHub Pages&lt;/strong&gt;&lt;/a&gt;で公開するブログサイトを構築するのに、&lt;a href=&#34;http://jekyllrb.com/docs/home/&#34;&gt;&lt;strong&gt;Jekyll&lt;/strong&gt;&lt;/a&gt;とJekyll関連ツールを使おうと四苦八苦したが、結局Jekyllに見切りをつけ、&lt;a href=&#34;https://gohugo.io/&#34;&gt;&lt;strong&gt;Hugo&lt;/strong&gt;&lt;/a&gt;を使うことに決めた。&lt;/p&gt;

&lt;h2 id=&#34;hugoとは&#34;&gt;Hugoとは&lt;/h2&gt;

&lt;p&gt;Hugoは、国内では2014年末くらいから盛り上がってきているブログサイト構築ツール。
そのホームページによると、ウェブサイトフレームワークで、静的サイトジェネレータとのこと。&lt;/p&gt;

&lt;p&gt;フレームワークと名乗ってはいるが、その正体は、&lt;a href=&#34;https://ja.wikipedia.org/wiki/Markdown&#34;&gt;&lt;strong&gt;Markdown&lt;/strong&gt;&lt;/a&gt;で書かれた記事を元にブログサイトのソースを生成するコンテントビルド機能と、記事作成(など)を支援するユーティリティ機能を持ったコマンドラインツール。&lt;/p&gt;

&lt;p&gt;また、静的サイトジェネレータというのは、静的なサイトを生成するという意味ではなく、静的にサイトを生成するという意味。もっと言えば、WordPressとかがアクセス時にビルドが走るのに対し、Hugoを使った場合は事前にビルド済みのものをサーバにアップロードすることになる、ということ。らしい。WordPressは使ったことがないのでよく知らないが、Hugoのホームページにそう書いてある。
つまり、Hugoは静的なサイトだけを扱うツールってわけではないので、JavaScriptとかを駆使して動的でインタラクティブなページを作ってもいいはず。&lt;/p&gt;

&lt;h2 id=&#34;hugoのインストール&#34;&gt;Hugoのインストール&lt;/h2&gt;

&lt;p&gt;&lt;a href=&#34;http://gohugo.io/overview/installing/&#34;&gt;インストールガイド&lt;/a&gt;に従ってHugoをインストールする。&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://github.com/spf13/hugo/releases&#34;&gt;HugoのGitHub Releases&lt;/a&gt;からWindows用バイナリをダウンロード。このときはバージョン0.14が最新だったので、&lt;strong&gt;hugo_0.14_windows_amd64.zip&lt;/strong&gt;をダウンロードした。&lt;/p&gt;

&lt;p&gt;このzipの中身は&lt;strong&gt;hugo_0.14_windows_amd64.exe&lt;/strong&gt;というバイナリ一つとLICENSE.mdとREADME.mdだけ。
このhugo_0.14_windows_amd64.exeがHugoのすべてなので、これを適当な場所において実行できるようにしとけばよい。
今回は、&lt;strong&gt;hugo.bat&lt;/strong&gt;というファイルに以下の内容を書き、PATHの通ったフォルダにいれた。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bat&#34;&gt;@echo off
C:\Users\Kaito\Desktop\tool\hugo_0.14_windows_amd64\hugo_0.14_windows_amd64.exe %*
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;br&gt;&lt;/p&gt;

&lt;p&gt;これで、どこからでも&lt;code&gt;hugo [arguments]&lt;/code&gt;と打てばHugoコマンドが実行できる。&lt;/p&gt;

&lt;h2 id=&#34;hugoのシンタックスハイライト&#34;&gt;Hugoのシンタックスハイライト&lt;/h2&gt;

&lt;p&gt;&lt;a href=&#34;http://gohugo.io/extras/highlighting/&#34;&gt;ドキュメント&lt;/a&gt;によると、Hugoでは&lt;a href=&#34;https://ja.wikipedia.org/wiki/%E3%82%B7%E3%83%B3%E3%82%BF%E3%83%83%E3%82%AF%E3%82%B9%E3%83%8F%E3%82%A4%E3%83%A9%E3%82%A4%E3%83%88&#34;&gt;シンタックスハイライト&lt;/a&gt;を実現する方法を以下の2つから選べる。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;サーバサイド: Hugoでのブログサイト生成時にハイライトしておく方法。&lt;/li&gt;
&lt;li&gt;クライアントサイド: クライアントがブログを読み込んだ時にJavaScriptでハイライトする方法。&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;前者の方が当然クライアントの負荷が軽くなるが、&lt;a href=&#34;http://pygments.org/&#34;&gt;&lt;strong&gt;Pygments&lt;/strong&gt;&lt;/a&gt;のインストールが必要だったりめんどくさそうなので後者にする。(Pygmentsは&lt;a href=&#34;http://tbd.kaitoy.xyz/2015/08/15/github-pages-and-jekyll/&#34;&gt;Jekyllのとき&lt;/a&gt;にすでに入れたけど…)&lt;/p&gt;

&lt;h2 id=&#34;hugo味見&#34;&gt;Hugo味見&lt;/h2&gt;

&lt;p&gt;&lt;a href=&#34;https://gohugo.io/commands/&#34;&gt;Hugoコマンドリファレンス&lt;/a&gt;を見つつ、Hugoの味見をする。&lt;/p&gt;

&lt;p&gt;サイトのひな形を作るコマンドは&lt;code&gt;hugo new site [path]&lt;/code&gt;。&lt;code&gt;hugo new site blog&lt;/code&gt;を実行して、&lt;strong&gt;blog&lt;/strong&gt;という名のフォルダにサイトの初期ソースを生成。blogの部分はファイルもフォルダも存在しないパスを指定する。&lt;/p&gt;

&lt;p&gt;この時点で、blogフォルダ内には以下のものが入っている。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://gohugo.io/content/archetypes/&#34;&gt;&lt;strong&gt;archetypes&lt;/strong&gt;&lt;/a&gt;: 新規記事作成時に自動で挿入される&lt;a href=&#34;https://gohugo.io/content/front-matter/&#34;&gt;&lt;strong&gt;Front Matter&lt;/strong&gt;&lt;/a&gt; (後述)のカスタマイズをするためのファイルを置くフォルダ。&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://gohugo.io/content/organization/&#34;&gt;&lt;strong&gt;content&lt;/strong&gt;&lt;/a&gt;: ブログのコンテンツ(記事など)を置くフォルダ。&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://gohugo.io/extras/datafiles/&#34;&gt;&lt;strong&gt;data&lt;/strong&gt;&lt;/a&gt;: サイト生成時に使うデータを置くフォルダ。&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://gohugo.io/templates/overview/&#34;&gt;&lt;strong&gt;layouts&lt;/strong&gt;&lt;/a&gt;: サイトのレイアウトを定義するファイルを置くフォルダ。&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://gohugo.io/themes/creation&#34;&gt;&lt;strong&gt;static&lt;/strong&gt;&lt;/a&gt;: CSSとかJavaScriptとか画像とかのファイルを置くフォルダ。&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://gohugo.io/overview/configuration/&#34;&gt;&lt;strong&gt;config.toml&lt;/strong&gt;&lt;/a&gt;: 設定ファイル。これは&lt;a href=&#34;https://github.com/toml-lang/toml&#34;&gt;&lt;strong&gt;TOML&lt;/strong&gt;&lt;/a&gt;だが、&lt;a href=&#34;https://ja.wikipedia.org/wiki/YAML&#34;&gt;&lt;strong&gt;YAML&lt;/strong&gt;&lt;/a&gt;か&lt;a href=&#34;https://ja.wikipedia.org/wiki/JavaScript_Object_Notation&#34;&gt;&lt;strong&gt;JSON&lt;/strong&gt;&lt;/a&gt;でもいい。&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;br&gt;&lt;/p&gt;

&lt;p&gt;記事を作るコマンドは&lt;code&gt;hugo new  [path]&lt;/code&gt;。blogフォルダに&lt;code&gt;cd&lt;/code&gt;して、二つ記事を作ってみる。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-cmd&#34;&gt;hugo new about.md
hugo new post/first_post.md
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;strong&gt;blog\content\about.md&lt;/strong&gt;と&lt;strong&gt;blog\content\post\first_post.md&lt;/strong&gt;が生成された。
これらには、Front Matterという、記事のメタ情報が自動で書き込まれる。
デフォルトで書き込まれるのは、日付 (&lt;strong&gt;date&lt;/strong&gt;)、ドラフトフラグ (&lt;strong&gt;draft&lt;/strong&gt;)、タイトル (&lt;strong&gt;title&lt;/strong&gt;)だけだが、
&lt;a href=&#34;https://gohugo.io/content/archetypes/&#34;&gt;&lt;strong&gt;Archetypes&lt;/strong&gt;&lt;/a&gt;という機能でカスタマイズできる。
が、今はやらない。&lt;/p&gt;

&lt;p&gt;about.mdとfirst_post.mdには適当に記事の内容を書いておく。&lt;/p&gt;

&lt;p&gt;&lt;br&gt;&lt;/p&gt;

&lt;p&gt;次に&lt;a href=&#34;https://gohugo.io/themes/overview/&#34;&gt;テーマ&lt;/a&gt;を設定する。テーマを使えば、自分でレイアウトを書く必要がない。&lt;/p&gt;

&lt;p&gt;テーマは&lt;a href=&#34;https://github.com/spf13/hugoThemes&#34;&gt;&lt;strong&gt;Hugo Themes&lt;/strong&gt;&lt;/a&gt;にリストされていて、ひとつひとつ選んでインストールもできるけど、今回は全部いっぺんにインストールして色々見てみる。blogフォルダ内で以下を実行すると、&lt;strong&gt;blog\themes&lt;/strong&gt;に全テーマがインストールされる。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-cmd&#34;&gt;git clone --recursive https://github.com/spf13/hugoThemes.git themes
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;br&gt;&lt;/p&gt;

&lt;p&gt;これで、以下のコマンドを実行すると、サイトがビルドされ、サーバが起動し、ブラウザで確認できる。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-cmd&#34;&gt;hugo server -t angels-ladder -D -w
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;code&gt;-t&lt;/code&gt;でテーマを指定している。指定するのは&lt;strong&gt;blog\themes&lt;/strong&gt;内のフォルダ名。&lt;code&gt;-D&lt;/code&gt;はドラフト記事をビルドしたいときにつけるオプション。さっき作ったabout.mdとfirst_post.mdは、そのFront Matterのdraftがtrueになっていて、つまりドラフトなので、&lt;code&gt;-D&lt;/code&gt;を付けないとビルドされない。&lt;code&gt;-w&lt;/code&gt;は&lt;a href=&#34;https://gohugo.io/extras/livereload/&#34;&gt;&lt;strong&gt;LiveReload&lt;/strong&gt;&lt;/a&gt;を有効にするフラグで、付けておくとソースを修正したら自動でリビルドとブラウザのリロードが実行される。(変更を監視されるのはサブフォルダ内だけ。config.tomlの変更は無視される。)&lt;/p&gt;

&lt;p&gt;サーバには&lt;strong&gt;&lt;a href=&#34;http://localhost:1313/&#34;&gt;http://localhost:1313/&lt;/a&gt;&lt;/strong&gt;でアクセスできる。今回指定したテーマangels-ladderだと、トップページにfirst_post.mdの記事へのリンクがあり、その内容を確認できる。about.mdの方はリンクはなく、直接&lt;strong&gt;&lt;a href=&#34;http://localhost:1313/about/&#34;&gt;http://localhost:1313/about/&lt;/a&gt;&lt;/strong&gt;アクセスしないと見れない。この辺りはテーマ(と設定?)によって異なるのかな。
まあabout.mdは試しに作ってみただけなので消しておく。&lt;/p&gt;

&lt;p&gt;&lt;code&gt;hugo server&lt;/code&gt;の&lt;code&gt;-t&lt;/code&gt;に与える値を変えれば簡単にテーマを切り替えられるので、いろいろ見てみる。&lt;/p&gt;

&lt;p&gt;&lt;br&gt;&lt;/p&gt;

&lt;p&gt;以上で味見終わり。&lt;/p&gt;

&lt;h2 id=&#34;テーマの選定-robust&#34;&gt;テーマの選定 - Robust&lt;/h2&gt;

&lt;p&gt;Hugo Themesにあるテーマはどれもあまりしっくりこなかった。
もう自分で作ろうかと思っていたところ、&lt;a href=&#34;https://github.com/dim0627/hugo_theme_robust&#34;&gt;&lt;strong&gt;Robust&lt;/strong&gt;&lt;/a&gt;というテーマを見つけた。
&lt;a href=&#34;http://yet.unresolved.xyz/&#34;&gt;こんな感じ&lt;/a&gt;のページができる。いい。これを使うことにする。&lt;/p&gt;

&lt;p&gt;blogフォルダ内で、いったんthemesを消してから以下を実行してRobustをインストール。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bat&#34;&gt;&amp;gt; git init .
&amp;gt; git submodule add https://github.com/dim0627/hugo_theme_robust.git themes/hugo_theme_robust
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;ここでは、&lt;code&gt;git init&lt;/code&gt;でblogフォルダをGitリポジトリにして、&lt;code&gt;git submodule add&lt;/code&gt;で&lt;strong&gt;hugo_theme_robust&lt;/strong&gt; (RobustのGitHubプロジェクト)を&lt;a href=&#34;https://git-scm.com/book/ja/v1/Git-%E3%81%AE%E3%81%95%E3%81%BE%E3%81%96%E3%81%BE%E3%81%AA%E3%83%84%E3%83%BC%E3%83%AB-%E3%82%B5%E3%83%96%E3%83%A2%E3%82%B8%E3%83%A5%E3%83%BC%E3%83%AB&#34;&gt;サブモジュール&lt;/a&gt;として追加している。
こうすることで、blogとhugo_theme_robustを別々のリポジトリとして管理しつつ、hugo_theme_robustをblogの一部として使うことができる。&lt;/p&gt;

&lt;p&gt;&lt;br&gt;&lt;/p&gt;

&lt;p&gt;&lt;code&gt;hugo server&lt;/code&gt;するときやビルド時に毎回テーマを指定しなくてもいいように、
config.tomlに&lt;code&gt;theme = &amp;quot;hugo_theme_robust&amp;quot;&lt;/code&gt;を追記しておく。&lt;/p&gt;

&lt;h2 id=&#34;テーマのカスタマイズ&#34;&gt;テーマのカスタマイズ&lt;/h2&gt;

&lt;p&gt;テーマフォルダ内の構成はblogフォルダ(プロジェクトルート)内と同じようになっていて、Hugoがサイトをビルドするとき、プロジェクトルート内のフォルダとテーマフォルダ内のフォルダをマージしたものを使ってくれる。この際、プロジェクトルート内のファイルが優先される。&lt;/p&gt;

&lt;p&gt;つまり例えば以下のような構成のプロジェクトがあったとする。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;blog

&lt;ul&gt;
&lt;li&gt;layouts

&lt;ul&gt;
&lt;li&gt;hoge.html&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;themes

&lt;ul&gt;
&lt;li&gt;hugo_theme_robust

&lt;ul&gt;
&lt;li&gt;layouts

&lt;ul&gt;
&lt;li&gt;hoge.html&lt;/li&gt;
&lt;li&gt;foo.html&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Hugoはこれをビルドするとき、layouts内には&lt;strong&gt;blog\layouts\hoge.html&lt;/strong&gt;と&lt;strong&gt;blog\thmes\hugo_theme_robust\layouts\foo.html&lt;/strong&gt;があるものとして処理してくれる。テーマをちょっとカスタマイズしたいときに、テーマのソースをいじらないでいいのが便利。&lt;/p&gt;

&lt;p&gt;&lt;br&gt;&lt;/p&gt;

&lt;p&gt;Robustはとりあえず設定ファイルをカスタマイズすれば使える。設定ファイルは、Robustはconfig.yamlだけど、ルートにconfig.toml置いたらちゃんと上書きできた。&lt;/p&gt;

&lt;h2 id=&#34;記事の仕上げ&#34;&gt;記事の仕上げ&lt;/h2&gt;

&lt;p&gt;first_post.mdの内容を仕上げて、以下のコマンドでdraftフラグをオフにする。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bat&#34;&gt;&amp;gt; hugo undraft content\post\first_post.md
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;これをやるとdateも更新される。&lt;/p&gt;

&lt;h2 id=&#34;githubへソースを保存&#34;&gt;GitHubへソースを保存&lt;/h2&gt;

&lt;p&gt;blog内の変更をコミットして、GitHubにblogという名のリポジトリを作成して、以下のコマンドでソースをアップロードする。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bat&#34;&gt;&amp;gt; git remote add origin git@github.com:kaitoy/blog.git
&amp;gt; git push -u origin master
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;br&gt;&lt;/p&gt;

&lt;p&gt;また、ここで、&lt;strong&gt;gh-pages&lt;/strong&gt;というブランチを作り、中身を空にして、masterとは別途チェックアウトしておく。
コマンドは以下。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bat&#34;&gt;&amp;gt; git checkout -b gh-pages
&amp;gt; rm -rf *
&amp;gt; git rm -rf .
&amp;gt; git commit -m &amp;quot;Init GitHub Pages branch.&amp;quot;
&amp;gt; git push origin gh-pages
&amp;gt; git checkout master
&amp;gt; git clone -b gh-pages git@github.com:kaitoy/blog.git pages
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;これでgh-pagesブランチが&lt;strong&gt;blog\pages&lt;/strong&gt;フォルダに展開された。&lt;/p&gt;

&lt;p&gt;因みにgh-pagesは、&lt;a href=&#34;http://tbd.kaitoy.xyz/2015/08/15/github-pages-and-jekyll/#github-pages%E5%91%B3%E8%A6%8B&#34;&gt;以前のエントリ&lt;/a&gt;にも書いたが、GitHub Pagesで公開するサイトを置く特別なブランチ。&lt;/p&gt;

&lt;h2 id=&#34;ビルド-デプロイ&#34;&gt;ビルド・デプロイ&lt;/h2&gt;

&lt;p&gt;ビルドコマンドは単に&lt;code&gt;hugo&lt;/code&gt;。ビルド成果物はデフォルトで&lt;strong&gt;public&lt;/strong&gt;というフォルダに入る。
ここでは、pagesフォルダに入るように以下のコマンドでビルドする。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bat&#34;&gt;&amp;gt; hugo -d pages
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;br&gt;&lt;/p&gt;

&lt;p&gt;ビルド完了したら、pagesフォルダに&lt;code&gt;cd&lt;/code&gt;して、全てのファイルを&lt;code&gt;git add&lt;/code&gt;して、コミットしてプッシュすればデプロイ完了。
&lt;code&gt;https://kaitoy.github.io/blog/&lt;/code&gt;でサイトを確認できる。&lt;/p&gt;

&lt;h2 id=&#34;カスタムドメイン&#34;&gt;カスタムドメイン&lt;/h2&gt;

&lt;p&gt;サイトに&lt;code&gt;http://tbd.kaitoy.xyz&lt;/code&gt;でアクセスできるようにする。手順は以下。&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;a href=&#34;https://www.value-domain.com/&#34;&gt;&lt;strong&gt;VALUE-DOMAIN&lt;/strong&gt;&lt;/a&gt;でkaitoy.xyzを取得。&lt;/li&gt;
&lt;li&gt;VALUE-DOMAINのDNS設定に&lt;code&gt;cname tbd kaitoy.github.io.&lt;/code&gt;を追加。&lt;/li&gt;
&lt;li&gt;gh-pagesブランチのルートに&lt;strong&gt;CNAME&lt;/strong&gt;というファイルを作り、&lt;strong&gt;tbd.kaitoy.xyz&lt;/strong&gt;とだけ書いておく。&lt;/li&gt;
&lt;li&gt;config.tomlのbaseurlを&lt;strong&gt;&lt;a href=&#34;http://tbd.kaitoy.xyz&#34;&gt;http://tbd.kaitoy.xyz&lt;/a&gt;&lt;/strong&gt;に変更。ビルドしてプッシュ。&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;以上でブログサイト立ち上げ完了。あとはテーマをカスタマイズしたり、ひたすらエントリを書く。&lt;/p&gt;
</description>
        </item>
      
    
      
        <item>
          <title>GitHub Pagesでブログ立ち上げ - Jekyllのためのツール</title>
          <link>http://tbd.kaitoy.xyz/2015/08/25/tools-for-jekyll/</link>
          <pubDate>Tue, 25 Aug 2015 22:36:28 MDT</pubDate>
          <author>Kaito Yamada</author>
          <guid>http://tbd.kaitoy.xyz/2015/08/25/tools-for-jekyll/</guid>
          <description>

&lt;p&gt;&lt;a href=&#34;http://tbd.kaitoy.xyz/2015/08/15/github-pages-and-jekyll/&#34;&gt;&lt;strong&gt;GitHub Pagesでブログ立ち上げ - GitHub PagesとJekyll&lt;/strong&gt;&lt;/a&gt;の続き。
前回は、&lt;a href=&#34;https://pages.github.com/&#34;&gt;&lt;strong&gt;GitHub Pages&lt;/strong&gt;&lt;/a&gt;と&lt;a href=&#34;http://jekyllrb.com/docs/home/&#34;&gt;&lt;strong&gt;Jekyll&lt;/strong&gt;&lt;/a&gt;でブログを始めることにして、Jekyllのセットアップに四苦八苦した。&lt;/p&gt;

&lt;p&gt;Jekyllがだいたいセットアップできたところで、どんなサイトデザインにしようか考え始めた。
調べたところ、生のJekyllを使うよりも簡単に見栄えのいいサイトを作れる方法がある模様。&lt;/p&gt;

&lt;h2 id=&#34;octopress&#34;&gt;Octopress&lt;/h2&gt;

&lt;p&gt;もっとも有名なのは&lt;a href=&#34;http://octopress.org/&#34;&gt;&lt;strong&gt;Octopress&lt;/strong&gt;&lt;/a&gt;。
ホームページの説明によると、「Octopress is a framework designed for Jekyll, the static blogging engine powering Github Pages」とのこと。
フレームワークと呼ぶのはちょっと大げさな気がする。
まあ見たところ、Jekyllをサイト生成エンジンとした、ブログサイト構築、ブログエントリ作成、ブログサイトデプロイなどを簡易化するツール。&lt;/p&gt;

&lt;p&gt;広く使われていて情報が豊富だし、テーマを選んでエントリの内容を&lt;a href=&#34;https://ja.wikipedia.org/wiki/Markdown&#34;&gt;&lt;strong&gt;Markdown&lt;/strong&gt;&lt;/a&gt;で書くだけでかっこいいサイトが作れる。バージョンは2系が主に使われているやつで、3系がβ状態。&lt;/p&gt;

&lt;p&gt;血迷って3系に手を出してみる。&lt;a href=&#34;https://github.com/octopress/octopress&#34;&gt;GitHubにあるREADME&lt;/a&gt;を見ながらWindows 7上にインストールして、適当なサイトを作ろうとするも&lt;code&gt;jekyll build&lt;/code&gt;でエラー。さすがにWindowsじゃだめかと思い、CentOS 7のVMを立ち上げてそこでやってみるもまた&lt;code&gt;jekyll build&lt;/code&gt;でエラー。&lt;/p&gt;

&lt;p&gt;心折れかけながらドキュメントなど見ていたら、多くのプラグインがまだ開発中で、3系は基本的な機能しか動かなそうなことが発覚。素直に2系にすることに。&lt;/p&gt;

&lt;p&gt;2系は成熟しているし情報が沢山あるので、順調にインストールとテストサイト作成に成功したあたりで、不審な情報を発見した。&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://jekyllrb.com/docs/plugins/&#34;&gt;Jekyllのドキュメント&lt;/a&gt;によると、GitHub Pagesではセキュリティ対策のためにJekyll をセーフモードで実行するため、カスタムプラグインが無効になるとのこと。
Octopressが生成したJekyllソースをGitHub Pagesに上げたらビルドして公開してくれると思っていたけど、OctopressはJekyllのプラグイン機能をもりもり利用しているようなので、上手くいかないようだ。&lt;/p&gt;

&lt;p&gt;つまりOctopressをGitHub Pages上のサイトに使うとしたら、結局ビルド成果物をアップしないといけなくなる。JekyllのソースだけをGitHubで管理するように出来たらいいと思っていたが当てが外れた。&lt;/p&gt;

&lt;h2 id=&#34;jekyll-bootstrap&#34;&gt;Jekyll-Bootstrap&lt;/h2&gt;

&lt;p&gt;Octopressを使うモチベーションが下がり、他のを探したところ、&lt;a href=&#34;http://jekyllbootstrap.com/&#34;&gt;&lt;strong&gt;Jekyll-Bootstrap&lt;/strong&gt;&lt;/a&gt;というのを見つけた。&lt;/p&gt;

&lt;p&gt;Jekyll-BootstrapはJekyllのソースそのもので、面倒な部分は既にできてるので、ユーザはテンプレートを使って記事の内容を書くだけでいいよ、というもの。テーマ機能と、記事作成作業を&lt;a href=&#34;http://docs.seattlerb.org/rake/&#34;&gt;&lt;strong&gt;Rake&lt;/strong&gt;&lt;/a&gt;で簡易化するためのRakefile付き。&lt;/p&gt;

&lt;p&gt;すばらしいことに、「JekyllのソースだけをGitHubで管理するように出来たらいい」という需要に応えることを目指して作られていて、Jekyll-Bootstrapをベースに作ったJekyllソースはGitHub Pages上のJekyllでビルド可能。&lt;/p&gt;

&lt;p&gt;まさに求めていたものと心躍った。
が、&lt;a href=&#34;https://github.com/plusjade/jekyll-bootstrap&#34;&gt;プロジェクトページ&lt;/a&gt;を見るにあまり活発に開発が進んでない模様。
廃れ行きそうなツールを使うのもなぁ…&lt;/p&gt;

&lt;h2 id=&#34;結論&#34;&gt;結論&lt;/h2&gt;

&lt;p&gt;Jekyll-Bootstrapを使うのは気が進まない。Octopressを使うとビルド成果物をアップしないといけない。
どうせビルド成果物を上げるのなら、Jekyllにこだわる必要はないか、ということで、去年末くらいから盛り上がってきている&lt;a href=&#34;https://gohugo.io/&#34;&gt;&lt;strong&gt;Hugo&lt;/strong&gt;&lt;/a&gt;にすることに。Hugoについてはまた&lt;a href=&#34;http://tbd.kaitoy.xyz/2015/08/28/using-hugo/&#34;&gt;別のエントリ&lt;/a&gt;で書く。&lt;/p&gt;
</description>
        </item>
      
    
      
        <item>
          <title>Atomパッケージを作る - ワード境界を日本語対応させるパッケージ: japanese-word-selection</title>
          <link>http://tbd.kaitoy.xyz/2015/08/21/japanese-word-selection/</link>
          <pubDate>Fri, 21 Aug 2015 15:31:41 MDT</pubDate>
          <author>Kaito Yamada</author>
          <guid>http://tbd.kaitoy.xyz/2015/08/21/japanese-word-selection/</guid>
          <description>

&lt;p&gt;このブログは&lt;a href=&#34;https://atom.io/&#34;&gt;&lt;strong&gt;Atom&lt;/strong&gt;&lt;/a&gt;というGitHubが開発したテキストエディタを使って書いている。
このエントリは、そのAtomのパッケージを作ってみたというお話。&lt;/p&gt;

&lt;h2 id=&#34;atomとは&#34;&gt;Atomとは&lt;/h2&gt;

&lt;p&gt;Atomは、2015/6/25にバージョン1.0がリリースされたばかりの新しいテキストエディタで、そのせいもあってか日本語サポートはあまり充実していない。
例えば、テキストを画面の端で折り返す「Soft Wrap」という機能はマルチバイト文字に対応しておらず、日本語で横に長い文を書いたりすると画面からはみ出てしまって不便。&lt;/p&gt;

&lt;p&gt;しかしAtomは、パッケージなる、機能を拡張できるプラグインみたいな仕組みを持っていて、例えば上記Soft Wrapの問題は&lt;a href=&#34;https://github.com/raccy/japanese-wrap&#34;&gt;&lt;strong&gt;japanese-wrap&lt;/strong&gt;&lt;/a&gt;というパッケージをインストールすることで解決できる。
パッケージは誰でも作って配布することができる。&lt;/p&gt;

&lt;h2 id=&#34;日本語のワード境界&#34;&gt;日本語のワード境界&lt;/h2&gt;

&lt;p&gt;Atomでブログを書いていて不満を感じたのは、日本語のワード境界をちゃんと判定してくれないところ。&lt;/p&gt;

&lt;p&gt;以前は(今もたまに)&lt;a href=&#34;http://sakura-editor.sourceforge.net/&#34;&gt;&lt;strong&gt;サクラエディタ&lt;/strong&gt;&lt;/a&gt;という和製テキストエディタを使っていて、日本語文の中の一語をダブルクリックで選択するという操作をよくやっていた。
例えば、「Atomのパッケージは便利」という文があったら、「パッケージ」の辺りをダブルクリックすると「パッケージ」という単語を選択できる。&lt;/p&gt;

&lt;p&gt;Atomでも癖でこの操作をすると、妙に広い範囲が選択されてしまう。
上記例だと「Atomのパッケージは便利」全体が選択されてしまう。不便。&lt;/p&gt;

&lt;h2 id=&#34;japanese-word-selection&#34;&gt;japanese-word-selection&lt;/h2&gt;

&lt;p&gt;この問題を解決してくれそうなパッケージを探したけど見つからなかったので、いい機会と思い自分で作ったのが&lt;a href=&#34;https://atom.io/packages/japanese-word-selection&#34;&gt;&lt;strong&gt;japanese-word-selection&lt;/strong&gt;&lt;/a&gt;。ソースは&lt;a href=&#34;https://github.com/kaitoy/japanese-word-selection&#34;&gt;GitHub&lt;/a&gt;に。&lt;/p&gt;

&lt;p&gt;インストールして有効にすると、日本語のワード境界を判定するようになる。実のところ、とりあえずは文字種の境目を見ているだけ。ひらがな、カタカナ、半角カタカナ、漢字に対応。
特殊文字の全角版の処理どうするとか、あまり深く考えて作ってないけど、使ってて変な挙動を見つけたらおいおい直すということで。&lt;/p&gt;

&lt;p&gt;とりあえず、&lt;strong&gt;Edit &amp;gt; Text&lt;/strong&gt; の &lt;strong&gt;Delete to Previous Word Boundary&lt;/strong&gt; と &lt;strong&gt;Delete to Next Word Boundary&lt;/strong&gt; がちゃんと動かないのは見つけた。パッケージで上書きした処理を通っていない気がする。けど、デフォルトでキーバインディングもないし、あまり使われなそうな機能なのでほっておく。&lt;/p&gt;

&lt;h2 id=&#34;atomのパッケージの作り方&#34;&gt;Atomのパッケージの作り方&lt;/h2&gt;

&lt;p&gt;パッケージの作り方は、&lt;a href=&#34;https://atom.io/docs/latest/&#34;&gt;&lt;strong&gt;Atom Flight Manual&lt;/strong&gt;&lt;/a&gt;の&lt;a href=&#34;https://atom.io/docs/latest/hacking-atom-package-word-count&#34;&gt;このあたり&lt;/a&gt;を参考に。
Atom Flight ManualにはAtomの使い方からパッケージの作り方まで体系的に纏められているので一度は通して読みたい。&lt;/p&gt;

&lt;p&gt;パッケージ開発にあたって、前提として知っておくべきは、Atomは&lt;a href=&#34;http://electron.atom.io/&#34;&gt;&lt;strong&gt;Electron&lt;/strong&gt;&lt;/a&gt;という実行環境の上で動いているということ。
(Atomが先で、そこからElectronがスピンオフした。)&lt;/p&gt;

&lt;p&gt;Electronはざっくり&lt;a href=&#34;https://nodejs.org/&#34;&gt;&lt;strong&gt;Node&lt;/strong&gt;&lt;/a&gt;と&lt;a href=&#34;https://www.chromium.org/Home&#34;&gt;&lt;strong&gt;Chromium&lt;/strong&gt;&lt;/a&gt;(Google ChromeのOSS版)でできていて、その上で動くアプリケーションは、HTMLとCSSで書いた画面をChromiumで表示して、それをNodeで動かすJavaScriptで制御する、という形で実装される。AtomはJavaScriptの代わりに、より高級な&lt;a href=&#34;http://coffeescript.org/&#34;&gt;&lt;strong&gt;CoffeeScript&lt;/strong&gt;&lt;/a&gt;を使っているので、パッケージを作る際はCoffeeScriptのコードをがりがり書くことになる。&lt;/p&gt;

&lt;p&gt;パッケージは&lt;a href=&#34;https://www.npmjs.com/&#34;&gt;npm&lt;/a&gt;のパッケージっぽく書く。&lt;/p&gt;

&lt;p&gt;Atomは&lt;a href=&#34;https://ja.wikipedia.org/wiki/Model_View_ViewModel&#34;&gt;MVVM&lt;/a&gt;な感じの設計になっていて、コアのViewModelとかをパッケージからいじることでいろんな機能を実現できる。&lt;/p&gt;

&lt;p&gt;以下、備忘録として、japanese-word-selectionを作った時にやったことを書いておく。Atomのバージョンは1.0.7。&lt;/p&gt;

&lt;h4 id=&#34;1-パッケージテンプレート生成&#34;&gt;1. パッケージテンプレート生成&lt;/h4&gt;

&lt;p&gt;Atomを起動して、&lt;code&gt;Ctrl+Shift+P&lt;/code&gt;でコマンドパレットを開いて、&lt;code&gt;generate package&lt;/code&gt;と入力してEnter。
&lt;strong&gt;Package Generator&lt;/strong&gt;が起動して、作成するパッケージの名前を聞かれるのでjapanese-word-selectionを入力。(因みに、パッケージ名に&lt;strong&gt;atom-&lt;/strong&gt;というプレフィックスを付けているのをたまに見るが、これは推奨されていない。)
するとパッケージのテンプレートが作成され、それを読み込んだAtomウィンドウが開く(下図)。&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://tbd.kaitoy.xyz/images/japanese-word-selection/project_tree.jpg&#34; alt=&#34;project tree&#34; /&gt;
&lt;/p&gt;

&lt;p&gt;パッケージ構成については概ね以下の感じ。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;keymaps: キーバインディングを定義する&lt;a href=&#34;https://github.com/bevry/cson&#34;&gt;cson&lt;/a&gt;ファイルをいれる。&lt;/li&gt;
&lt;li&gt;lib: パッケージの機能を実装するCoffeeスクリプトを入れる。

&lt;ul&gt;
&lt;li&gt;デフォルトで「&lt;strong&gt;パッケージ名.coffee&lt;/strong&gt;」がメインスクリプト。&lt;/li&gt;
&lt;li&gt;Package Generatorが作る「&lt;strong&gt;パッケージ名-view.coffee&lt;/strong&gt;」というスクリプトは、Atomの画面に新たなペインを追加したいときとかに書くコードのサンプル。&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;menus: ツールバーとかコンテクストメニューに追加するメニューを定義するcsonファイルを入れる。&lt;/li&gt;
&lt;li&gt;spec: パッケージのテストを入れる。テストは&lt;a href=&#34;http://jasmine.github.io/&#34;&gt;Jasmine&lt;/a&gt;を使って書く。&lt;/li&gt;
&lt;li&gt;styles: パッケージが追加するペインとかに独自のスタイルを指定したいときとかに&lt;a href=&#34;http://less-ja.studiomohawk.com/&#34;&gt;Less&lt;/a&gt;かCSSを入れる。&lt;/li&gt;
&lt;li&gt;package.json: パッケージの名前とか依存関係とかを定義するファイル。&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;japanese-word-selectionはメニューもコマンドもペインも追加しないので、keymaps、lib/japanese-word-selection-view.coffee、menus、spec/japanese-word-selection-view-spec.coffee、stylesは消す。&lt;/p&gt;

&lt;p&gt;以下、ここで生成したパッケージフォルダを&lt;strong&gt;&amp;lt;パッケージルート&amp;gt;&lt;/strong&gt;と書く。&lt;/p&gt;

&lt;h4 id=&#34;2-メインスクリプト編集-概要&#34;&gt;2. メインスクリプト編集 - 概要&lt;/h4&gt;

&lt;p&gt;&lt;strong&gt;&amp;lt;パッケージルート&amp;gt;/lib/japanese-word-selection.coffee&lt;/strong&gt;を編集して機能を実装する。
Package Generatorがサンプルコードを書いてくれているので、それを書き変えて行けばよい。&lt;/p&gt;

&lt;p&gt;機能は特定のAPIをもったオブジェクトに実装して、それを &lt;strong&gt;module.exports&lt;/strong&gt; に代入する。
今回は &lt;strong&gt;JapaneseWordSelection&lt;/strong&gt; がそのオブジェクト。「特定のAPI」というのは以下のメソッド。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;activate(state): パッケージが有効化されるときに呼ばれる。&lt;/li&gt;
&lt;li&gt;deactivate(): パッケージが無効化されるときに呼ばれる。無くてもいい。&lt;/li&gt;
&lt;li&gt;serialize(): Atomウィンドウを閉じるときに、パッケージの状態を保存したいときに実装するメソッド。無くてもいい。&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;JapaneseWordSelectionには、activateとdeactivateを実装して、前者の中でワード境界判定処理をいじり、後者の中で元に戻すようにする。つまり、japanese-word-selection.coffeeはだいたい以下のようなコードになる。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-coffeescript&#34;&gt;module.exports = JapaneseWordSelection =

  activate: -&amp;gt;
    # ワード境界判定処理を日本語対応させる。

  deactivate: -&amp;gt;
    # ワード境界判定処理を元に戻す。
&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id=&#34;3-メインスクリプト編集-activate&#34;&gt;3. メインスクリプト編集 - activate&lt;/h4&gt;

&lt;p&gt;実際の処理を書く際には、&lt;a href=&#34;https://atom.io/docs/api/latest&#34;&gt;Atom APIのドキュメント&lt;/a&gt;を参照する。また、&lt;a href=&#34;https://github.com/atom/atom&#34;&gt;Atomのソース&lt;/a&gt;を見てAtom APIの実装の詳細を見るべきときもある。&lt;/p&gt;

&lt;p&gt;パッケージのスクリプトからは、Atomクラスのインスタンスである &lt;strong&gt;atom&lt;/strong&gt; というグローバル変数が使えて、これを入り口にAtomウィンドウ内の各要素のViewModelオブジェクトをいじることができる。&lt;/p&gt;

&lt;p&gt;イベントを扱うときには、&lt;a href=&#34;https://atom.io/docs/api/v1.0.7/CompositeDisposable&#34;&gt;CompositeDisposable&lt;/a&gt;が便利。これを使うと、以下のようにして、ViewModelオブジェクトとかに登録したイベントハンドラを後で簡単に削除できる。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-coffeescript&#34;&gt;@disposables = new CompositeDisposable
editor = atom.workspace.getActiveTextEditor()
@disposables.add editor.onDidChange -&amp;gt;  # editorにイベントハンドラを登録。
@disposables.add editor.onDidChangePath -&amp;gt;  # editorに別のイベントハンドラを登録。

(snip)

@disposables.dispose()  # 全てのイベントハンドラを削除。
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;JapaneseWordSelection#activate()では、&lt;a href=&#34;https://atom.io/docs/api/v1.0.7/Workspace#instance-observeTextEditors&#34;&gt;atom.workspace.observeTextEditors(callback)&lt;/a&gt;というAPIを利用して&lt;a href=&#34;https://atom.io/docs/api/v1.0.7/TextEditor&#34;&gt;TextEditor&lt;/a&gt;オブジェクトを取得して、それが持っている&lt;a href=&#34;https://atom.io/docs/api/v1.0.7/Cursor&#34;&gt;Cursor&lt;/a&gt;オブジェクトの振る舞いを変更する。
この、observeXXXXというAPIは他にもいろいろあって、実行すると既存の全てのXXXXのインスタンスをcallbackに渡してくれて、さらに、それ以降XXXXのインスタンスが作られるたびにcallbackを呼び出すイベントハンドラを登録してくれる。&lt;/p&gt;

&lt;p&gt;このobserveXXXXとかに上記CompositeDisposableが使えて、observeXXXXの場合、その戻り値をCompositeDisposableにaddしておくと、後でCompositeDisposable#dispose()でイベントハンドラを削除できる。&lt;/p&gt;

&lt;p&gt;まとめると、JapaneseWordSelection#activate()は以下のようになる。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-coffeescript&#34;&gt;module.exports = JapaneseWordSelection =

  disposables: null

  activate: -&amp;gt;
    @disposables = new CompositeDisposable
    @disposables.add atom.workspace.observeTextEditors (editor) -&amp;gt;
      JapaneseWordSelection.japanizeWordBoundary(editor, cursor) for cursor in editor.getCursors()

  japanizeWordBoundary: (editor, cursor) -&amp;gt;
    # Cursorオブジェクトの振る舞いを変更する処理
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;(今見ると、Cursorの方もobserveした方がいいか。後で直そう。)&lt;/p&gt;

&lt;h4 id=&#34;4-メインスクリプト編集-deactivate&#34;&gt;4. メインスクリプト編集 - deactivate&lt;/h4&gt;

&lt;p&gt;JapaneseWordSelection#deactivate()は、追加したイベントハンドラを削除して、全てのCursorオブジェクトの振る舞いを元に戻すだけ。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-coffeescript&#34;&gt;  deactivate: -&amp;gt;
    @disposables.dispose()
    for i, editor of atom.workspace.getTextEditors()
      for j, cursor of editor.getCursors()
        # Cursorオブジェクトの振る舞いを元に戻す処理
&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id=&#34;5-package-json編集&#34;&gt;5. package.json編集&lt;/h4&gt;

&lt;p&gt;package.jsonは、Package Generatorが以下のようなひな形を作ってくれている。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-json&#34;&gt;{
  &amp;quot;name&amp;quot;: &amp;quot;japanese-word-selection&amp;quot;,
  &amp;quot;main&amp;quot;: &amp;quot;./lib/japanese-word-selection&amp;quot;,
  &amp;quot;version&amp;quot;: &amp;quot;0.0.0&amp;quot;,
  &amp;quot;description&amp;quot;: &amp;quot;A short description of your package&amp;quot;,
  &amp;quot;keywords&amp;quot;: [
  ],
  &amp;quot;activationCommands&amp;quot;: {
    &amp;quot;atom-workspace&amp;quot;: &amp;quot;japanese-word-selection:toggle&amp;quot;
  },
  &amp;quot;repository&amp;quot;: &amp;quot;https://github.com/atom/japanese-word-selection&amp;quot;,
  &amp;quot;license&amp;quot;: &amp;quot;MIT&amp;quot;,
  &amp;quot;engines&amp;quot;: {
    &amp;quot;atom&amp;quot;: &amp;quot;&amp;gt;=1.0.0 &amp;lt;2.0.0&amp;quot;
  },
  &amp;quot;dependencies&amp;quot;: {
  }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;これに以下の編集を加える。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;description&lt;/strong&gt; にパッケージの説明を書く。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;keywords&lt;/strong&gt; にパッケージリポジトリ内での検索のためのタグを書く。&lt;/li&gt;
&lt;li&gt;japanese-word-selectionはとりあえずコマンドを作らないので、&lt;strong&gt;activationCommands&lt;/strong&gt; は消す。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;repository&lt;/strong&gt; にjapanese-word-selectionのソースを置く(予定の)GitHubリポジトリのアドレスを書く。&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;これだけ。以下のようになる。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-json&#34;&gt;{
  &amp;quot;name&amp;quot;: &amp;quot;japanese-word-selection&amp;quot;,
  &amp;quot;main&amp;quot;: &amp;quot;./lib/japanese-word-selection&amp;quot;,
  &amp;quot;version&amp;quot;: &amp;quot;0.0.0&amp;quot;,
  &amp;quot;description&amp;quot;: &amp;quot;Japanize word boundary.&amp;quot;,
  &amp;quot;keywords&amp;quot;: [
    &amp;quot;japanese&amp;quot;,
    &amp;quot;selection&amp;quot;,
    &amp;quot;word&amp;quot;
  ],
  &amp;quot;repository&amp;quot;: &amp;quot;https://github.com/kaitoy/japanese-word-selection&amp;quot;,
  &amp;quot;license&amp;quot;: &amp;quot;MIT&amp;quot;,
  &amp;quot;engines&amp;quot;: {
    &amp;quot;atom&amp;quot;: &amp;quot;&amp;gt;=1.0.0 &amp;lt;2.0.0&amp;quot;
  },
  &amp;quot;dependencies&amp;quot;: {
  }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;strong&gt;version&lt;/strong&gt; はパッケージリリース(パブリッシュ)時に自動でインクリメントされるので、0.0.0のままほっておく。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;dependencies&lt;/strong&gt; には依存するnpmパッケージを定義できるが、japanese-word-selectionは一人で動くので何も書かない。
因みに、dependenciesに何か追加したら、package.jsonがあるフォルダで&lt;code&gt;apm install&lt;/code&gt;というコマンドを実行すると、そのフォルダの下に&lt;strong&gt;node_modules&lt;/strong&gt;というフォルダができて、そこに依存がインストールされる。&lt;/p&gt;

&lt;p&gt;このpackage.jsonは&lt;a href=&#34;https://docs.npmjs.com/files/package.json&#34;&gt;npmのpackage.json&lt;/a&gt;を拡張したもので、npmのpackage.jsonのプロパティは全部使える。&lt;/p&gt;

&lt;h4 id=&#34;6-動作確認&#34;&gt;6. 動作確認&lt;/h4&gt;

&lt;p&gt;作成したパッケージは、Package Generatorに生成された時点でAtomから使えるようになっている。
ソースを変更したら、&lt;code&gt;Ctrl+Alt+r&lt;/code&gt;でウィンドウをリロードして反映して動作確認できる。&lt;/p&gt;

&lt;p&gt;ログを見たい時など、&lt;code&gt;Ctrl+Atl+i&lt;/code&gt;でディベロッパツールを開いておくと便利。&lt;/p&gt;

&lt;h4 id=&#34;7-テスト&#34;&gt;7. テスト&lt;/h4&gt;

&lt;p&gt;上記の通り、パッケージのテストはJasmineを使って書いて、&lt;strong&gt;&amp;lt;パッケージルート&amp;gt;/spec/&lt;/strong&gt;に入れる。テストファイル名の拡張子を除いた部分は&lt;strong&gt;-spec&lt;/strong&gt;というポストフィックスを付けなければいけない。&lt;/p&gt;

&lt;p&gt;テストの書き方については、&lt;a href=&#34;https://atom.io/docs/latest/hacking-atom-writing-specs&#34;&gt;Atomのマニュアル&lt;/a&gt;とか、&lt;a href=&#34;https://github.com/atom/atom/tree/master/spec&#34;&gt;Atomのテスト&lt;/a&gt;とか、Jasmineのマニュアルとかを参照ということで、ここでは割愛する。テスト書くのは必須ではないし。&lt;/p&gt;

&lt;p&gt;テストは&lt;code&gt;Ctrl+Alt+p&lt;/code&gt;で実行できる。&lt;/p&gt;

&lt;h4 id=&#34;8-その他ファイルの編集&#34;&gt;8. その他ファイルの編集&lt;/h4&gt;

&lt;p&gt;README.md、LICENSE.md、CHANGELOG.mdを修正。詳細は割愛。&lt;/p&gt;

&lt;h4 id=&#34;9-githubへ保存&#34;&gt;9. GitHubへ保存&lt;/h4&gt;

&lt;p&gt;GitHubにjapanese-word-selectionという名のリポジトリを作り、そこにソースを保存。詳細は割愛。
Atomのドキュメントによると、今のところ、GitHubへのソース保存は以下のパブリッシュのために必須な模様。&lt;/p&gt;

&lt;h4 id=&#34;10-パブリッシュ&#34;&gt;10. パブリッシュ&lt;/h4&gt;

&lt;p&gt;作ったパッケージをリリースすることを、パブリッシュという。
手順は&lt;a href=&#34;https://atom.io/docs/latest/hacking-atom-package-word-count#publishing&#34;&gt;Atomのドキュメント&lt;/a&gt;に説明されている。&lt;/p&gt;

&lt;p&gt;パブリッシュするには、&lt;strong&gt;apm&lt;/strong&gt; という、Atomのパッケージを管理するコマンドラインツールが必要。どうもAtom本体と一緒にインストールされるっぽい。&lt;/p&gt;

&lt;p&gt;やることは、&amp;lt;パッケージルート&amp;gt;に&lt;code&gt;cd&lt;/code&gt;して、&lt;code&gt;apm publish minor&lt;/code&gt;を実行するだけ。
このコマンドは以下の処理をする。&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;(初回のみ)パッケージ名をatom.ioに登録する。&lt;/li&gt;
&lt;li&gt;package.jsonのversionをインクリメントしてコミットする。&lt;code&gt;apm publish&lt;/code&gt;にminorを指定するので、0.1.0になる。代わりにmajorかpatchを指定すると、1.0.0か0.0.1になる。&lt;/li&gt;
&lt;li&gt;Gitのタグを作る。&lt;/li&gt;
&lt;li&gt;GitHubに変更とタグをpushする。&lt;/li&gt;
&lt;li&gt;atom.ioにパッケージを登録する。&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;私の場合、初回だったので、コマンド実行中にatom.ioのアカウントを作ってAPIトークンを取得する手順があった。
以下がコマンドのメッセージ。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;# cd japanese-word-selection
# apm publish minor
Welcome to Atom!

Before you can publish packages, you&#39;ll need an API token.

Visit your account page on Atom.io https://atom.io/account,
copy the token and paste it below when prompted.

Press [Enter] to open your account page on Atom.io.
Token&amp;gt; hogeeeeeeeeeeeeeeeee
Saving token to Keychain done
Registering japanese-word-selection done
Preparing and tagging a new version done
Pushing v0.1.0 tag done
Publishing japanese-word-selection@v0.1.0 done
Congrats on publishing a new package!
Check it out at https://atom.io/packages/japanese-word-selection
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;a href=&#34;https://atom.io/packages/japanese-word-selection&#34;&gt;https://atom.io/packages/japanese-word-selection&lt;/a&gt; に行ったらちゃんとjapanese-word-selectionのページができていた。
これでパブリッシュまで完了。&lt;/p&gt;

&lt;p&gt;因みに、&lt;code&gt;apm unpublish パッケージ名@バージョン&lt;/code&gt;で&lt;a href=&#34;http://tbd.kaitoy.xyz/2015/12/02/unpublish-atom-package/&#34;&gt;パブリッシュを取り消す&lt;/a&gt;ことができる。&lt;/p&gt;

&lt;h4 id=&#34;11-パッケージのアップデートの開発&#34;&gt;11. パッケージのアップデートの開発&lt;/h4&gt;

&lt;p&gt;&lt;code&gt;apm publish&lt;/code&gt;をすると、パブリッシュしたバージョンがインストールされた状態になる。
具体的には、&lt;code&gt;%userprofile%\.atom\packages\&lt;/code&gt;にそのパッケージが入っている状態になる。&lt;/p&gt;

&lt;p&gt;パッケージのアップデートを開発する際は、修正している版のパッケージ(&amp;lt;パッケージルート&amp;gt;に入っている方)を優先してロードして欲しくなるが、そのためには&lt;code&gt;%userprofile%\.atom\dev\packages\&lt;/code&gt;に修正版(のリンク)をいれて、Atomをdev modeで起動する必要がある。&lt;/p&gt;

&lt;p&gt;この手順は、&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&amp;lt;パッケージルート&amp;gt;に&lt;code&gt;cd&lt;/code&gt;して、&lt;code&gt;apm link --dev&lt;/code&gt;を実行する。これでそのフォルダへのリンクが&lt;code&gt;.atom\dev\packages\&lt;/code&gt;に作成される。&lt;/li&gt;
&lt;li&gt;Atomのメニューの &lt;strong&gt;View &amp;gt; Developer &amp;gt; Open In Dev Mode&lt;/strong&gt; からdev modeのAtomウィンドウを開く。&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;因みに、Package Generatorは、作成したパッケージフォルダへのリンクを&lt;code&gt;.atom\packages\&lt;/code&gt;に作成する。リンクの一覧は&lt;code&gt;apm links&lt;/code&gt;で参照でき、&lt;code&gt;apm unlink&lt;/code&gt;で削除できる。&lt;/p&gt;

&lt;h2 id=&#34;関連エントリ&#34;&gt;関連エントリ&lt;/h2&gt;

&lt;p&gt;後日もう一つパッケージを作り、&lt;a href=&#34;http://tbd.kaitoy.xyz/2015/09/06/disturb-me/&#34;&gt;それに関する記事&lt;/a&gt;を書いた。
こちらはjapanese-word-selectionでやらなかったコマンドなどの実装をやっている。&lt;/p&gt;
</description>
        </item>
      
    
      
        <item>
          <title>GitHub Pagesでブログ立ち上げ - GitHub PagesとJekyll</title>
          <link>http://tbd.kaitoy.xyz/2015/08/15/github-pages-and-jekyll/</link>
          <pubDate>Sat, 15 Aug 2015 10:48:49 MDT</pubDate>
          <author>Kaito Yamada</author>
          <guid>http://tbd.kaitoy.xyz/2015/08/15/github-pages-and-jekyll/</guid>
          <description>

&lt;p&gt;このブログを立ち上げたときの作業を、主に備忘録としていくつかのエントリに分けて書く。
このエントリでは主に&lt;a href=&#34;https://pages.github.com/&#34;&gt;&lt;strong&gt;GitHub Pages&lt;/strong&gt;&lt;/a&gt;と&lt;a href=&#34;http://jekyllrb.com/docs/home/&#34;&gt;&lt;strong&gt;Jekyll&lt;/strong&gt;&lt;/a&gt;について書く。&lt;/p&gt;

&lt;h2 id=&#34;今の構成&#34;&gt;今の構成&lt;/h2&gt;

&lt;p&gt;このブログは、&lt;a href=&#34;https://gohugo.io/&#34;&gt;&lt;strong&gt;Hugo&lt;/strong&gt;&lt;/a&gt;で作って、GitHub Pagesで公開している。&lt;/p&gt;

&lt;p&gt;Hugoについては別のエントリで書くとして、GitHub Pagesは、GitHubが提供しているウェブページのホスティングサービスで、GitHubに特定の名前のリポジトリ、または任意のリポジトリに特定の名前のブランチを作ってウェブサイトのソースを置くと、公開してくれるというサービス。&lt;a href=&#34;https://ja.wikipedia.org/wiki/Platform_as_a_Service&#34;&gt;PaaS&lt;/a&gt;にあたるのかな。
&lt;a href=&#34;https://pages.github.com/&#34;&gt;GitHub Pagesのサイト&lt;/a&gt;に利用方法が載っている。&lt;/p&gt;

&lt;p&gt;以下、このブログ立ち上げに向けてやった作業について書く。&lt;/p&gt;

&lt;h2 id=&#34;github-pages味見&#34;&gt;GitHub Pages味見&lt;/h2&gt;

&lt;p&gt;GitHub Pagesを利用するには、&lt;strong&gt;GitHubユーザ名.github.io&lt;/strong&gt; という名前のリポジトリを作るか、任意のリポジトリに&lt;strong&gt;gh-pages&lt;/strong&gt; という名前のブランチを作って、そこにサイトのソースを置けばいい。そのサイトには、前者の場合は&lt;code&gt;http://GitHubユーザ名.github.io&lt;/code&gt;で、後者の場合は&lt;code&gt;http://GitHubユーザ名.github.io/リポジトリ名&lt;/code&gt;でアクセスできる。&lt;/p&gt;

&lt;p&gt;とりあえず前者をやってみる。&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;kaitoy.github.io&lt;/strong&gt; という名前の&lt;a href=&#34;https://github.com/kaitoy/kaitoy.github.io&#34;&gt;リポジトリ&lt;/a&gt;を作って、そのルートに「Hello World」とだけ書いた &lt;strong&gt;index.html&lt;/strong&gt; を置く。&lt;/li&gt;
&lt;li&gt;ブラウザで&lt;code&gt;http://kaitoy.github.io&lt;/code&gt;にアクセスすると、「Hello World」と表示された。&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;これだけ。&lt;/p&gt;

&lt;h2 id=&#34;github-pagesとjekyll&#34;&gt;GitHub PagesとJekyll&lt;/h2&gt;

&lt;p&gt;GitHub Pagesには、普通にHTML/CSS/Javascriptのソースを置いてもいいけど、Jekyllを利用することもできる。&lt;/p&gt;

&lt;p&gt;Jekyllは、ブログ用の静的サイトジェネレータなるもので、&lt;a href=&#34;https://ja.wikipedia.org/wiki/Markdown&#34;&gt;&lt;strong&gt;Markdown&lt;/strong&gt;&lt;/a&gt;で書いた記事を元にブログサイトのソースを生成するツール。GitHub Pages用のリポジトリにJekyllのソースをアップロードすると、Jekyllでビルドされ、その結果が公開される。&lt;/p&gt;

&lt;p&gt;これはうれしい。  Jekyllのソースとビルド結果を別々に管理しなくてよくて楽だし、公開されるサイトが最新のソースに基づいていることが保証される。&lt;/p&gt;

&lt;p&gt;結論から言うと、以下のような理由で結局Jekyllは使わなかったんだけど、Jekyllとの格闘の記録を残しておく。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Windowsを正式サポートしていない。&lt;/li&gt;
&lt;li&gt;Rubyで書かれてるため、ビルドが遅い。ブログエントリが数百とかになると辛くなってくるらしい。&lt;/li&gt;
&lt;li&gt;Jekyllを使っても、かっこいいサイトを手軽に作ろうと思ったら、結局ビルド成果物もGitHubに上げないといけなくなる。&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;jekyllセットアップ&#34;&gt;Jekyllセットアップ&lt;/h2&gt;

&lt;p&gt;GitHub PagesでJekyll使う場合は、GitHub Pagesと同じJekyll環境を手元に作ってプレビューできるようにしておくべきとのこと。なので、&lt;a href=&#34;https://help.github.com/articles/using-jekyll-with-pages/&#34;&gt;これ&lt;/a&gt;に従って自分のPC (Windows 7) にJekyllをセットアップする。&lt;/p&gt;

&lt;h4 id=&#34;１-rubyインストール&#34;&gt;１．Rubyインストール&lt;/h4&gt;

&lt;p&gt;Jekyllは &lt;strong&gt;Ruby&lt;/strong&gt; で書かれてるので、まずはRubyをインストールする。
Windowsなので&lt;a href=&#34;http://rubyinstaller.org/&#34;&gt;&lt;strong&gt;RubyInstaller&lt;/strong&gt;&lt;/a&gt; (ver. 2.2.2)をダウンロードしてインストール。
&lt;a href=&#34;http://bundler.io/&#34;&gt;&lt;strong&gt;Bundler&lt;/strong&gt;&lt;/a&gt; (RubyのパッケージであるGemの依存をアプリケーションごとに管理するツール) もあるといいらしいので、&lt;code&gt;gem install bundler&lt;/code&gt;を実行してインストール。&lt;/p&gt;

&lt;h4 id=&#34;2-jekyllインストール&#34;&gt;2.  Jekyllインストール&lt;/h4&gt;

&lt;p&gt;さっき作ったリポジトリ　&lt;strong&gt;kaitoy.github.io&lt;/strong&gt; (の手元のクローン)のルートに、Bundlerの定義ファイルを &lt;strong&gt;Gemfile&lt;/strong&gt; という名前で作り、以下の内容を書く。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;source &#39;https://rubygems.org&#39;
gem &#39;github-pages&#39;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;依存するGemは &lt;strong&gt;jekyll&lt;/strong&gt; じゃなくて &lt;strong&gt;github-pages&lt;/strong&gt;。これはGitHub Pages環境のJekyllということだろう。&lt;/p&gt;

&lt;p&gt;で、&lt;strong&gt;kaitoy.github.io&lt;/strong&gt; のルートで&lt;code&gt;bundle install&lt;/code&gt;を実行する。ここでエラー発生。
エラーメッセージによると、native gemをビルドするために &lt;strong&gt;DevKit&lt;/strong&gt; なるものが要るとのこと。&lt;/p&gt;

&lt;p&gt;再びRubyInstallerのページに行ってDevKitをダウンロードして、&lt;a href=&#34;http://github.com/oneclick/rubyinstaller/wiki/Development-Kit&#34;&gt;wiki&lt;/a&gt;に従ってインストール。&lt;/p&gt;

&lt;p&gt;再度&lt;code&gt;bundle install&lt;/code&gt;したらJekyllのインストールに成功。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;github-pages: ver. 35&lt;/li&gt;
&lt;li&gt;jekyll: ver. 2.4.0&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;これで、ちょくちょく&lt;code&gt;bundle update&lt;/code&gt;を実行すれば、最新のGitHub Pages環境に追随できる。&lt;/p&gt;

&lt;p&gt;&lt;code&gt;bundle exec jekyll serve&lt;/code&gt;すると、カレントディレクトリのJekyllソースがビルドされ、Webサーバが起動し、&lt;code&gt;http://localhost:4000&lt;/code&gt;でそのビルド結果を見れるらしい。&lt;/p&gt;

&lt;h4 id=&#34;3-jekyll味見&#34;&gt;3.  Jekyll味見&lt;/h4&gt;

&lt;p&gt;試しに、適当な場所で&lt;code&gt;jekyll new hoge&lt;/code&gt;を実行し、新規サイトフォルダ &lt;strong&gt;hoge&lt;/strong&gt; を作り、その中で&lt;code&gt;jekyll build&lt;/code&gt;してみる。以下のエラー。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-text&#34;&gt;c:/Ruby22-x64/lib/ruby/gems/2.2.0/gems/posix-spawn-0.3.11/lib/posix/spawn.rb:164: warning: cannot close fd before spawn
&#39;which&#39; は、内部コマンドまたは外部コマンド、
操作可能なプログラムまたはバッチ ファイルとして認識されていません。
[31m  Liquid Exception: No such file or directory - python c:/Ruby22-x64/lib/ruby/gems/2.2.0/gems/pygments.rb-0.6.1/lib/pygments/mentos.py in jekyll/_posts/2015-05-29-welcome-to-jekyll.markdown[0m
                    done.
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Jekyllのサイトを見直したらWindowsはサポートされていないとのこと。
けど、Windowsにセットアップする方法は検索したらたくさん出てきた。
Jekyllのサイトでも紹介されている&lt;a href=&#34;http://jekyll-windows.juthilo.com/&#34;&gt;&lt;strong&gt;Run Jekyll on Windows&lt;/strong&gt;&lt;/a&gt;というサイトの手順に従うとか、&lt;a href=&#34;https://github.com/madhur/PortableJekyll&#34;&gt;&lt;strong&gt;Portable Jekyll&lt;/strong&gt;&lt;/a&gt;という、WindowsでJekyllを動かすためのツールを集めたものを使うとか。&lt;/p&gt;

&lt;p&gt;後者は、Jekyllのインスタンスを含んでいて、将来にわたるJekyllのアップデートについていってくれるか怪しいので、前者を見てみる。&lt;/p&gt;

&lt;h4 id=&#34;4-run-jekyll-on-windowsを試す&#34;&gt;4. Run Jekyll on Windowsを試す&lt;/h4&gt;

&lt;p&gt;Run Jekyll on Windowsによると、Jekyllはデフォルトでsyntax highlighterの &lt;strong&gt;pygments.rb&lt;/strong&gt; なるものに依存していて、pygments.rbをWindowsで使うには &lt;strong&gt;Python&lt;/strong&gt; とそのモジュールである &lt;strong&gt;Pygments&lt;/strong&gt; などをインストールする必要があるのこと。&lt;/p&gt;

&lt;p&gt;とりあえずPythonを&lt;a href=&#34;https://www.python.org/downloads/windows/&#34;&gt;ここ&lt;/a&gt;からダウンロードしてインストール。バージョンは、3系はPygmentsがサポートしていないようなので2.7.10。
&lt;strong&gt;pip&lt;/strong&gt; なるPythonパッケージ管理ツールが要るとRun Jekyll on Windowsに書いてあるが、2.7.10にはデフォルトで入っていた。&lt;/p&gt;

&lt;p&gt;&lt;code&gt;python -m pip install Pygments&lt;/code&gt;を実行してPygmentsをインストール。これはどうもpygments.rbがラップしているものらしい。&lt;/p&gt;

&lt;p&gt;また、Jekyllにはauto-regenerationなる、ファイル変更を検知して自動ビルドする機能があって、Windowsでこれを使うには &lt;strong&gt;wdm&lt;/strong&gt; というgemが必要らしい。
以下をGemfileに追加して、&lt;code&gt;bundle install&lt;/code&gt;する。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;gem &#39;wdm&#39;, &#39;~&amp;gt; 0.1.0&#39; if Gem.win_platform?
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;したら以下のエラー。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-text&#34;&gt;c:\Ruby22-x64\lib\ruby\gems\2.2.0\gems\wdm-0.1.0\ext\wdm/rb_monitor.c:508: undefined reference to `rb_thread_blocking_region&#39;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;どうも、&lt;a href=&#34;https://github.com/Maher4Ever/wdm/issues/18&#34;&gt;ここ&lt;/a&gt;によると、エラーメッセージにある &lt;strong&gt;rb_thread_blocking_region&lt;/strong&gt; というメソッドは、Ruby 2.0で非推奨になり2.2で消されたものらしい。&lt;/p&gt;

&lt;p&gt;wdmはもう数年更新されておらず、修正の見込みはなさそう。(後日見たら開発再開されてて、この問題も修正されていた。)&lt;/p&gt;

&lt;p&gt;Rubyをダウングレードするの面倒なので、試しにそのまま&lt;code&gt;jekyll serve&lt;/code&gt;したら以下のメッセージが出たけど動いた。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-text&#34;&gt;  Please add the following to your Gemfile to avoid polling for changes:
    gem &#39;wdm&#39;, &#39;&amp;gt;= 0.1.0&#39; if Gem.win_platform?
 Auto-regeneration: enabled for &#39;c:/Users/Kaito/mirrored_data/pleiades/workspace/kaitoy.github.io/hoge&#39;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;auto-regenerationも動いている模様。実際ソースをいじったら自動で反映された。
よくわからないが、よしとする。&lt;/p&gt;

&lt;p&gt;実は、以下のエラー(上でも出てたやつ)はまだ出ている。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-text&#34;&gt;c:/Ruby22-x64/lib/ruby/gems/2.2.0/gems/posix-spawn-0.3.11/lib/posix/spawn.rb:164: warning: cannot close fd before spawn
&#39;which&#39; は、内部コマンドまたは外部コマンド、
操作可能なプログラムまたはバッチ ファイルとして認識されていません。
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;このwarningについてはRun Jekyll on Windowsには載っていないが、pygments.rbを0.5.0にダウングレードすればいいとの情報が&lt;a href=&#34;https://github.com/jekyll/jekyll/issues/2052&#34;&gt;ここ&lt;/a&gt;とかにある。&lt;/p&gt;

&lt;h2 id=&#34;5-jekyllとの決別&#34;&gt;5. Jekyllとの決別&lt;/h2&gt;

&lt;p&gt;この辺りまでJekyllをセットアップした後、JekyllのWindowsとの相性の悪さに嫌気がさしつつ、Jekyllで簡単にかっこいいサイトを作るためのツールなどを調べているうちに、Jekyllを使うのをやめた。それについては&lt;a href=&#34;http://tbd.kaitoy.xyz/2015/08/25/tools-for-jekyll/&#34;&gt;別のエントリ&lt;/a&gt;で書く。&lt;/p&gt;
</description>
        </item>
      
    
      
        <item>
          <title>スタンドアップミーティングはダメマネージャーが好む手法</title>
          <link>http://tbd.kaitoy.xyz/2015/08/11/daily-stand-up-meetings-are-a-good-tool-for-a-bad-manager/</link>
          <pubDate>Tue, 11 Aug 2015 22:35:09 MDT</pubDate>
          <author>Kaito Yamada</author>
          <guid>http://tbd.kaitoy.xyz/2015/08/11/daily-stand-up-meetings-are-a-good-tool-for-a-bad-manager/</guid>
          <description>

&lt;p&gt;このエントリでは、Yegor Bugayenkoによる記事、&lt;a href=&#34;http://www.yegor256.com/2015/01/08/morning-standup-meetings.html&#34;&gt;Daily Stand-Up Meetings Are a Good Tool for a Bad Manager&lt;/a&gt;を紹介する。
(Yegorから和訳と転載の許可は得た。)
以下はその全文の和訳だが、意訳超訳が混じっているので、もとのニュアンスを知りたければ元記事を読んでもいいし、読まなくてもいい。&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;スタンドアップミーティング (または単純にスタンドアップ)は、「チームマネージャに状況報告をするためのデイリーチームミーティング」であるとWikipediaに書かれている。
こうしたミーティングは、ソフトウェア開発チームの間でとても人気な手法ではあるが、単なる悪であり、よいマネージャは決してやらない。
以下、その理由を説明する。&lt;/p&gt;

&lt;p&gt;私は、スタンドアップのやり方が適切だったり不適切だったりする、と言いたいわけではない。それについて述べた記事は大量にある。
また、スタンドアップを上手く機能するように実施する方法についてアドバイスしようとしているわけでもない。
よいマネージャはデイリースタンドアップを決して実施すべきでないと言っているのだ。
スタンドアップは、単に「機能しない」だけでなく、非常に悪い、時に破壊的なものをマネジメントプロセスにもたらす。それがアジャイルかどうかにかかわらず。
一方、ダメなマネージャは常に、デイリースタンドアップを重要なマネジメント手法として使う。&lt;/p&gt;

&lt;p&gt;私の意図を説明するため、マネジメントをいくつかの異なった視点から見ながら、よいマネージャとダメなマネージャが仕事をどのように進めるかを比べてみよう。&lt;/p&gt;

&lt;h3 id=&#34;情報&#34;&gt;情報&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;ダメなマネージャは進捗を尋ねる。&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;オフィスを歩き回り進捗を訪ねて回るのは、ひどいマネージャの崇高な習慣だ。
彼は、プロセスと情報伝達フローを適切に構築できるほど賢明ではなく、チームが何をしているかを知らない。
しかし、彼は進捗を知る必要がある。彼もまた上司からちょくちょく尋ねられるからだ。
必要な情報を収集する唯一の方法は、チームに「今何の作業をしているの?」と尋ねることだ。
朝のスタンドアップは、メンバの作業内容を知らないことに気付かれずに、このうっとうしい質問を正式に尋ねる最高の場だ。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;よいマネージャは必要なときに報告を受ける。&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;プロジェクトマネージメントにはコミュニケーション管理が必要だ。
情報伝達フローが適切に構成されていれば、チームメンバはいつどのようにマネージャに報告すればいいかが分かる。
何か問題が起きたとき、そういう状況をどのように報告しなければいけないかを全員が知っている。即時、直接報告するのだ。
作業が完了したとき、必要に応じてプロジェクトマネージャにどのように知らせるかを全員が理解している。
完璧なプロジェクトマネージャは決してチームに質問しない。代わりに、チームが必要なときにマネージャに報告する。
そして、報告を怠るメンバが出たときには、その壊れたコミュニケーションチャネルを修復するのがよいプロジェクトマネージャだ。
ただし、情報収集のためにデイリーミーティングは決して実施しない。&lt;/p&gt;

&lt;p&gt;よいマネージャとして、何がゴールで何がプロジェクトマネージャ(またはスクラムマスタ)として重要かをチームに伝えるべきだ。
チームメンバは、マネージャがチームの進捗、リスク、障害、失敗について知るために何が重要であるかを知っているべきだし、チームメンバがマネージャの期待に沿えなければどんなトラブルに陥るかを理解しているべきだ。
プロジェクトやチームが取り組んでいる最も重要な課題についてをチームに伝えることは、よいマネージャとしてすべき仕事だ。
また、よいチームメンバとしては、重要な情報をつかんだら、すぐにマネージャに知らせることが重要だ。
これが完璧なマネージメントというものだ。&lt;/p&gt;

&lt;p&gt;もしそのようなチームワークを築いたなら、開発者が今日何をしてどんな問題にあったかを、明日の朝まで待ってから尋ねる必要はなくなる。
マネージャはこういった情報をもっと早く、まさに必要なタイミングで知るようになる。
オフィスの外にいるときでさえ、プロジェクトで起こっていることを知ることができるようになる。
実際には、オフィスは全く不要にさえなるが、これはまた別の機会に議論したい。&lt;/p&gt;

&lt;p&gt;デイリースタンドアップはプログラマ間で情報交換する最高の機会で、スクラムマスタに報告してフィードバックを受けるだけの場ではないと言う人がいるかもしれない。
もう一度、同じことを言うが、なぜ、その日の必要になった時点で情報交換をしないのか?
なぜ、10人のメンバを毎朝集めて、その内たった5人だけに関係することを議論する必要がある?
答えよう。ダメなマネージャは、チームメンバ間で情報交換する場を用意する他の方法を知らず、朝のスタンドアップを適切なコミュニケーションモデルの代わりとして使う。
こういったミーティングは、マネージャが熱心に働いていて、大げさな給料を受け取るに値するかのような印象を与える。
対照的に、よいマネージャは定期的な状況報告ミーティングをいっさい実施しない。
なぜなら、効果的なコミュニケーションツールの使い方を知っているからだ。
例えば、問題追跡ツール、メール、コードレビュー、意思決定ミーティング、ペアプログラミングなど。&lt;/p&gt;

&lt;h3 id=&#34;責任&#34;&gt;責任&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;ダメなマネージャはマイクロマネージメントをする。&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;ダメなマネージャはプロジェクトマネージメントのことをほとんど知らないので、大きな不安を抱えている。
彼はチームのコントロールを失うことを恐れていて、チームを信頼せず、いつも十分な情報を得ていないと感じ、上司から状況を尋ねられたときに動揺する。
このため、彼はチームメンバを抗うつ薬として使う。チームメンバが彼の言う通りのことをしているとき、彼はより安心と安定を感じる。
デイリースタンドアップミーティングは、彼がメンバに何をしているかを尋ね、代わりに何をすべきかを指示するためのすばらしい機会だ。
このマネージャは、メンバに個人の目標と計画を報告するよう強制し、必要だと感じればそれらを修正する。
次のようなやりとりをを何回聞いたことがある?「私はテストXをやるつもりです。…いや、それは来週だ。今日はYをやってくれ。」
これはマイクロマネージメントだ。デイリースタンドアップはマイクロマネージャのための完璧なツールだ。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;よいマネージャは責任を委譲する。&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;理想的なマネージメントには4つのステップが必要だ。&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;複雑なタスクを小さいサブタスクに分解する。&lt;/li&gt;
&lt;li&gt;それらを部下に委譲する。&lt;/li&gt;
&lt;li&gt;報酬と、ペナルティと、ルールをはっきりと伝える。&lt;/li&gt;
&lt;li&gt;報酬はちゃんと支払われること、ペナルティは免れられないこと、ルールは厳格に守られることを確実にする。&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;完璧なマネージャは日々何をするかをメンバに指示しないし、業務時間の使い方にも口を出さない。
彼は信頼し、コントロールする。
彼は、メンバに作業方法を指示して自尊心を削ぐようなことは決してしない。
すばらしいマネージャは次のようなことを言う。「今日はテストXをやるつもりだって? それは君の判断だ。最大限尊重するよ。ただ、Yが今週中に完了しなければ、君は約束どおりプロジェクトからはずされるということを忘れないでくれ。」
こういうマネージャにデイリースタンドアップが必要だろうか?
チームメンバに何をしているか聞く必要があるだろうか?
彼はメンバの計画によけいな干渉はしない。
代わりに、メンバを信頼し、成果をコントロールするだけだ。&lt;/p&gt;

&lt;p&gt;重ねて言うが、私は責任は委譲されるべきだと強く信じている。この委譲は3つの要素からなる。報酬、ペナルティ、ルールだ。
近代西洋文化の中では、これらを定めるのはむしろ難しいかもしれない。普通は長期の契約と月々の給料がある。
しかし、よいマネージャは方法を模索しないといけない。それぞれのタスクは委譲され、分離されないといけない。
これは、あるタスクに従事しているプログラマは、その成功または失敗に個人的な責任を持たなければいけないということだ。
また、そのタスクの結果が与える影響を知っていなければいけない。&lt;/p&gt;

&lt;p&gt;よいマネージャは、どんなチームメンバでも必ず責任逃れをしようとするということを理解している。
誰もがマネージャの両肩に&lt;a href=&#34;http://hbr.org/1999/11/management-time-whos-got-the-monkey/ar/1&#34;&gt;責任猿&lt;/a&gt;(訳注: 責任のメタファである猿)を返そうとする。
それは自然で不可避なことだ。デイリースタンドアップミーティングはこのたくらみを助長するだけだ。&lt;/p&gt;

&lt;p&gt;朝、君が私に進捗を聞くと、私はいくつか問題があって今週末までにタスクが完了できるか怪しいと言う。
それだけだ。私はもうそのタスクに責任がない。もし間に合わなくても私の失敗ではない。
私は失敗するかもしれないと伝えたよね?
今後、その責任は君がもつんだ。&lt;/p&gt;

&lt;p&gt;よいマネージャはこういう策略について知っていて、それを防ぐために報酬・ペナルティ・ルールを明確に規定する。
もし間に合わないかもしれないと言われたら、報酬を逃しペナルティを受けることを思い出させればいい。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-text&#34;&gt;- 締め切りに間に合わないかもしれない…
- それは残念だ。君は$200の週末ボーナスを逃すことになる。
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;プロジェクトマネージャやスクラムマスタがこんなことを言っているのを見たことがあるかい?
あまりないと思う。そう、よいマネージャは珍獣なんだ。
しかし、よいマネージャだけが報酬・ペナルティ・ルールを明確に厳格に定義する能力を持つ。&lt;/p&gt;

&lt;p&gt;この3点が定義されれば、毎朝状況報告ミーティングをする必要はなくなる。
全てがありのままに明確になる。全員がゴールと目標を把握する。
全員が失敗したときに何が起こるかを知っているし、成功したときに何を得られるかも知っている。
マネージャは毎朝それをメンバに確認する必要はない。マネージャはメンバの進捗を確認する必要もない。
マネージャは既に非常に明確に各メンバの目標を定めている。それについて毎朝話す必要があるだろうか?&lt;/p&gt;

&lt;p&gt;ダメなマネージャは目標を定める能力がないので、毎朝メンバをマイクロマネージメントしようとする。
実際、ダメなマネージャは一日中マイクロマネージメントしている。
明確なゴールやルールがないので、チームが間違ったことをしたり何もできなかったりするのではないかと恐れている。
しょっちゅう状況確認するのはそのせいだ。
実際のところ、彼はチームの首根っこをつかんでいるのだ。&lt;/p&gt;

&lt;h3 id=&#34;モチベーション&#34;&gt;モチベーション&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;ダメなマネージャは皆の前で恥をさらさせてモチベーションを下げさせる。&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;ダメなマネージャはチームメンバにやる気を出させる適切な仕組みの作り方を知らないため、恥をさらすことへの生理的な恐怖を利用する。
誰も「忘れました」と皆の前で言いたくないのが当然だ。
デイリースタンドアップミーティングは全員を一列に並べて「昨日何をした?」と尋ねる場だ。
この恐怖の時間はチームにやる気を出させるだろ?
私はそうは思わないが。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;よいマネージャは目標でモチベーションを上げさせる。&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;理想的なマネージメントは、目標を定めて、チームメンバがスキル、リソース、知識、情熱を駆使してそれを達成できるようにする。
適切に定められた目標は常に3つの要素からなる。報酬、ペナルティ、ルールだ。
すばらしいマネージャは組織の目標を個人の目標に落とし込む方法を知っている。
「もし今週中にこの機能を納品できたら、会社はさらなる利益を出せる。サリー、君個人としては$500を得る。もし君がしくじったら、君は他の、あまり面白くないプロジェクトに異動することになる。」
これが完璧に定められた目標だ。毎朝、皆の前で、機能の実装を忘れてないかとか、熱心に作業しているかとか、サリーに尋ねる必要があるだろうか?
この尋問は彼女の手助けになるだろうか?
なるはずがない !
彼女は既に何のために作業しているか知っていて、動機付けは十分だ。
彼女が期日に作業を終えたら、ミーティングを開いて、皆の前で$500のチェックをあげよう。
これがよいマネージャによるミーティングの使い方だ。&lt;/p&gt;

&lt;p&gt;他にもある。
皆の前での日々の進捗報告は、チーム内最高のメンバを堕落させ、最悪にしてしまう。
主な理由は、彼らは突出した成果を出すことで他の人の気を損ねたくないからだ。
グループ内で他の皆と同じように振舞おうとするのは、人間の性だ。
皆が「まだ結果は出ていません」と報告しているときに、有能なプログラマが「全てのタスクを終えたので、他の仕事をください」と言うことを期待するのは奇妙だ。
いや、一回くらいはこういうことを言うかもしれないが、しばらくするとこの有能なプログラマは熱心に作業することをやめるか、チームを抜ける。
彼は、彼の成果が際立っていることを知り、それがグループから評価されていないことを知る。マネージャが何を言おうとも。&lt;/p&gt;

&lt;p&gt;よいマネージャは、プログラマそれぞれに固有の作業速度、質、給料があることを理解する。
よいマネージャは、人によって与えるタスクを変え、異なる結果が返ってくることを期待する。
明らかに、朝全員を並ばせて、皆が同じような報告をすることを期待するのは大きな間違いだ。
この間違いは、突出した成果を出して格別な評価と報酬を得たがっている有能なメンバに破壊的な効果をもたらす。&lt;/p&gt;

&lt;p&gt;ダメなマネージャは異なる人々を異なる方法でマネージメントできない。単にやり方を知らないからだ。
そのため、デイリースタンドアップという、全員が同じような、比較しやすい成果を報告する場が必要になる。
また、皆と違った報告をする人を責めたり励ましたりもしやすい。
言い換えると、ダメなマネージャはデイリースタンドアップを平等の手段として使う。この場合の平等は、チーム全体のモチベーションを破滅させるだけだ。&lt;/p&gt;

&lt;p&gt;デイリースタンドアップや、他のあらゆる状況報告ミーティングは、怠惰で愚かなマネージャを隠して守るのにはすばらしい手段だ。
マネージャの無能っぷりをチームメンバから隠すことができる。
適正のなさを隠し、問題や挑戦やリスクへの恐れを隠す。
よいマネージャになりたいなら、デイリースタンドアップで自分自身を困らせないことだ。&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;以上がYegorの記事。&lt;/p&gt;

&lt;p&gt;Yegorは、自身が経営する&lt;a href=&#34;http://www.teamed.io/&#34;&gt;Teamed.io&lt;/a&gt;という会社でのソフトウェア開発プロジェクトを、自身が考案した&lt;a href=&#34;http://www.xdsd.org/&#34;&gt;XDSD&lt;/a&gt;という手法を使ってマネジメントしている。
上の記事は、そのXDSDを念頭に、
巷で流行っている&lt;a href=&#34;https://ja.wikipedia.org/wiki/%E3%82%B9%E3%82%AF%E3%83%A9%E3%83%A0_%28%E3%82%BD%E3%83%95%E3%83%88%E3%82%A6%E3%82%A7%E3%82%A2%E9%96%8B%E7%99%BA%29&#34;&gt;スクラム&lt;/a&gt;などで行われるデイリースタンドアップにはっきりと異を唱えるものだ。&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://www.agilemanifesto.org/iso/ja/&#34;&gt;アジャイルソフトウェア開発宣言&lt;/a&gt;が発表されてから14年もたち、私の会社のような古い体質の組織にもアジャイルな手法や理念はさすがに浸透していて、私の周りでもデイリーミーティングをするチームが目立つ。私としては、管理される側にとっても、管理する側にとっても、いい情報交換の場だとは思うが、だらだら長くなりがちで、じわじわ煩わしくなるのが難。&lt;/p&gt;

&lt;p&gt;Yegorは、定例ミーティングなんかやめて、情報交換は必要なときに必要な人どうしでやれよと言っているわけだけど、悪いニュースは隠したくなるし、いいニュースもきっかけがないと報告するのがおっくうになるのは自然の摂理ではないか。
この摂理を乗り越え、適時情報共有するための、「適切な情報伝達フロー」の作り方は、また別の記事に書かれているんだろうか。&lt;/p&gt;

&lt;p&gt;責任の委譲についてのくだりは、以前読んだドラッカーを思い出した。もしドラだけど。
ドラッカーは「権限 (authority) を委譲しろ」と言っていたけど、Yegorは「責任 (responsibility) を委譲すべき」と言っている。
また、ドラッカーは、「権限の委譲を責任の放棄と混同してはいけない。権限を委譲したらむしろマネージャの責任は大きくなる」と言っていた。
つまり、Yegorはここでさらっとドラッカーにも異を唱えていることになる。
権威によるバイアスもあるのかもしれないが、私にはやはりドラッカーの話の方がしっくりくる。責任は猿みたいに身軽に移動できるものとは思えない。
失敗した部下のボーナスを減らして別のプロジェクトに飛ばしたところで、開発の遅れを取り戻せるわけではないし、納品が遅れたら怒られるのは結局上の人たちだ。&lt;/p&gt;

&lt;p&gt;ところで、XDSDもそうっぽいけど、アジャイルな開発手法は基本的に、意欲に満ちた優秀なメンバで構成されたチームを前提に組み立てられたものだ。
私の会社を含む、日本の大企業がやっているような、経験(ほぼ)不問、サークルやバイトでの体験談を聞いて新卒一括人柄採用なんてボランティアみたいな選考方法を刷新しない限り、上手く回るようになることはない。
こんないい加減なやり方で集められた烏合の衆で、何千万も何億も稼ぐソフトウェアを作ろうってんだから、上の人たちはさぞかし大変なんだろう。意欲に欠けた部下の尻を叩くためにデイリースタンドアップをやらざるを得ないマネージャを批判するのは、ちょっと気の毒に思える。&lt;/p&gt;
</description>
        </item>
      
    
      
        <item>
          <title>Step by Step to Add a Protocol Support to Pcap4J (Part 1)</title>
          <link>http://tbd.kaitoy.xyz/2015/08/09/step-by-step-to-add-a-protocol-support-to-pcap4j-1/</link>
          <pubDate>Sun, 09 Aug 2015 21:53:29 MDT</pubDate>
          <author>Kaito Yamada</author>
          <guid>http://tbd.kaitoy.xyz/2015/08/09/step-by-step-to-add-a-protocol-support-to-pcap4j-1/</guid>
          <description>

&lt;p&gt;I will show how to add a protocol support to &lt;a href=&#34;https://github.com/kaitoy/pcap4j&#34;&gt;Pcap4J&lt;/a&gt; in detail giving the example of DHCP (v4) via some posts.&lt;/p&gt;

&lt;h3 id=&#34;named-number-class&#34;&gt;Named Number Class&lt;/h3&gt;

&lt;p&gt;First of all, we need to know the packet format. It&amp;rsquo;s explained in &lt;a href=&#34;http://www.ietf.org/rfc/rfc2131.txt&#34;&gt;RFC 2131&lt;/a&gt; as below:&lt;/p&gt;

&lt;blockquote&gt;
&lt;pre&gt;&lt;code class=&#34;language-text&#34;&gt;0                   1                   2                   3
0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1
+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
|     op (1)    |   htype (1)   |   hlen (1)    |   hops (1)    |
+---------------+---------------+---------------+---------------+
|                            xid (4)                            |
+-------------------------------+-------------------------------+
|           secs (2)            |           flags (2)           |
+-------------------------------+-------------------------------+
|                          ciaddr  (4)                          |
+---------------------------------------------------------------+
|                          yiaddr  (4)                          |
+---------------------------------------------------------------+
|                          siaddr  (4)                          |
+---------------------------------------------------------------+
|                          giaddr  (4)                          |
+---------------------------------------------------------------+
|                                                               |
|                          chaddr  (16)                         |
|                                                               |
|                                                               |
+---------------------------------------------------------------+
|                                                               |
|                          sname   (64)                         |
+---------------------------------------------------------------+
|                                                               |
|                          file    (128)                        |
+---------------------------------------------------------------+
|                                                               |
|                          options (variable)                   |
+---------------------------------------------------------------+
&lt;/code&gt;&lt;/pre&gt;

&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;FIELD&lt;/th&gt;
&lt;th&gt;OCTETS&lt;/th&gt;
&lt;th&gt;DESCRIPTION&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;

&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;op&lt;/td&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;td&gt;Message op code / message type.&lt;br&gt;1 = BOOTREQUEST, 2 = BOOTREPLY&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;htype&lt;/td&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;td&gt;Hardware address type, see ARP section in &amp;ldquo;Assigned&lt;br&gt;Numbers&amp;rdquo; RFC; e.g., &amp;lsquo;1&amp;rsquo; = 10mb ethernet.&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;hlen&lt;/td&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;td&gt;Hardware address length (e.g.  &amp;lsquo;6&amp;rsquo; for 10mb ethernet).&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;hops&lt;/td&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;td&gt;Client sets to zero, optionally used by relay agents when booting via a relay agent.&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;xid&lt;/td&gt;
&lt;td&gt;4&lt;/td&gt;
&lt;td&gt;Transaction ID, a random number chosen by the client, used by the client and server to associate messages and responses between a client and a server.&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;secs&lt;/td&gt;
&lt;td&gt;2&lt;/td&gt;
&lt;td&gt;Filled in by client, seconds elapsed since client began address acquisition or renewal process.&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;flags&lt;/td&gt;
&lt;td&gt;2&lt;/td&gt;
&lt;td&gt;Flags (see figure 2).&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;ciaddr&lt;/td&gt;
&lt;td&gt;4&lt;/td&gt;
&lt;td&gt;Client IP address; only filled in if client is in BOUND, RENEW or REBINDING state and can respond to ARP requests.&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;yiaddr&lt;/td&gt;
&lt;td&gt;4&lt;/td&gt;
&lt;td&gt;&amp;lsquo;your&amp;rsquo; (client) IP address.&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;siaddr&lt;/td&gt;
&lt;td&gt;4&lt;/td&gt;
&lt;td&gt;IP address of next server to use in bootstrap; returned in DHCPOFFER, DHCPACK by server.&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;giaddr&lt;/td&gt;
&lt;td&gt;4&lt;/td&gt;
&lt;td&gt;Relay agent IP address, used in booting via a relay agent.&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;chaddr&lt;/td&gt;
&lt;td&gt;16&lt;/td&gt;
&lt;td&gt;Client hardware address.&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;sname&lt;/td&gt;
&lt;td&gt;64&lt;/td&gt;
&lt;td&gt;Optional server host name, null terminated string.&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;file&lt;/td&gt;
&lt;td&gt;128&lt;/td&gt;
&lt;td&gt;Boot file name, null terminated string; &amp;ldquo;generic&amp;rdquo; name or null in DHCPDISCOVER, fully qualified directory-path name in DHCPOFFER.&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;options&lt;/td&gt;
&lt;td&gt;var&lt;/td&gt;
&lt;td&gt;Optional parameters field.  See the options documents for a list of defined options.&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;/blockquote&gt;

&lt;p&gt;It looks DHCP has only one packet format, and the packet doesn&amp;rsquo;t have a payload.
So, we will need to write only one packet class, one header class, and one builder class for DHCP. Easy!&lt;/p&gt;

&lt;p&gt;The header class will have java fields which represent the packet fields listed above (e.g. op, htype, etc.).&lt;/p&gt;

&lt;p&gt;Let&amp;rsquo;s start with writing named number classes, which we will use for types of some of the java fields of the header class.
For example, &lt;code&gt;op&lt;/code&gt; field, which holds a message op code, &lt;code&gt;1&lt;/code&gt; or &lt;code&gt;2&lt;/code&gt; in an octet.
Although the value &lt;code&gt;op&lt;/code&gt; field carries can be stored in a primitive &lt;code&gt;byte&lt;/code&gt; field in the header class,
it&amp;rsquo;s recommended to create a named number class to store the value with its name (meaning) for more readability and usability.
&lt;code&gt;new DhcpV4Packet.Builder().operationCode(DhcpV4OperationCode.BOOTREQUEST)&lt;/code&gt; looks better than &lt;code&gt;new DhcpV4Packet.Builder().operationCode((byte)1)&lt;/code&gt;, doesn&amp;rsquo;t it?&lt;/p&gt;

&lt;p&gt;Named number classes are in &lt;a href=&#34;https://github.com/kaitoy/pcap4j/tree/master/pcap4j-core/src/main/java/org/pcap4j/packet/namednumber&#34;&gt;&lt;code&gt;org.pcap4j.packet.namednumber package&lt;/code&gt;&lt;/a&gt; in pcap4j-core project.
To write a named number class easily, extend &lt;a href=&#34;https://github.com/kaitoy/pcap4j/blob/master/pcap4j-core/src/main/java/org/pcap4j/packet/namednumber/NamedNumber.java&#34;&gt;&lt;code&gt;NamedNumber&lt;/code&gt;&lt;/a&gt;.
The minimum implementation of a number class looks like below:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;package org.pcap4j.packet.namednumber;

public final class DhcpV4OperationCode extends NamedNumber&amp;lt;Byte, DhcpV4OperationCode&amp;gt; {

  private static final long serialVersionUID = 3155818580398801532L;

  public DhcpV4OperationCode(Byte value, String name) {
    super(value, name);
  }

  @Override
  public int compareTo(DhcpV4OperationCode o) {
    return value().compareTo(o.value());
  }

}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Only one method we must implement is &lt;code&gt;compareTo&lt;/code&gt;. The code in the method is always the same: &lt;code&gt;return value().compareTo(o.value());&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;And, because &lt;code&gt;NamedNumber&lt;/code&gt; doesn&amp;rsquo;t have the default constructor, we need to write a constructor with 2 arguments, &lt;code&gt;Byte value&lt;/code&gt; and &lt;code&gt;String name&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Sometimes we may want to override &lt;code&gt;public String valueAsString()&lt;/code&gt;. For example, in the case where the String representation of the value should be like &lt;code&gt;0x0a&lt;/code&gt; instead of &lt;code&gt;10&lt;/code&gt;. &lt;code&gt;DhcpV4OperationCode&lt;/code&gt; isn&amp;rsquo;t the case, though.&lt;/p&gt;

&lt;p&gt;Then, we&amp;rsquo;d better to add pre-defined objects so that:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;we will not need to repeatedly instantiate them for the same value, and&lt;/li&gt;
&lt;li&gt;we will not need to refer to the RFC when you craft DHCP packets.&lt;/li&gt;
&lt;/ul&gt;

&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;  public static final DhcpV4OperationCode BOOTREQUEST
    = new DhcpV4OperationCode((byte)1, &amp;quot;BOOTREQUEST&amp;quot;);

  public static final DhcpV4OperationCode BOOTREPLY
    = new DhcpV4OperationCode((byte)2, &amp;quot;BOOTREPLY&amp;quot;);
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;From a pre-defined object, we can get its value by &lt;code&gt;DhcpV4OperationCode.BOOTREQUEST.value()&lt;/code&gt;.
But, how do we get a pre-defined object from a value? We need to do it when we parse a real packet (a byte array) captured and build a DHCP packet object.&lt;/p&gt;

&lt;p&gt;So, let&amp;rsquo;s enhance the code as follows:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;  private static final Map&amp;lt;Byte, DhcpV4OperationCode&amp;gt; registry
    = new HashMap&amp;lt;Byte, DhcpV4OperationCode&amp;gt;();

  static {
    registry.put(BOOTREQUEST.value(), BOOTREQUEST);
    registry.put(BOOTREPLY.value(), BOOTREPLY);
  }

  public static DhcpV4OperationCode getInstance(Byte value) {
    if (registry.containsKey(value)) {
      return registry.get(value);
    }
    else {
      return new DhcpV4OperationCode(value, &amp;quot;unknown&amp;quot;);
    }
  }
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The new field &lt;code&gt;registry&lt;/code&gt; holds the mapping between values and pre-defined objects, and the &lt;code&gt;getInstance&lt;/code&gt; method is the API to get a pre-defined objects (or new one if not registered) by a value by searching in the &lt;code&gt;registry&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;We may want to add one more API which is to add an object instantiated outside of this class to the &lt;code&gt;registy&lt;/code&gt; like below:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;  public static DhcpV4OperationCode register(DhcpV4OperationCode version) {
    return registry.put(version.value(), version);
  }
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Now, the entire code looks like below:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;package org.pcap4j.packet.namednumber;

import java.util.HashMap;
import java.util.Map;

public final class DhcpV4OperationCode extends NamedNumber&amp;lt;Byte, DhcpV4OperationCode&amp;gt; {

  private static final long serialVersionUID = 3155818580398801532L;

  public static final DhcpV4OperationCode BOOTREQUEST
   = new DhcpV4OperationCode((byte)1, &amp;quot;BOOTREQUEST&amp;quot;);

  public static final DhcpV4OperationCode BOOTREPLY
   = new DhcpV4OperationCode((byte)2, &amp;quot;BOOTREPLY&amp;quot;);

  private static final Map&amp;lt;Byte, DhcpV4OperationCode&amp;gt; registry
    = new HashMap&amp;lt;Byte, DhcpV4OperationCode&amp;gt;();

  static {
    registry.put(BOOTREQUEST.value(), BOOTREQUEST);
    registry.put(BOOTREPLY.value(), BOOTREPLY);
  }

  public static DhcpV4OperationCode getInstance(Byte value) {
    if (registry.containsKey(value)) {
      return registry.get(value);
    }
    else {
      return new DhcpV4OperationCode(value, &amp;quot;unknown&amp;quot;);
    }
  }

  public static DhcpV4OperationCode register(DhcpV4OperationCode version) {
    return registry.put(version.value(), version);
  }

  public DhcpV4OperationCode(Byte value, String name) {
    super(value, name);
  }

  @Override
  public int compareTo(DhcpV4OperationCode o) {
    return value().compareTo(o.value());
  }

}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Likewise, &lt;code&gt;htype&lt;/code&gt; should be represented by a named number class.
Fortunately, we can use the existing class &lt;a href=&#34;https://github.com/kaitoy/pcap4j/blob/master/pcap4j-core/src/main/java/org/pcap4j/packet/namednumber/ArpHardwareType.java&#34;&gt;ArpHardwareType&lt;/a&gt; for it.&lt;/p&gt;

&lt;p&gt;In the &lt;a href=&#34;http://tbd.kaitoy.xyz/2015/10/12/step-by-step-to-add-a-protocol-support-to-pcap4j-2/&#34;&gt;next part&lt;/a&gt;, we will write a packet piece class for the &lt;code&gt;flags&lt;/code&gt; field.&lt;/p&gt;
</description>
        </item>
      
    
      
        <item>
          <title>Another way to capture LAN packets with pcap4j container</title>
          <link>http://tbd.kaitoy.xyz/2015/07/27/another-way-to-capture-lan-packets-with-pcap4j-container/</link>
          <pubDate>Mon, 27 Jul 2015 23:41:49 MDT</pubDate>
          <author>Kaito Yamada</author>
          <guid>http://tbd.kaitoy.xyz/2015/07/27/another-way-to-capture-lan-packets-with-pcap4j-container/</guid>
          <description>

&lt;p&gt;2 days ago, I posted an article &lt;a href=&#34;http://tbd.kaitoy.xyz/2015/07/25/how-to-capture-packets-on-a-local-network-with-pcap4j-container/&#34;&gt;How to capture packets on a local network with Pcap4J container&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Today, I was reading &lt;a href=&#34;https://docs.docker.com/reference/run/#network-settings&#34;&gt;Docker Docs&lt;/a&gt; and found another way to do it.
I&amp;rsquo;m writing about it here.&lt;/p&gt;

&lt;h3 id=&#34;net-option-for-docker-run&#34;&gt;&amp;ndash;net option for docker run&lt;/h3&gt;

&lt;p&gt;When we start a docker container we use &lt;code&gt;docker run&lt;/code&gt; command. It accepts some options.
&lt;code&gt;--net&lt;/code&gt; is one of them, which is to set a network mode for a container.
Network modes &lt;code&gt;--net&lt;/code&gt; takes are &lt;code&gt;bridge&lt;/code&gt;, &lt;code&gt;none&lt;/code&gt;, &lt;code&gt;container:&amp;lt;name|id&amp;gt;&lt;/code&gt;, and &lt;code&gt;host&lt;/code&gt;.
The &lt;code&gt;bridge&lt;/code&gt; is the default mode where containers connect to the virtual Ethernet bridge &lt;code&gt;docker0&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;What I use in this article is &lt;code&gt;host&lt;/code&gt; mode. If it&amp;rsquo;s specified containers use the host network stack,
which means Pcap4J on a container with the &lt;code&gt;host&lt;/code&gt; mode can see network interfaces on its host and sniff network traffic via them directly.&lt;/p&gt;

&lt;p&gt;This sounds easy. And more, according to the Docker Docs, the &lt;code&gt;host&lt;/code&gt; mode gives significantly better networking performance than the &lt;code&gt;bridge&lt;/code&gt; mode. But instead, &lt;code&gt;host&lt;/code&gt; is insecure. (See &lt;a href=&#34;https://docs.docker.com/reference/run/#mode-host&#34;&gt;Docker Docs - Mode: host&lt;/a&gt; for the details.)&lt;/p&gt;

&lt;h3 id=&#34;what-i-did&#34;&gt;What I did&lt;/h3&gt;

&lt;p&gt;In the same environment with &lt;a href=&#34;http://tbd.kaitoy.xyz/2015/07/25/how-to-capture-packets-on-a-local-network-with-pcap4j-container/#what-i-did:a3622224f79a64f15ba6f2b66e1010d9&#34;&gt;2 days ago&lt;/a&gt;, I did the followings:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;Start a Pcap4J container with the network mode set to host&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;  [root@localhost ~]# docker run --name pcap4j-hostnet --net=host kaitoy/pcap4j:latest
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;That&amp;rsquo;s it.&lt;/p&gt;

&lt;p&gt;The above command create a container named &lt;code&gt;pcap4j-hostnet&lt;/code&gt; from the image &lt;code&gt;kaitoy/pcap4j:latest&lt;/code&gt; and execute &lt;code&gt;/bin/sh /usr/local/src/pcap4j/bin/capture.sh eth0 false&lt;/code&gt; in the container.
  The &lt;code&gt;capture.sh&lt;/code&gt; starts packet capturing on &lt;code&gt;eth0&lt;/code&gt; using Pcap4J.
  This &lt;code&gt;eth0&lt;/code&gt; is the interface of the docker host mashine because the network mode is set to &lt;code&gt;host&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;What a easy way.&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;
</description>
        </item>
      
    
      
        <item>
          <title>なぜNullはダメか</title>
          <link>http://tbd.kaitoy.xyz/2015/07/26/why-null-is-bad/</link>
          <pubDate>Sun, 26 Jul 2015 19:07:20 MDT</pubDate>
          <author>Kaito Yamada</author>
          <guid>http://tbd.kaitoy.xyz/2015/07/26/why-null-is-bad/</guid>
          <description>

&lt;p&gt;このエントリでは、Yegor Bugayenkoによる記事、&lt;a href=&#34;http://www.yegor256.com/2014/05/13/why-null-is-bad.html&#34;&gt;Why NULL is Bad?&lt;/a&gt;を紹介する。
(Yegorから和訳と転載の許可は得た。)
以下はその全文の和訳だが、意訳超訳が混じっているので、もとのニュアンスを知りたければ元記事を読んでもいいし、読まなくてもいい。&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;Javaで&lt;code&gt;NULL&lt;/code&gt;を使う単純な例を以下に示す。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;public Employee getByName(String name) {
  int id = database.find(name);
  if (id == 0) {
    return null;
  }
  return new Employee(id);
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;このメソッドの何が間違っているのか? オブジェクトの代わりに&lt;code&gt;NULL&lt;/code&gt;を返す可能性がある、というのが間違っているところだ。
&lt;code&gt;NULL&lt;/code&gt;はオブジェクト指向パラダイムにおけるひどい慣習で、全力で避けるべきものだ。
これについては多くの意見が既に発表されている。
たとえば、Tony Hoareによるプレゼン&lt;a href=&#34;http://www.infoq.com/presentations/Null-References-The-Billion-Dollar-Mistake-Tony-Hoare&#34;&gt;Null References, The Billion Dollar Mistake&lt;/a&gt;や、David Westの著書&lt;a href=&#34;http://www.amazon.com/gp/product/0735619654/ref=as_li_tl?ie=UTF8&amp;amp;camp=1789&amp;amp;creative=9325&amp;amp;creativeASIN=0735619654&amp;amp;linkCode=as2&amp;amp;tag=yegor256com-20&amp;amp;linkId=NQQHJZPHOKM6BTCT&#34;&gt;Object Thinking&lt;/a&gt;の全体に渡って述べられている。&lt;/p&gt;

&lt;p&gt;ここで、その論拠のすべてをまとめ、&lt;code&gt;NULL&lt;/code&gt;の使用を回避して適切なオブジェクト指向構造に置き換える方法の例を紹介したいと思う。&lt;/p&gt;

&lt;p&gt;基本的に、&lt;code&gt;NULL&lt;/code&gt;の代わりになり得るものはふたつある。&lt;/p&gt;

&lt;p&gt;ひとつは&lt;a href=&#34;https://en.wikipedia.org/wiki/Null_Object_pattern&#34;&gt;Nullオブジェクト&lt;/a&gt;デザインパターンだ。(それをひとつの不変オブジェクトにするのが最善。)&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;public Employee getByName(String name) {
  int id = database.find(name);
  if (id == 0) {
    return Employee.NOBODY;
  }
  return Employee(id);
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;もうひとつは、オブジェクトを返せないときに例外を投げて&lt;a href=&#34;http://martinfowler.com/ieeeSoftware/failFast.pdf&#34;&gt;フェイルファスト&lt;/a&gt;することだ。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;public Employee getByName(String name) {
  int id = database.find(name);
  if (id == 0) {
    throw new EmployeeNotFoundException(name);
  }
  return Employee(id);
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;さて、&lt;code&gt;NULL&lt;/code&gt;に反対する論拠を見てみよう。&lt;/p&gt;

&lt;p&gt;因みに、上記Tony HoareのプレゼンやDavid Westの著書に加えて、私はこの記事を書く前に以下の本や記事を読んだ。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Robert Martinの&lt;a href=&#34;http://www.amazon.com/dp/0132350882/&#34;&gt;Clean Code&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Steve McConnellの&lt;a href=&#34;http://www.amazon.com/dp/0735619670/&#34;&gt;Code Complete&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;John Sonmezの&lt;a href=&#34;http://elegantcode.com/2010/05/01/say-no-to-null/&#34;&gt;Say &amp;ldquo;No&amp;rdquo; to &amp;ldquo;Null&amp;rdquo;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;StackOverflowの&lt;a href=&#34;http://stackoverflow.com/questions/1274792/is-returning-null-bad-design&#34;&gt;Is returning null bad design?&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;アドホック-場当たりな-エラー処理&#34;&gt;アドホック(場当たりな)エラー処理&lt;/h3&gt;

&lt;p&gt;インプットとしてオブジェクトを受け取った場合は常に、それが&lt;code&gt;NULL&lt;/code&gt;でないか、また有効なオブジェクト参照かどうかを確認しないといけない。
その確認を忘れると、&lt;code&gt;NullPointerException&lt;/code&gt; (NPE)が実行時に処理を止めてしまう恐れがある。
このため、ロジックが複数の確認処理やif/then/else分岐に汚染されてしまう。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;// this is a terrible design, don&#39;t reuse
Employee employee = dept.getByName(&amp;quot;Jeffrey&amp;quot;);
if (employee == null) {
  System.out.println(&amp;quot;can&#39;t find an employee&amp;quot;);
  System.exit(-1);
} else {
  employee.transferTo(dept2);
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;これは、&lt;a href=&#34;https://ja.wikipedia.org/wiki/C%E8%A8%80%E8%AA%9E&#34;&gt;C&lt;/a&gt;などの命令文を並べる手続き型言語において、例外的な状況に対応する手法だ。
OOPは、主にこういったアドホックエラー処理のブロックを排除する目的で、&lt;a href=&#34;https://ja.wikipedia.org/wiki/%E4%BE%8B%E5%A4%96%E5%87%A6%E7%90%86&#34;&gt;例外処理&lt;/a&gt;を導入した。
OOPでは、例外処理をアプリケーションレベルのエラーハンドラにまかせることで、コードをかなりきれいで短いものにできる。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;dept.getByName(&amp;quot;Jeffrey&amp;quot;).transferTo(dept2);
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;code&gt;NULL&lt;/code&gt;参照は手続き型言語から受け継がれたものだと認識し、Nullオブジェクトか例外を変わりに使うべきだ。&lt;/p&gt;

&lt;h3 id=&#34;あいまいな意図&#34;&gt;あいまいな意図&lt;/h3&gt;

&lt;p&gt;上記メソッドの目的を明確に伝えるためには、&lt;code&gt;getByName()&lt;/code&gt;は&lt;code&gt;getByNameOrNullIfNotFound()&lt;/code&gt;という名前でなければいけない。
これと同様の名前を、オブジェクトか&lt;code&gt;NULL&lt;/code&gt;を返す全ての関数が持たなければいけない。
さもなくば、だれかがあいまいなコードを読むはめになる。だから、コードの意図を明確にするために、関数に長い名前をつけるべきだ。&lt;/p&gt;

&lt;p&gt;このあいまいさを排除するために、関数は、実オブジェクトを返すか、Nullオブジェクトを返すか、例外を投げる、しかしてはいけない。&lt;/p&gt;

&lt;p&gt;性能を考慮すると&lt;code&gt;NULL&lt;/code&gt;を返さざるを得ない場合もあるだろうと主張する人がいるかもしれない。
たとえば、Javaの&lt;code&gt;&lt;a href=&#34;http://docs.oracle.com/javase/jp/7/api/java/util/Map.html&#34;&gt;Map&lt;/a&gt;&lt;/code&gt;インターフェースの&lt;code&gt;get()&lt;/code&gt;メソッドは、指定された要素がないときに&lt;code&gt;NULL&lt;/code&gt;を返す。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;Employee employee = employees.get(&amp;quot;Jeffrey&amp;quot;);
if (employee == null) {
  throw new EmployeeNotFoundException();
}
return employee;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;このコードでは、&lt;code&gt;Map&lt;/code&gt;が&lt;code&gt;NULL&lt;/code&gt;を使っているおかげで、mapを一回しか検索しない。
もし、&lt;code&gt;Map&lt;/code&gt;の&lt;code&gt;get()&lt;/code&gt;を、要素が見つからないときに例外を投げるように修正したら、以下のようなコードになる。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;if (!employees.containsKey(&amp;quot;Jeffrey&amp;quot;)) { // first search
  throw new EmployeeNotFoundException();
}
return employees.get(&amp;quot;Jeffrey&amp;quot;); // second search
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;明らかに、この方法は最初のものより2倍遅い。さて、どうする?&lt;/p&gt;

&lt;p&gt;&lt;code&gt;Map&lt;/code&gt;インターフェースは、(作者を攻めるわけではないが、)設計に問題がある。
その&lt;code&gt;get()&lt;/code&gt;メソッドは&lt;code&gt;Iterator&lt;/code&gt;を返すべきで、その場合以下のようなコードになる。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;Iterator found = Map.search(&amp;quot;Jeffrey&amp;quot;);
if (!found.hasNext()) {
  throw new EmployeeNotFoundException();
}
return found.next();
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;因みに、C++の標準ライブラリの&lt;a href=&#34;http://www.cppll.jp/cppreference/cppmap_details.html&#34;&gt;map::find()&lt;/a&gt;はまさにこのように設計されている。&lt;/p&gt;

&lt;h3 id=&#34;コンピュータ思考-vs-オブジェクト思考&#34;&gt;コンピュータ思考 vs. オブジェクト思考&lt;/h3&gt;

&lt;p&gt;Javaのオブジェクトはデータ構造を指すポインタで、&lt;code&gt;NULL&lt;/code&gt;は何も指さないポインタ(Intel x86プロセッサでは0x00000000)であることを知っている人にとっては、&lt;code&gt;if (employee == null)&lt;/code&gt;という文は理解できる。&lt;/p&gt;

&lt;p&gt;しかし、もし君がオブジェクトになって考えたとすると、この文はかなり意味のないものになる。オブジェクト視点で上記コードは以下のように見える。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-text&#34;&gt;- もしもし、ソフトウェア部ですか?
- はい。
- Jeffreyと話したいのですが。
- 少々お待ちください。。。
- もしもし。
- あなたはNULLですか?
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;会話の最後の質問が変だろ?&lt;/p&gt;

&lt;p&gt;代わりに、もしJeffreyへの取り次ぎをお願いした後で電話が切れたら、自分に問題(例外)が発生した、ということにする。
この時点で、もう一度電話してみるか、Jeffreyにつながらないので仕事が進みませんと上司に報告する。&lt;/p&gt;

&lt;p&gt;あるいは、ソフトウェア部の人が、Jeffreyではないがだいたいの質問に答えられる人に取り次いでくれるかもしれないし、
Jeffreyにしかわからない用事だから無理、と拒否してくるかもしれない(Nullオブジェクト)。&lt;/p&gt;

&lt;h3 id=&#34;遅いエラー&#34;&gt;遅いエラー&lt;/h3&gt;

&lt;p&gt;&lt;a href=&#34;http://martinfowler.com/ieeeSoftware/failFast.pdf&#34;&gt;フェイルファスト&lt;/a&gt;な&lt;code&gt;getByName()&lt;/code&gt;に対して、Nullオブジェクトを使った方はゆっくり死のうとしている。途中で他のものを殺しながら。
問題が発生したので例外処理をすぐに始めるべきだと周りに知らせる代わりに、クライアントからエラーを隠している。&lt;/p&gt;

&lt;p&gt;この議論は、前述した「アドホックエラー処理」に近い。&lt;/p&gt;

&lt;p&gt;コードはできるだけもろい方がいい。必要なときに壊れるように。&lt;/p&gt;

&lt;p&gt;メソッドを、それが扱うデータに対してできるだけ厳しくさせ、与えられたデータに不備があったりメソッドの使用方法に反していたら、例外を投げるようにすべきだ。&lt;/p&gt;

&lt;p&gt;もしくは、共通的な挙動をする他は常に例外を投げるNullオブジェクトを返すべきだ。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;public Employee getByName(String name) {
  int id = database.find(name);
  Employee employee;
  if (id == 0) {
    employee = new Employee() {
      @Override
      public String name() {
        return &amp;quot;anonymous&amp;quot;;
      }
      @Override
      public void transferTo(Department dept) {
        throw new AnonymousEmployeeException(
          &amp;quot;I can&#39;t be transferred, I&#39;m anonymous&amp;quot;
        );
      }
    };
  } else {
    employee = Employee(id);
  }
  return employee;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;可変で不完全なオブジェクト&#34;&gt;可変で不完全なオブジェクト&lt;/h3&gt;

&lt;p&gt;一般的に、オブジェクトは&lt;a href=&#34;http://www.yegor256.com/2014/06/09/objects-should-be-immutable.html&#34;&gt;不変的&lt;/a&gt;に設計することが望ましい。
これはつまり、オブジェクトはインスタンス化の際に必要な情報を全て受け取り、その後そのライフサイクル全体に渡ってその状態を変えないということだ。&lt;/p&gt;

&lt;p&gt;&lt;code&gt;NULL&lt;/code&gt;は、&lt;a href=&#34;https://ja.wikipedia.org/wiki/%E9%81%85%E5%BB%B6%E8%AA%AD%E3%81%BF%E8%BE%BC%E3%81%BF&#34;&gt;遅延読み込み&lt;/a&gt;をする際によく使われ、オブジェクトを不完全で可変にしてしまう。以下が例だ。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;public class Department {
  private Employee found = null;
  public synchronized Employee manager() {
    if (this.found == null) {
      this.found = new Employee(&amp;quot;Jeffrey&amp;quot;);
    }
    return this.found;
  }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;この手法は、広く使われてはいるが、OOPにおけるアンチパターンだ。
主な理由は、実行環境の性能問題の責任をオブジェクトに負わせているからだ。本来それは&lt;code&gt;Employee&lt;/code&gt;オブジェクトが気にすべきことではない。&lt;/p&gt;

&lt;p&gt;オブジェクトが、自身の状態を管理して、自身の役割に関するふるまいを公開する代わりに、戻り値のキャッシュの面倒を見なければいけない。これが遅延読み込みというものだ。&lt;/p&gt;

&lt;p&gt;キャッシュはemployee(従業員)がオフィスでするようなことじゃないだろ?&lt;/p&gt;

&lt;p&gt;解決策?
遅延読み込みを上記の例みたいな原始的な方法でやらないことだ。代わりに、キャッシュ処理をアプリケーションの他のレイヤに移せばいい。&lt;/p&gt;

&lt;p&gt;たとえば、Javaなら、アスペクト指向プログラミングのアスペクトが使える。
たとえば、&lt;a href=&#34;http://aspects.jcabi.com/&#34;&gt;jcabi-aspects&lt;/a&gt;には&lt;code&gt;&lt;a href=&#34;http://aspects.jcabi.com/annotation-cacheable.html&#34;&gt;@Cacheable&lt;/a&gt;&lt;/code&gt;というアノテーションがあり、メソッドの戻り値をキャッシュできる。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;import com.jcabi.aspects.Cacheable;
public class Department {
  @Cacheable(forever = true)
  public Employee manager() {
    return new Employee(&amp;quot;Jacky Brown&amp;quot;);
  }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;君がこの分析に納得して&lt;code&gt;NULL&lt;/code&gt;を使うのをやめることを願う。&lt;/p&gt;

&lt;p&gt;&lt;div class=&#34;embed video-player&#34; style=&#34;text-align: center&#34;&gt;
  &lt;iframe class=&#34;youtube-player&#34; type=&#34;text/html&#34; width=&#34;320&#34; height=&#34;193&#34; src=&#34;http://www.youtube.com/embed/o3aNJX7AP3M&#34; allowfullscreen frameborder=&#34;0&#34;&gt;
  &lt;/iframe&gt;
&lt;/div&gt;
&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;以上がYegorの記事。&lt;/p&gt;

&lt;p&gt;Nullを使っちゃだめという意見はめずらしくないが、その根拠をコードの信頼性、可読性といった技術的な側面からだけでなく、
オブジェクト界に降り立って見たときに感じる違和感というオブジェクト哲学的な側面からも説明する辺りが面白い。&lt;/p&gt;

&lt;p&gt;まあNullを完全に使わないという境地には、少なくともJavaのコードでは一生たどり着ける気がしないが。
メソッドの先頭で引数のNullチェックをするとかもダメなんだろうか。それがダメだとフェイルファストができなかったり、メッセージのないNullPointerExceptionが発生したりして微妙。
あ、フルスクラッチで完全に自己完結したアプリケーションを作る場合の話か。それならそもそもNullを渡すなという話にしかならないか。&lt;/p&gt;

&lt;p&gt;自分で書くクラスやライブラリについて、Nullは内部的には使うけど、APIには一切Nullを返させない、くらいなら実現するのは難しくなさそうだし、やったほうがいい気もする。(この場合遅延読み込みで一時的にNullをセットしておくのはあり。)
ただ、性能を考えた場合は、例えばエラー処理はアドホックが一番軽くて、次にNullオブジェクトパターンで、例外はちょっと重めという風になるだろうから、Nullを返したくなることもありそう。&lt;/p&gt;

&lt;p&gt;ことあるごとに例外を投げてくるAPIは使う側にとってはうっとうしいしなぁ。
多彩な例外を投げ分けるJavaのリフレクションみたいなのは、使うとコードが散らかってかなわん。&lt;/p&gt;
</description>
        </item>
      
    
      
        <item>
          <title>How to capture packets on a local network with Pcap4J container</title>
          <link>http://tbd.kaitoy.xyz/2015/07/25/how-to-capture-packets-on-a-local-network-with-pcap4j-container/</link>
          <pubDate>Sat, 25 Jul 2015 19:05:06 MDT</pubDate>
          <author>Kaito Yamada</author>
          <guid>http://tbd.kaitoy.xyz/2015/07/25/how-to-capture-packets-on-a-local-network-with-pcap4j-container/</guid>
          <description>

&lt;p&gt;I&amp;rsquo;ll show how to capture packets on a local network with Pcap4J container.&lt;/p&gt;

&lt;h3 id=&#34;docker-network&#34;&gt;Docker network&lt;/h3&gt;

&lt;p&gt;By default, Docker containers are not connected to a local network.
They are connected only to a virtual network Docker creates as like below:&lt;/p&gt;

&lt;p&gt;
&lt;figure &gt;
    
        &lt;img src=&#34;http://tbd.kaitoy.xyz/images/docker_network.jpg&#34; alt=&#34;Docker network&#34; width=&#34;500&#34; /&gt;
    
    
&lt;/figure&gt;
&lt;/p&gt;

&lt;p&gt;Refer to &lt;a href=&#34;https://docs.docker.com/articles/networking/&#34;&gt;the Docker doc&lt;/a&gt; for more details.&lt;/p&gt;

&lt;h3 id=&#34;what-s-a-challenge&#34;&gt;What&amp;rsquo;s a challenge&lt;/h3&gt;

&lt;p&gt;In order to let a Pcap4J container capture packets in a local (real) network,
we need to directly connect the container to the local network,
because docker0 forwards only packets the destinations of which are in the virtual network.&lt;/p&gt;

&lt;p&gt;How to do it is explained in some articles.
I referred to one of them, &lt;a href=&#34;http://blog.oddbit.com/2014/08/11/four-ways-to-connect-a-docker/&#34;&gt;Four ways to connect a docker container to a local network in Odd Bits blog&lt;/a&gt;, and succeeded in local network capturing using the 4th way.&lt;/p&gt;

&lt;p&gt;What I actually did is as follows.&lt;/p&gt;

&lt;h3 id=&#34;what-i-did&#34;&gt;What I did&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Environment&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;OS: CentOS 7.0 (on VMware Player 7.1.0 on Windows 7)&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;[root@localhost ~]# uname -a
Linux localhost.localdomain 3.10.0-229.el7.x86_64 #1 SMP Fri Mar 6 11:36:42 UTC 2015 x86_64 x86_64 x86_64 GNU/Linux
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;user: root&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Pcap4J version: 1.5.1-SNAPSHOT&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Docker version: 1.6.2&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Network interfaces:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;  [root@localhost ~]# ip addr show
  1: lo: &amp;lt;LOOPBACK,UP,LOWER_UP&amp;gt; mtu 65536 qdisc noqueue state UNKNOWN
      link/loopback 00:00:00:00:00:00 brd 00:00:00:00:00:00
      inet 127.0.0.1/8 scope host lo
         valid_lft forever preferred_lft forever
      inet6 ::1/128 scope host
         valid_lft forever preferred_lft forever
  2: eth0: &amp;lt;BROADCAST,MULTICAST,UP,LOWER_UP&amp;gt; mtu 1500 qdisc pfifo_fast state UP qlen 1000
      link/ether 00:0c:29:8e:95:27 brd ff:ff:ff:ff:ff:ff
      inet 192.168.1.123/24 brd 192.168.1.255 scope global dynamic eth0
         valid_lft 85975sec preferred_lft 85975sec
      inet6 2601:282:8102:2623:20c:29ff:fe8e:9527/64 scope global dynamic
         valid_lft 221469sec preferred_lft 221469sec
      inet6 fe80::20c:29ff:fe8e:9527/64 scope link
         valid_lft forever preferred_lft forever
  3: docker0: &amp;lt;NO-CARRIER,BROADCAST,MULTICAST,UP&amp;gt; mtu 1500 qdisc noqueue state DOWN
      link/ether 56:84:7a:fe:97:99 brd ff:ff:ff:ff:ff:ff
      inet 172.17.42.1/16 scope global docker0
         valid_lft forever preferred_lft forever
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;br&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Prerequisites:

&lt;ul&gt;
&lt;li&gt;Docker is installed and Docker service is started&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://man7.org/linux/man-pages/man1/nsenter.1.html&#34;&gt;nsenter&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;br&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Step by step&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;Preparing&lt;/p&gt;

&lt;p&gt;Create a utility script &lt;code&gt;docker-pid&lt;/code&gt; with the following content and place it somewhere in the &lt;code&gt;PATH&lt;/code&gt;.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;  #!/bin/sh
  exec docker inspect --format &#39;{{ .State.Pid }}&#39; &amp;quot;$@&amp;quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This script show the PID of a docker container by name or ID.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Pull the latest Pcap4J image&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;[root@localhost ~]# docker pull kaitoy/pcap4j
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Start a Pcap4J container with wait mode&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;[root@localhost ~]# docker run --name pcap4j-br kaitoy/pcap4j:latest eth1 true
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This container (&lt;code&gt;pcap4j-br&lt;/code&gt;) waits for a ping to &lt;code&gt;eth0&lt;/code&gt; on the container before staring capturing packets with &lt;code&gt;eth1&lt;/code&gt; on the container.
After the container starts, you will see messages like below:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;17:49:21.196 [main] INFO  org.pcap4j.core.Pcaps - 3 NIF(s) found.
eth0 (null)
IP address: /172.17.0.3
IP address: /fe80:0:0:0:42:acff:fe11:3
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The messages say IP address of &lt;code&gt;eth0&lt;/code&gt; is &lt;code&gt;172.17.0.3&lt;/code&gt;. We will use it later.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Configure a bridge interface&lt;/p&gt;

&lt;p&gt;Open another terminal and do the following:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;[root@localhost ~]# ip link add eth1 link eth0 type macvlan mode bridge
[root@localhost ~]# ip link set netns $(docker-pid pcap4j-br) eth1
[root@localhost ~]# nsenter -t $(docker-pid pcap4j-br) -n ip link set eth1 up
[root@localhost ~]# nsenter -t $(docker-pid pcap4j-br) -n ip route del default
[root@localhost ~]# nsenter -t $(docker-pid pcap4j-br) -n ip addr add 192.168.1.200/24 dev eth1
[root@localhost ~]# nsenter -t $(docker-pid pcap4j-br) -n ip route add default via 192.168.1.1 dev eth1
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The above commands
1) add an interface &lt;code&gt;eth1&lt;/code&gt; bridged to &lt;code&gt;eth0&lt;/code&gt; to the Docker host machine,
2) move the &lt;code&gt;eth1&lt;/code&gt; to the name space of &lt;code&gt;pcap4j-br&lt;/code&gt;,
3) start &lt;code&gt;eth1&lt;/code&gt;,
4) delete the default route in &lt;code&gt;pcap4j-br&lt;/code&gt;,
5) add an IP address &lt;code&gt;192.168.1.200/24&lt;/code&gt; to &lt;code&gt;eth1&lt;/code&gt;,
6) and set the default route in &lt;code&gt;pcap4j-br&lt;/code&gt; to &lt;code&gt;192.168.1.1&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Too much hassle? I agree. Let&amp;rsquo;s use an awesome tool, &lt;a href=&#34;https://github.com/jpetazzo/pipework&#34;&gt;pipework&lt;/a&gt;.
This tool accomplishes the above 6 steps in easier way as shown below:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;[root@localhost ~]# git clone https://github.com/jpetazzo/pipework.git
[root@localhost ~]# cd pipework
[root@localhost pipework]# ./pipework eth0 pcap4j-br 192.168.1.200/24@192.168.1.1
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;pipework uses &lt;code&gt;ip netns exec&lt;/code&gt; command instead of &lt;code&gt;nsenter&lt;/code&gt; to manipulate a container.
Incidentally, &lt;code&gt;docker exec&lt;/code&gt; didn&amp;rsquo;t work for the step 3 due to an error &amp;ldquo;&lt;code&gt;RTNETLINK answers: Operation not permitted&lt;/code&gt;&amp;rdquo;.&lt;/p&gt;

&lt;p&gt;In addition, in my case, because I was doing it on a VMware VM, I needed to enable the promiscuous mode of &lt;code&gt;eth0&lt;/code&gt; (on the docker host machine) as follows:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;[root@localhost ~]# ip link set dev eth0 promisc on
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Try to poke the container&lt;/p&gt;

&lt;p&gt;You can now communicate with &lt;code&gt;pcap4j-br&lt;/code&gt; using &lt;code&gt;eth1&lt;/code&gt; &lt;strong&gt;from another host&lt;/strong&gt;.
I tried some pings from the VM&amp;rsquo;s host to &lt;code&gt;pcap4j-br&lt;/code&gt; and saw replies.&lt;/p&gt;

&lt;p&gt;Note that you can &lt;strong&gt;NOT&lt;/strong&gt; communicate with &lt;code&gt;pcap4j-br&lt;/code&gt; via &lt;code&gt;eth1&lt;/code&gt; from the docker host.
See the &lt;a href=&#34;http://blog.oddbit.com/2014/08/11/four-ways-to-connect-a-docker/&#34;&gt;Odd Bits blog&lt;/a&gt; for the details.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Start packet capturing&lt;/p&gt;

&lt;p&gt;Ping to &lt;code&gt;eth0&lt;/code&gt; of &lt;code&gt;pcap4j-br&lt;/code&gt; form the docker host to start packet capturing.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;[root@localhost ~]# ping -c 1 172.17.0.3
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;/ol&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
        </item>
      
    
      
        <item>
          <title>Getter/Setterは悪だ。以上。</title>
          <link>http://tbd.kaitoy.xyz/2015/07/22/getters-setters-evil/</link>
          <pubDate>Wed, 22 Jul 2015 00:21:15 MDT</pubDate>
          <author>Kaito Yamada</author>
          <guid>http://tbd.kaitoy.xyz/2015/07/22/getters-setters-evil/</guid>
          <description>

&lt;p&gt;このエントリでは、Yegor Bugayenkoによる記事、&lt;a href=&#34;http://www.yegor256.com/2014/09/16/getters-and-setters-are-evil.html&#34;&gt;Getters/Setters. Evil. Period.&lt;/a&gt;を紹介する。
(Yegorから和訳と転載の許可は得た。)
以下はその全文の和訳だが、意訳超訳が混じっているので、もとのニュアンスを知りたければ元記事を読んでもいいし、読まなくてもいい。&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;2003年にAllen Holubが書いた&lt;a href=&#34;http://www.javaworld.com/article/2073723/core-java/why-getter-and-setter-methods-are-evil.html&#34;&gt;Why getter and setter methods are evil&lt;/a&gt;という有名な記事に端を発する古い議論がある。それは、getter/setterはアンチパターンで避けるべきものなのか、
もしくはオブジェクト指向プログラミングに必須なものなのかというもの。
この議論に少しだけ私の意見を加えたいと思う。&lt;/p&gt;

&lt;p&gt;上記記事の要旨はこうだ。
getterやsetterはひどい慣習で、これらを使うやつらはゆるせん。誤解の無いようもう一度言うが、
私はget/setを可能な限り避けるべきだと言っているのではない。それらは君のコードに決して現れてはいけないのだ。&lt;/p&gt;

&lt;p&gt;横柄で目につく物言いだろう?
君は15年来get/setパターンを使い続けている尊敬を集めるJavaアーキテクトなんだろう?
どこぞの馬の骨にこんなデタラメを言われたくはないだろう?
ああ、その気持ちはわかる。私がDavid Westの&lt;a href=&#34;http://www.amazon.com/gp/product/0735619654/ref=as_li_tl?ie=UTF8&amp;amp;camp=1789&amp;amp;creative=9325&amp;amp;creativeASIN=0735619654&amp;amp;linkCode=as2&amp;amp;tag=yegor256com-20&amp;amp;linkId=NQQHJZPHOKM6BTCT&#34;&gt;Object Thinking&lt;/a&gt;という本に出会ったとき、
私もほとんど同じことを感じた。
Object Thinkingは、私が今まで読んだオブジェクト指向プログラミングについての本の中で最高のものだ。
だからお願いだ。ひとまず落ち着いて。私に説明させてほしい。&lt;/p&gt;

&lt;h3 id=&#34;既存の論拠&#34;&gt;既存の論拠&lt;/h3&gt;

&lt;p&gt;オブジェクト指向の世界で、アクセッサ(getterやsetterの別名)に反対する論拠はいくつかあるが、
私にはそれら全てが十分に有力であるとは思えない。ひとつひとつ簡単に見ていこう。&lt;/p&gt;

&lt;p&gt;&lt;br&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;頼め、尋ねるな&lt;/p&gt;

&lt;p&gt;Allen Holub曰く、「ある処理をする際、その処理のために君が欲しい情報をオブジェクトに尋ねてはいけない。
その情報を持ったオブジェクトにその処理をするよう頼みなさい。」&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;br&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;カプセル化原則違反&lt;/p&gt;

&lt;p&gt;setterを通してどんな新たなデータも入力できるので、
一つのオブジェクトをその他の様々なオブジェクトが様々に扱うことができてしまう。
また、だれでもオブジェクトを変更できるので、
オブジェクトが単純に自身の状態を安全にカプセル化できない。&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;br&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;実装の詳細の暴露&lt;/p&gt;

&lt;p&gt;あるオブジェクトから他のオブジェクトを取得できる場合、前者のオブジェクトの実装の詳細に過度に依存してしまう。
もし明日その実装、例えば返すオブジェクトの型が変わったら、周辺のコードも書き換えないといけない。&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;br&gt;&lt;/p&gt;

&lt;p&gt;これらの全ての論拠は正当だが、重要なポイントが抜けている。&lt;/p&gt;

&lt;h3 id=&#34;根本的な誤解&#34;&gt;根本的な誤解&lt;/h3&gt;

&lt;p&gt;ほとんどのプログラマはオブジェクトはメソッドを持ったデータ構造だと考えている。
ここでBozhidar Bozhanovによる記事、&lt;a href=&#34;https://dzone.com/articles/getters-and-setters-are-not&#34;&gt;Getters and Setters Are Not Evil&lt;/a&gt;から引用する。&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;しかし、人々がgetterやsetterをつけるオブジェクトのほとんどが、単純なデータホルダだ。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;この思い違いが巨大な誤解の結果だ!
オブジェクトは単純なデータホルダではない。オブジェクトはメソッド付きのデータ構造ではない。
このデータホルダというコンセプトは、CやCOBOLといった手続き型言語からオブジェクト指向プログラミングに持ち込まれたものだ。
もう一度言う。オブジェクトはデータとそれを操作する関数をセットにしたものではない。
オブジェクトはデータエンティティではない。では何か?&lt;/p&gt;

&lt;h3 id=&#34;ボールと犬&#34;&gt;ボールと犬&lt;/h3&gt;

&lt;p&gt;真のオブジェクト指向プログラミングでは、
オブジェクトは&lt;a href=&#34;http://tbd.kaitoy.xyz/2015/10/28/seven-virtues-of-good-object/&#34;&gt;生きている生物&lt;/a&gt;だ。私や君と同じように。
オブジェクトは生きている有機体で、それ自身の挙動や、特性や、ライフサイクルを持っている。&lt;/p&gt;

&lt;p&gt;生きている有機体はsetterを持てるだろうか? 犬にボールを&amp;rdquo;set&amp;rdquo;できるだろうか? 無理だろう。
だが、以下のコードはまさにそれをしている。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;Dog dog = new Dog();
dog.setBall(new Ball());
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;これをどう感じる?&lt;/p&gt;

&lt;p&gt;また、ボールを犬から取得できるだろうか?
まあ、できるかもしれない、もしその犬がボールを食べて、君が手術をするのであれば。
この場合、確かに、犬からボールを&amp;rdquo;get&amp;rdquo;できる。以下のコードが今話したようなことをやっている。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;Dog dog = new Dog();
Ball ball = dog.getBall();
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;またさらにばかげた例がこれだ。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;Dog dog = new Dog();
dog.setWeight(&amp;quot;23kg&amp;quot;);
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;現実世界でこの処理がどんなか想像できるかな?&lt;/p&gt;

&lt;p&gt;君が毎日書いているコードはこれに似ているかい?
もしそうなら、君は手続き型プログラマだ。認めなさい。
David Westが彼の本の30ページでそれについて以下のように言っている。&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;成功した手続き型開発者が成功するオブジェクト開発者に移行するための最初のステップは、ロボトミーだ。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;君はロボトミーが必要か？
因みに、WestのObject Thinkingを読んでいた時、私には明らかに必要だったので受けた。&lt;/p&gt;

&lt;h3 id=&#34;オブジェクト思考&#34;&gt;オブジェクト思考&lt;/h3&gt;

&lt;p&gt;オブジェクト思考を開始すると、君は即座にメソッド名を変更し、多分以下のコードに辿り着く。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;Dog dog = new Dog();
dog.take(new Ball());
Ball ball = dog.give();
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;今、私たちは犬を実際の動物として扱っている。この犬は、ボールを私たちから受け取り、頼めば返してくれる。
ここで特筆すべきは、この犬は &lt;code&gt;NULL&lt;/code&gt; を返すことはできない。犬は &lt;code&gt;NULL&lt;/code&gt; が何なのかなんて知らないからね。オブジェクト思考は即座に&lt;a href=&#34;http://www.yegor256.com/2014/05/13/why-null-is-bad.html&#34;&gt;NULL参照&lt;/a&gt;をコードから排除する。&lt;/p&gt;

&lt;p&gt;さらに、オブジェクト思考はオブジェクト不変性につながる。
犬の体重の例を、君は以下のように書き換えるだろう。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;Dog dog = new Dog(&amp;quot;23kg&amp;quot;);
int weight = dog.weight();
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;この犬は不変な生きた有機体であり、だれも外からその体重やサイズや名前などを変更することはできない。
この犬は要求に応じて体重や名前を教えてくれる。
オブジェクトの中身を要求するパブリックメソッドには何の問題もないが、
こういったメソッドは&amp;rdquo;getter&amp;rdquo;ではなく、&amp;rdquo;get&amp;rdquo;というプレフィックスは決して付かない。
私たちは犬から何かを取ろうというのではない。犬から名前を取るのではなく、犬に名前を教えてくれるよう頼むのだ。
この違いが分かるかな?&lt;/p&gt;

&lt;p&gt;語義論の話をしているというわけでもない。
手続き型プログラミング思考とオブジェクト指向プログラミング思考とを区別しようというのだ。
手続き型プログラミングでは、私たちはデータを扱い、必要に応じてそれを操作したり取得したりセットしたり消したりする。
私たちはデータの責任者で、そのデータは単なる受動的なコンポーネントだ。
犬は私たちとは何の関係もなく、ただのデータホルダだ。それは生命を持っていない。
私たちはそれから必要なものを何でも自由に取得できるし、どんなデータでもセットすることができる。
これがCやCOBOLやPascalなどの手続き型言語のやりかただ。&lt;/p&gt;

&lt;p&gt;それに対して、真のオブジェクト指向の世界では、オブジェクトを生きた有機体のように扱い、
オブジェクトには生まれた日と死ぬ瞬間がある。また、君が望むなら、アイデンティティや性質を持たせてもいい。
犬にはデータの一部(例えば体重)をくれるよう頼むことができるし、犬はその情報を返してもよい。
ただ、この犬は能動的なコンポーネントであることを忘れてはいけない。
こちらの要求に対し、何をするかは犬が決めるのだ。&lt;/p&gt;

&lt;p&gt;以上が、getやsetで始まるメソッドをオブジェクトに持たせることが概念的に間違っている理由だ。
それは、多くの人々が主張するように、カプセル化を崩すということではない。
それは、君がオブジェクト的な思考をしているか、もしくは今だCOBOLをJavaのシンタックスで書いているかということだ。&lt;/p&gt;

&lt;p&gt;追伸: そうだ、君はこう尋ねるかもしれない。JavaBeans、JPA、JAXBなどのget/set表記に頼るJava APIはどうなんだ?
Rubyに付属するアクセッサ生成を簡易化する機能は?
ああ、それらは全て私たちにとっての不幸だ。
手続き型COBOLの原始的な世界に留まることは、真のオブジェクトからなる美しい世界を正しく理解し感謝するのに比べてはるかに簡単だ。&lt;/p&gt;

&lt;p&gt;追追伸: 言い忘れたが、setterを使った依存性注入もひどいアンチパターンだ。
それについてはいずれ書く。&lt;/p&gt;

&lt;p&gt;&lt;div class=&#34;embed video-player&#34; style=&#34;text-align: center&#34;&gt;
  &lt;iframe class=&#34;youtube-player&#34; type=&#34;text/html&#34; width=&#34;320&#34; height=&#34;193&#34; src=&#34;http://www.youtube.com/embed/WSgP85kr6eU&#34; allowfullscreen frameborder=&#34;0&#34;&gt;
  &lt;/iframe&gt;
&lt;/div&gt;
&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;以上がYegorの記事。&lt;/p&gt;

&lt;p&gt;Javaを始めた当初から今まで、Getter/Setterは絶対正義だと信じ、クラスを作れば無心でIDEの言いなりにそれを生成していたので、
この記事はなかなかに刺激的だった。(まあfinalなフィールドが好きなのでsetterの方はあまり作らなかったが。)&lt;/p&gt;

&lt;p&gt;ただ、記事の本質としては、Getter/Setterパターン、つまり、
オブジェクトのフィールドをprivateにし、メソッドを介してアクセスさせるようにすることで、実装の詳細を隠蔽し、
APIと分離させることを図るデザインパターンの技術的役割や目的を否定しているわけではなく、
オブジェクト指向の哲学的な部分にも則り、Getter/Setterパターンを真のオブジェクト界に向けて昇華させましょうと言っているように読める。&lt;/p&gt;

&lt;p&gt;犬とボールのやり取りをするコードのビフォーアフターはsetBall/getBallがtake/giveになっただけで、
これだけ見れば処理が変わるわけでもないし、コンパイラに言わせればどっちでもいいだろとなる。
ただ、プログラマにボールを無下につっこまれるビフォーの犬よりも、
自ら能動的にボールを受け取り返してくれるアフターの犬の方が幸せそうで愛らしいのは確かだ。
真のオブジェクト界を垣間見た気がする。&lt;/p&gt;
</description>
        </item>
      
    
      
        <item>
          <title>Pcap4J container with runC</title>
          <link>http://tbd.kaitoy.xyz/2015/07/19/pcap4j-container-with-runc/</link>
          <pubDate>Sun, 19 Jul 2015 16:25:03 MDT</pubDate>
          <author>Kaito Yamada</author>
          <guid>http://tbd.kaitoy.xyz/2015/07/19/pcap4j-container-with-runc/</guid>
          <description>

&lt;p&gt;I tried to run a &lt;a href=&#34;https://registry.hub.docker.com/u/kaitoy/pcap4j/&#34;&gt;Pcap4J container&lt;/a&gt; with &lt;a href=&#34;https://runc.io/&#34;&gt;runC&lt;/a&gt;.&lt;/p&gt;

&lt;h2 id=&#34;what-is-pcap4j&#34;&gt;What is Pcap4J?&lt;/h2&gt;

&lt;p&gt;Pcap4J is a Java library for capturing, crafting, and sending packets.
It&amp;rsquo;s actually a Java wrapper for libpcap/WinPcap plus packet analyzer.
We can see the details in its &lt;a href=&#34;https://github.com/kaitoy/pcap4j&#34;&gt;README&lt;/a&gt;.&lt;/p&gt;

&lt;h2 id=&#34;what-is-runc&#34;&gt;What is runC?&lt;/h2&gt;

&lt;p&gt;runC is a container runtime developed by Docker and released on June 22, 2015.
With runC, we can start a container from a docker image without the docker service or the docker command.&lt;/p&gt;

&lt;p&gt;That said, as of now, runC cannot directory use docker images.
We need to create a container form a docker image and export its filesystem before executing runC.&lt;/p&gt;

&lt;p&gt;It seems currently it supports only Linux but Windows support is in the roadmap.&lt;/p&gt;

&lt;h2 id=&#34;what-i-did&#34;&gt;What I did&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;Environment

&lt;ul&gt;
&lt;li&gt;OS: CentOS 7 (on VMware Player 7.1.0 on Windows 7)&lt;/li&gt;
&lt;li&gt;user: root&lt;/li&gt;
&lt;li&gt;runC version: 0.2&lt;/li&gt;
&lt;li&gt;Pcap4J version: 1.5.1-SNAPSHOT&lt;/li&gt;
&lt;li&gt;Docker version: 1.6.2&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;br&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Prerequisites:

&lt;ul&gt;
&lt;li&gt;Docker is installed and Docker service is started&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://golang.org/&#34;&gt;Go&lt;/a&gt; is installed&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;br&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Step by step&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;Install runC&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;[root@localhost ~]# mkdir -p $GOPATH/src/github.com/opencontainers
[root@localhost ~]# cd $GOPATH/src/github.com/opencontainers
[root@localhost opencontainers]# git clone https://github.com/opencontainers/runc
[root@localhost opencontainers]# cd runc
[root@localhost runc]# make &amp;amp;&amp;amp; make install
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Pull the Pcap4J docker image.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;[root@localhost ~]# docker pull kaitoy/pcap4j
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Create a container from the image.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;[root@localhost ~]# docker run -d --name pcap4j-tmp kaitoy/pcap4j:latest /bin/bash
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Export the container&amp;rsquo;s file system.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;[root@localhost ~]# mkdir /tmp/pcap4j-test
[root@localhost pcap4j-test]# cd /tmp/pcap4j-test
[root@localhost pcap4j-test]# docker export pcap4j-tmp &amp;gt; pcap4j.tar
[root@localhost pcap4j-test]# tar xf pcap4j.tar
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;We are now free from Docker. We don&amp;rsquo;t need Docker service, Docker command, Docker images, nor Docker containers anymore.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Generate a container config file.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;[root@localhost pcap4j-test]# runc spec | sed -e &#39;s/rootfs/\/root\/Desktop\/pcap4j-container/&#39; -e &#39;s/&amp;quot;readonly&amp;quot;: true/&amp;quot;readonly&amp;quot;: false/&#39; -e &#39;s/&amp;quot;NET_BIND_SERVICE&amp;quot;/&amp;quot;NET_BIND_SERVICE&amp;quot;,&amp;quot;NET_ADMIN&amp;quot;,&amp;quot;NET_RAW&amp;quot;/&#39; &amp;gt; config.json
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;In the above command, &lt;code&gt;runc spec&lt;/code&gt; generates a standard container config file and &lt;code&gt;sed&lt;/code&gt; modifies it for Pcap4J.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Run a container.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;[root@localhost pcap4j-test]# runc
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;In the container, enable lo.&lt;/p&gt;

&lt;p&gt;As far as I saw, lo is the only interface we can use in a container.
So, I used it to capture packets.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;sh-4.1# ifconfig lo up
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Generate a script to ping localhost and run it background.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;sh-4.1# cd /usr/local/src/pcap4j/bin
sh-4.1# echo ping 127.0.0.1 \&amp;gt; /dev/null &amp;gt; pinger.sh
sh-4.1# chmod +x pinger.sh
sh-4.1# ./pinger.sh &amp;amp;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;In the next step, ICMP packets from this pinger.sh will be captured.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Generate a script to start capturing packets with Pcap4J and run it.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;sh-4.1# cat runGetNextPacket.sh | sed -e &#39;s/eth0/lo/&#39; &amp;gt; foo.sh
sh-4.1# chmod +x foo.sh
sh-4.1# ./foo.sh
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;We will see the ICMP packets are dumped on the terminal. That&amp;rsquo;s it!&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
        </item>
      
    
      
        <item>
          <title>First Post</title>
          <link>http://tbd.kaitoy.xyz/2015/07/18/first-post/</link>
          <pubDate>Sat, 18 Jul 2015 13:10:37 MDT</pubDate>
          <author>Kaito Yamada</author>
          <guid>http://tbd.kaitoy.xyz/2015/07/18/first-post/</guid>
          <description>&lt;p&gt;初投稿。&lt;/p&gt;

&lt;p&gt;ブログを立ち上げようと思ったきっかけは、&lt;a href=&#34;http://www.teamed.io/&#34;&gt;Teamed.io&lt;/a&gt;というCaliforniaのソフトウェアアウトソーシング(?)をやってる会社のCTO、
Yegor Bugayenko (yegor256)のブログのエントリ、&lt;a href=&#34;http://www.yegor256.com/2014/10/29/how-much-do-you-cost.html&#34;&gt;How Much Do You Cost?&lt;/a&gt;。&lt;/p&gt;

&lt;p&gt;これは、Teamed.ioがエンジニアに払うfeeを決める際の指標についてのエントリで、その指標の一つとして &lt;em&gt;Talks and Publications&lt;/em&gt; を挙げている。&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Both blog articles and conference presentations make you much more valuable as a specialist.
Mostly because these things demonstrate that some people already reviewed your work and your talent.
And it was not just a single employer, but a group of other programmers and engineers.
This means that we also can rely on your opinions.&lt;/p&gt;

&lt;div style=&#34;font-size: 0.5em; text-align: right;&#34;&gt;&lt;cite&gt;引用元: &lt;a href=&#34;http://www.yegor256.com/2014/10/29/how-much-do-you-cost.html#talks-and-publications&#34;&gt;http://www.yegor256.com/2014/10/29/how-much-do-you-cost.html#talks-and-publications&lt;/a&gt;&lt;/cite&gt;&lt;/div&gt;
&lt;/blockquote&gt;

&lt;p&gt;つまり、カンファレンスで発表したりブログで意見を発信すると、それらを見た様々な人たちによってレビューされフィードバックを受けることになるので、
そういった経験が多いエンジニアは、より洗練された考えや技術を持っているとみなせるということ。&lt;/p&gt;

&lt;p&gt;確かに、普段会社の同僚としか接しないので、自分の意見を広く発信してフィードバックを受けるのは刺激になりおもしろそうだしためになりそう。
ただそのためにはこのブログが広く読まれコメントをもらえるまでになる必要があるが、それはさておき、
文筆の練習として、また物事に対する理解を深めるためにも、書くということは有益であろう。備忘録にもなるし。&lt;/p&gt;

&lt;p&gt;因みに、Yegorはオブジェクト指向プログラミングの原理主義者で、ソフトウェア開発に対して非常に厳格で斬新な(異端な?)考え方を持っている。
それは例えば彼の以下のブログエントリに見られる。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://www.yegor256.com/2015/01/08/morning-standup-meetings.html&#34;&gt;Daily Stand-Up Meetings Are a Good Tool for a Bad Manager&lt;/a&gt; (スタンドアップミーティングはダメマネージャーが好む手法)&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.yegor256.com/2014/12/01/orm-offensive-anti-pattern.html&#34;&gt;ORM Is an Offensive Anti-Pattern&lt;/a&gt; (ORMはけしからんアンチパターン)&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.yegor256.com/2014/09/16/getters-and-setters-are-evil.html&#34;&gt;Getters/Setters. Evil. Period.&lt;/a&gt; (GetterやSetterは悪だ。以上。)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;下で働くと苦労しそうなタイプな気はするが、言っていることは面白いし説得力もあるので、いくつかのエントリを和訳しておいおいここで紹介していこうかと思う。&lt;/p&gt;
</description>
        </item>
      
    

  </channel>
</rss>
